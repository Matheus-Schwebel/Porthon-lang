# Query: return

20028 results - 955 files
The result set only contains a subset of all matches. Be more specific in your search to narrow down the results.

color-conquest-master\src\render.py:
   5: 	return tuple(int(i * 255) for i in colorsys.hsv_to_rgb(h,s,v))
   8: 	return 'rgb(' + str(rgbTuple[0]) + ',' + str(rgbTuple[1]) + ',' + str(rgbTuple[2]) + ')'
  11: 	return hueFromGrid / 360.0
  17: 	return result

Products\abrvalg-master\abrvalg\__main__.py:
  30:     return argparser.parse_args()

Products\abrvalg-master\abrvalg\lexer.py:
   16:         return str(tuple(self))
   34:         return chars[char]
   36:     return regex.sub(replace, s[1:-1])
   41:         return int(s)
   43:         return float(s)
   78:         'return': 'RETURN',
  116:         return re.compile('|'.join(self._convert_rules(rules)))
  142:         return count
  146:             return line[0] * self._count_leading_characters(line, line[0])
  186:         return tokens
  201:         return token
  206:         return token
  210:             return self._tokens[self._pos]
  221:         return self._pos == len(self._tokens)

Products\abrvalg-master\math\pi.abr:
  3:     return PI

Products\games\tetris\app.py:
  7:     return render_template('index.html')

Products\games\tetris\static\tetris.js:
  58:                 return true;
  62:     return false;
  76:     return shape[0].map((_, i) => shape.map(row => row[i])).reverse();

Products\megasearch\scrapping.py:
  10:         return json.load(f)
  21:         return paragraphs, images
  24:         return [], []

Projeto_Games\Calculator.py:
  7:     #return n * n
  8:     #return n ** 2
  9:     return pow(n, 2)

Projeto_Games\my_script.py:
  3:     return f"Ol√°, {nome}!"

Projeto_Games\teste1.py:
  26:         return jogador

PythonVenv\Lib\site-packages\typing_extensions.py:
    90:     'NoReturn',
   147:         return "<sentinel>"
   155:         return isinstance(
   160:         return isinstance(t, (typing._GenericAlias, _types.GenericAlias))
   163:         return isinstance(t, typing._GenericAlias) and not t._special
   166: NoReturn = typing.NoReturn
   185:             return super().__instancecheck__(obj)
   189:                 return "typing_extensions.Any"
   190:             return super().__repr__()
   204:             return super().__new__(cls, *args, **kwargs)
   212:         return 'typing_extensions.' + self._name
   252:         return f
   256:     return typing.TypeVar(name)
   271:         return tuple(params)
   280:                 return NotImplemented
   283:             return these_args_deduped == other_args_deduped
   286:             return hash(frozenset(_value_and_type_iter(self.__args__)))
   316:             return _LiteralGenericAlias(self, parameters)
   384:         return _overload_dummy
   387:         """Return all defined overloads for *func* as a sequence."""
   391:             return []
   394:             return []
   395:         return list(mod_dict[f.__qualname__].values())
   424:         return attr.startswith('__') and attr.endswith('__')
   479:             return self.copy_with(params)
   527:     return attrs
   532:         return sys._getframe(depth).f_globals.get('__name__', '__main__')
   534:         return None
   547:         return _caller(depth) in {'abc', 'functools', None}
   593:             return abc.ABCMeta.__new__(mcls, name, bases, namespace, **kwargs)
   602:                 return type.__subclasscheck__(cls, other)
   624:             return abc.ABCMeta.__subclasscheck__(cls, other)
   630:                 return type.__instancecheck__(cls, instance)
   633:                 return abc.ABCMeta.__instancecheck__(cls, instance)
   643:                 return True
   654:                 return True
   656:             return False
   663:                 return True
   664:             return cls is Protocol and other is typing.Protocol
   670:             return type.__hash__(cls)
   675:             return NotImplemented
   682:                         return NotImplemented
   694:                 return NotImplemented
   695:         return True
   771:         return cls
   835:         An ABC with one abstract method __abs__ that is covariant in its return type.
   846:         An ABC with one abstract method __round__ that is covariant in its return type.
   863:             return functools.update_wrapper(t(), func)
   866:             return func
   867:     return inner
   922:             Subclasses and instances of TypedDict return actual dictionaries.
  1026:             return tp_dict
  1125:         return td
  1143:         # On 3.8, this would otherwise return True
  1145:             return False
  1146:         return isinstance(tp, _TYPEDDICT_TYPES)
  1163:         At runtime this returns the first argument unchanged and otherwise
  1166:         return val
  1176:             return _strip_extras(t.__origin__)
  1178:             return _strip_extras(t.__args__[0])
  1182:                 return t
  1183:             return t.copy_with(stripped_args)
  1187:                 return t
  1188:             return _types.GenericAlias(t.__origin__, stripped_args)
  1192:                 return t
  1193:             return functools.reduce(operator.or_, stripped_args)
  1195:         return t
  1198:         """Return type hints for an object.
  1207:         are returned as a dictionary. For classes, annotations include also
  1211:         annotations, and an empty dictionary is returned if no annotations are
  1236:             return hint
  1237:         return {k: _strip_extras(t) for k, t in hint.items()}
  1266:             return _AnnotatedAlias(new_type, self.__metadata__)
  1269:             return (f"typing_extensions.Annotated[{typing._type_repr(self.__origin__)}, "
  1273:             return operator.getitem, (
  1279:                 return NotImplemented
  1281:                 return False
  1282:             return self.__metadata__ == other.__metadata__
  1285:             return hash((self.__origin__, self.__metadata__))
  1338:             return _AnnotatedAlias(origin, metadata)
  1368:         and Annotated. Return None for unsupported types. Examples::
  1380:             return Annotated
  1383:             return tp.__origin__
  1385:             return typing.Generic
  1386:         return None
  1400:             return (tp.__origin__, *tp.__metadata__)
  1403:                 return ()
  1407:             return res
  1408:         return ()
  1462:             return globals().get("NoDefault") or object.__new__(cls)
  1465:             return "typing_extensions.NoDefault"
  1468:             return "NoDefault"
  1496:         return isinstance(__instance, cls._backported_typevarlike)
  1532:                 return args
  1535:             return typevar
  1552:             return self
  1555:             return self
  1573:             return f"{self.__origin__.__name__}.args"
  1577:                 return NotImplemented
  1578:             return self.__origin__ == other.__origin__
  1596:             return f"{self.__origin__.__name__}.kwargs"
  1600:                 return NotImplemented
  1601:             return self.__origin__ == other.__origin__
  1648:                 return args
  1651:             return paramspec
  1683:                    return f(*args, **kwargs)
  1684:                return inner
  1689:                return x + y
  1712:             return ParamSpecArgs(self)
  1716:             return ParamSpecKwargs(self)
  1745:             return prefix + self.__name__
  1748:             return object.__hash__(self)
  1751:             return self is other
  1754:             return self.__name__
  1779:             return (f'{_type_repr(self.__origin__)}'
  1783:             return hash((self.__origin__, self.__args__))
  1791:             return tuple(
  1808:     return _ConcatenateGenericAlias(self, parameters)
  1829:         return _concatenate_getitem(self, parameters)
  1834:             return _concatenate_getitem(self, parameters)
  1856:         """Special typing form used to annotate the return type of a user-defined
  1858:         At runtime, functions marked this way should return a boolean.
  1868:         return type to alert static type checkers to this intention.
  1873:         1. The return value is a boolean.
  1874:         2. If the return value is ``True``, the type of its argument
  1899:         return typing._GenericAlias(self, (item,))
  1906:             return typing._GenericAlias(self, (item,))
  1910:         doc="""Special typing form used to annotate the return type of a user-defined
  1912:         At runtime, functions marked this way should return a boolean.
  1922:         return type to alert static type checkers to this intention.
  1927:         1. The return value is a boolean.
  1928:         2. If the return value is ``True``, the type of its argument
  1960:         """Special typing form used to annotate the return type of a user-defined
  1962:         At runtime, functions marked this way should return a boolean.
  1972:         return type to alert static type checkers to this intention.
  1977:         1. The return value is a boolean.
  1978:         2. If the return value is ``True``, the type of its argument
  1985:                 return hasattr(val, '__await__')
  1997:         return typing._GenericAlias(self, (item,))
  2004:             return typing._GenericAlias(self, (item,))
  2008:         doc="""Special typing form used to annotate the return type of a user-defined
  2010:         At runtime, functions marked this way should return a boolean.
  2020:         return type to alert static type checkers to this intention.
  2025:         1. The return value is a boolean.
  2026:         2. If the return value is ``True``, the type of its argument
  2033:                 return hasattr(val, '__await__')
  2057:             return self._name
  2065:         return f'typing_extensions.{self._name}'
  2068:         return self._name
  2074:         return typing.Union[self, other]
  2077:         return typing.Union[other, self]
  2087:         return self._getitem(self, parameters)
  2124:           class ReturnsSelf:
  2127:                   return self
  2142:         called, or a function that never returns::
  2186:         return typing._GenericAlias(self, (item,))
  2203:         return typing._GenericAlias(self, (item,))
  2210:             return typing._GenericAlias(self, (item,))
  2265:         return typing._GenericAlias(self, (item,))
  2272:             return typing._GenericAlias(self, (item,))
  2338:         return get_origin(obj) is Unpack
  2357:                 return arg.__args__
  2358:             return None
  2363:         return _UnpackAlias(self, (item,))
  2366:         return isinstance(obj, _UnpackAlias)
  2376:             return _UnpackAlias(self, (item,))
  2381:         return isinstance(obj, _UnpackAlias)
  2397:         return newargs
  2447:                 return (
  2456:             return tvt
  2496:                     return self._shape
  2524:             return self.__name__
  2527:             return object.__hash__(self)
  2530:             return self is other
  2533:             return self.__name__
  2556:         argument and returns it unchanged.
  2560:         return obj
  2627:                 return cls
  2684:             return cls_or_fn
  2685:         return decorator
  2726:         return arg
  2771:         exist on the overload as returned by ``get_overloads()``.
  2801:                 return arg
  2813:                         return original_new(cls, *args, **kwargs)
  2818:                         return original_new(cls)
  2831:                         return original_init_subclass(*args, **kwargs)
  2840:                         return original_init_subclass(*args, **kwargs)
  2846:                 return arg
  2853:                     return arg(*args, **kwargs)
  2856:                 return wrapper
  2890:                     return
  2901:                         return
  2938:                         return
  2961:         return False  # err on the side of leniency
  2966:             return False
  2970:         return origin is typing.Generic or origin is Protocol or origin is typing.Protocol
  2978:         return False
  2980:     return (
  3025:         return tuple(tvars)
  3083:         return tuple(parameters)
  3107:         return nm_tpl
  3180:             return nm_tpl
  3186:         return (_NamedTuple,)
  3252:         return nt
  3289:         """Return the class's "original" bases prior to modification by `__mro_entries__`.
  3310:             return cls.__dict__.get("__orig_bases__", cls.__bases__)
  3325:         by static type checkers. At runtime, NewType(name, tp) returns
  3326:         a dummy callable that simply returns its argument. Usage::
  3337:             return obj
  3363:             return (Dummy,)
  3366:             return f'{self.__module__}.{self.__qualname__}'
  3369:             return self.__qualname__
  3376:                 return typing.Union[self, other]
  3379:                 return typing.Union[other, self]
  3387:         return obj is None or isinstance(obj, (
  3464:             return self.__name__
  3475:             return typing._GenericAlias(self, tuple(parameters))
  3478:             return self.__name__
  3495:                     return NotImplemented
  3496:                 return typing.Union[self, right]
  3500:                     return NotImplemented
  3501:                 return typing.Union[left, self]
  3509:         """Return True if the given type is a Protocol.
  3522:         return (
  3530:         """Return the set of members defined in a Protocol.
  3546:             return frozenset(tp.__protocol_attrs__)
  3547:         return frozenset(_get_protocol_attrs(tp))
  3555:          used in class attributes, function and method parameters, return values,
  3574:             return f"Doc({self.documentation!r})"
  3577:             return hash(self.documentation)
  3581:                 return NotImplemented
  3582:             return self.documentation == other.documentation

PythonVenv\Lib\site-packages\_distutils_hack\__init__.py:
    8:         return
   23:         return
   41:     return which == 'local'
   78:         return all(pat in string for pat in self._patterns)
   86:             return None
   90:         return method()
   94:             return None
  111:             return None
  116:                 return mod
  121:         return importlib.util.spec_from_loader(
  131:         return os.path.isfile('pybuilddir.txt')
  139:             return
  150:         return any(
  157:         Return True if the indicated frame suggests a setup.py file.
  160:         return frame.f_globals.get('__file__', '').endswith('setup.py')

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\__init__.py:
  17:     return [

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\pre_safe_import_module\hook-win32com.py:
  30:         return
  41:         return  # win32com unavailable

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\rthooks\pyi_rth_pygraphviz.py:
  30:         return program_path

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\rthooks\pyi_rth_tensorflow.py:
  32:     # in the frozen application returns anonymized relative source file name (`tensorflow/__init__.py`) - so we need one
  40:         return [

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\rthooks\pyi_rth_usb.py:
  62:         return library
  64:     return _load_library

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-bacon.py:
  25:     return [(os.path.join(pkg_dir, file), '.') for file in files]

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-cryptography.py:
  60:         return bool(backend._lib.CRYPTOGRAPHY_OPENSSL_300_OR_GREATER)

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-cv2.py:
   85:         return None
  103:             return str(extension_file), str(dest_dir)
  109:     return None

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-discid.py:
  22: # On error, PyInstaller >= 5.0 raises exception, earlier versions return an empty string.

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-fabric.py:
  14: # yielding useful Python objects in return

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-OpenGL.py:
  27:     Return list of array modules for OpenGL module.
  43:     return modules

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-pydantic.py:
  22:     # NOTE: in PyInstaller 4.x and earlier, get_module_attribute() returns the string representation of the value
  23:     # ('True'), while in PyInstaller 5.x and later, the actual value is returned (True).

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-pylint.py:
  69:     return (

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-pylsl.py:
  29:     return libfile

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-pymediainfo.py:
  31:                 return resolved_binary[0][1]

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-pypemicro.py:
  28:         return libs

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-rtree.py:
  20: # later versions, None is returned.

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-sentry_sdk.py:
  34:         return integration_name.rsplit(".", maxsplit=1)[0]

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-sounddevice.py:
  50:                 return resolved_binary[0][1]

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-soundfile.py:
  50:                 return resolved_binary[0][1]

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-tensorflow.py:
  101:     return x not in excluded_submodules
  160:         return cudautils.infer_hiddenimports_from_requirements(requirements)

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-torch.py:
   65:             return cudautils.infer_hiddenimports_from_requirements(requirements)
   91:                 return []  # This torch build does not depend on MKL
   98:                 return []  # For some reason, `mkl` distribution is unavailable.
  123:             return mkl_binaries

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\stdhooks\hook-usb.py:
  48:                 # OSX returns the full path, Linux only the filename.
  84:     # `_resolveCtypesImports` returns a 3-tuple, but `binaries` are only

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\hooks\utils\nvidia_cuda.py:
  43:     return binaries
  62:     return nvidia_hiddenimports

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\tests\__init__.py:
  28:     return dirs

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\tests\test_deep_learning.py:
  139:                 return embedding
  147:                 return loss
  154:                 return optimizer
  238:                 return gpytorch.distributions.MultivariateNormal(mean_x, covar_x)

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\tests\test_libraries.py:
   575:             return val
  1028:             return None
  1030:         return m.group('gui')
  1440:         return_value, errors = compliance_checker.runner.ComplianceChecker.run_checker(
  1449:         print("Return value:", return_value)
  1613:             return {"hello": "world"}
  2080:                 return

PythonVenv\Lib\site-packages\_pyinstaller_hooks_contrib\tests\scripts\pyi_lib_pycparser.py:
  22:     return [fname for fname in fnames_to_track if os.path.isfile(fname)]

PythonVenv\Lib\site-packages\click_repl\_repl.py:
  36:     return defaults
  98:             return session.prompt()

PythonVenv\Lib\site-packages\datasets\keyhash.py:
   40:     Returns the input hash_data in its bytes form
   46:         # Data already in bytes, returns as it as
   47:         return hash_data
   58:     return hash_data.encode("utf-8")
   94:         """Returns 128-bits unique hash of input key
   99:         Returns: 128-bit int hash key"""
  104:         return int(md5.hexdigest(), 16)

PythonVenv\Lib\site-packages\datasets\metric.py:
   71:         return f"{obj}"
   74:         return ", ".join(repr(x) for x in chunk)
   76:     return f"[{format_chunk(obj[:3])}, ..., {format_chunk(obj[-3:])}]"
   97:         return self._metric_info
  101:         return self._metric_info.metric_name
  105:         return self._metric_info.experiment_id
  109:         return self._metric_info.description
  113:         return self._metric_info.citation
  117:         return self._metric_info.features
  121:         return self._metric_info.inputs_description
  125:         return self._metric_info.homepage
  129:         return self._metric_info.license
  133:         return self._metric_info.codebase_urls
  137:         return self._metric_info.reference_urls
  141:         return self._metric_info.streamable
  145:         return self._metric_info.format
  244:         """Return the number of examples (predictions or predictions/references pair)
  247:         return 0 if self.writer is None else len(self.writer)
  250:         return (
  265:         return builder_data_dir
  298:         return file_path, filelock
  333:         return file_paths, filelocks
  416:         Return:
  472:             return output
  474:             return None
  601:         Returns:
  638:         return None

PythonVenv\Lib\site-packages\geocoder\mapzen.py:
   25:         return self._geometry['coordinates'][1]
   29:         return self._geometry['coordinates'][0]
   33:         return BBox.factory(self.latlng).as_dict
   37:         return self._properties.get('label')
   41:         return self._properties.get('housenumber')
   45:         return self._properties.get('street')
   49:         return self._properties.get('neighbourhood')
   53:         return self._properties.get('locality')
   57:         return self._properties.get('region')
   61:         return self._properties.get('country')
   65:         return self._properties.get('postalcode')
   69:         return self._properties.get('gid')
   73:         return self._properties.get('id')
   96:         return {
  103:         return json_response['features']

PythonVenv\Lib\site-packages\geocoder\uscensus_batch.py:
   35:             return self._coordinates[1]
   40:             return self._coordinates[0]
   45:             return self._content[0]
   52:     The Census Geocoder is an address look-up tool that converts your address to an approximate coordinate (latitude/longitude) and returns information about the address range that includes the address and the census geography the address is within. The geocoder is available as a web interface and as an API (Representational State Transfer - REST - web-based service).
   73:         return csv_encode(out.getvalue())
   81:         return {
  102:             return response.content
  110:         return False
  120:         return rows

PythonVenv\Lib\site-packages\geocoder\uscensus_reverse.py:
  16:         return bool(self.raw['States'])
  21:             return self.raw['States'][0].get('NAME')
  26:             return self.raw['States'][0].get('STATE')
  31:             return self.raw['Counties'][0].get('NAME')
  36:             return self.raw['Counties'][0].get('COUNTY')
  41:             return self.raw['Census Tracts'][0].get('NAME')
  46:             return self.raw['Census Tracts'][0].get('TRACT')
  51:             return self.raw['2010 Census Blocks'][0].get('NAME')
  53:             return self.raw['Census Blocks'][0].get('NAME')
  58:             return self.raw['2010 Census Blocks'][0].get('BLOCK')
  60:             return self.raw['Census Blocks'][0].get('BLOCK')
  65:             return self.raw['2010 Census Blocks'][0].get('GEOID')
  67:             return self.raw['Census Blocks'][0].get('GEOID')
  74:     The Census Geocoder is an address look-up tool that converts your address to an approximate coordinate (latitude/longitude) and returns information about the address range that includes the address and the census geography the address is within. The geocoder is available as a web interface and as an API (Representational State Transfer - REST - web-based service).
  89:         return {
  98:         return [json_response['result']['geographies']]

PythonVenv\Lib\site-packages\geocoder\w3w_reverse.py:
  13:         return bool(self.words)
  46:         return {

PythonVenv\Lib\site-packages\geocoder\w3w.py:
  17:             return position['lat']
  23:             return position['lng']
  27:         return self.raw.get('language')
  31:         return self.raw.get('words')
  65:         return {
  71:         return [json_response]

PythonVenv\Lib\site-packages\geocoder\yahoo.py:
   14:         return self.raw.get('latitude')
   18:         return self.raw.get('longitude')
   25:             return ', '.join([line1, line2])
   27:             return line2
   31:         return self.raw.get('house')
   35:         return self.raw.get('street')
   39:         return self.raw.get('neighborhood')
   43:         return self.raw.get('city')
   47:         return self.raw.get('county')
   51:         return self.raw.get('state')
   55:         return self.raw.get('country')
   59:         return self.raw.get('hash')
   63:         return self.raw.get('addressMatchType')
   69:             return postal
   71:             return self.raw.get('uzip')
   94:         return{
  106:         return self.error
  109:         return [json_response['Result']]

PythonVenv\Lib\site-packages\geocoder\yandex_reverse.py:
  16:         return bool(self.address)
  56:         return {

PythonVenv\Lib\site-packages\geocoder\yandex.py:
   20:             return pos.split(' ')[1]
   26:             return pos.split(' ')[0]
   35:                 return self._get_bbox(float(south),
   44:         return self.raw.get('description')
   48:         return self._meta_data.get('text')
   52:         return self._meta_data.get('kind')
   56:         return self._meta_data.get('precision')
   60:         return self._meta_data.get('AddressDetails', {}).get('Country', {})
   64:         return self._country.get('CountryName')
   68:         return self._country.get('CountryNameCode')
   72:         return self._country.get('AdministrativeArea', {})
   76:         return self._administrativeArea.get('AdministrativeAreaName')
   80:         return self._administrativeArea.get('SubAdministrativeArea', {})
   84:         return self._subAdministrativeArea.get('SubAdministrativeAreaName')
   88:         return self._subAdministrativeArea.get('Locality', {})
   92:         return self._locality.get('LocalityName')
   96:         return self._locality.get('Thoroughfare', {})
  100:         return self._thoroughfare.get('ThoroughfareName')
  104:         return self._thoroughfare.get('Premise', {})
  108:         return self._premise.get('PremiseNumber')
  150:         return {
  159:         return [item['GeoObject'] for item

PythonVenv\Lib\site-packages\tokenizers\__init__.pyi:
    95:         Returns:
   110:         Returns:
   125:         Returns:
   138:         Returns:
   155:         Returns:
   165:         Returns:
   178:         Returns:
   229:         Returns:
   250:         Returns:
   259:         The returned offsets are related to the input sequence that contains the
   267:         Returns:
   276:         In the general use case, this method returns :obj:`0` for a single sequence or
   283:         Returns:
   292:         The returned word index is related to the input sequence that contains
   300:         Returns:
   312:         Returns:
   344:         Returns:
   362:         Returns:
   377:         Returns:
   393:         Returns:
   415:         Returns:
   472:         Replaces each character of the string using the returned value. Each
   473:         returned value **must** be a str of length 1 (ie a character).
   552:         Returns:
   596:                 Whether the returned splits should have offsets expressed relative
   600:                 Whether the returned splits should have offsets expressed in bytes or chars.
   606:         Returns
   618:                 does not need to return anything, just calling the methods on the provided
   630:                 It is expected to return a list of `NormalizedString`, that represent the new
   632:                 just return it directly.
   633:                 In order for the offsets to be tracked accurately, any returned `NormalizedString`
   640:         Return an Encoding generated from this PreTokenizedString
   651:         Returns:
   662:                 The function used to tokenize each underlying split. This function must return
   706:         Returns:
   723:         Returns:
   741:         Returns:
   757:         Returns:
   853:         Returns:
   889:         Returns:
   917:         Returns:
   932:         Returns:
   953:         Returns:
   968:         Returns:
   977:         Returns:
   990:         Returns:
  1003:         Returns:
  1016:         Returns:
  1049:         Return the number of special tokens that would be added for single/pair sentences.
  1051:         :return:
  1062:         Returns:
  1090:         Returns:
  1130:         Returns:
  1143:         Returns:
  1196:         Returns:

PythonVenv\Lib\site-packages\transformers\activations.py:
   46:         return nn.functional.gelu(input, approximate="tanh")
   56:         return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
   75:         return input * 0.5 * (1.0 + torch.erf(input / math.sqrt(2.0)))
   78:         return self.act(input)
   87:         return 0.5 * input * (1.0 + torch.tanh(input * 0.7978845608 * (1.0 + 0.044715 * input * input)))
   96:         return input * torch.sigmoid(1.702 * input)
  121:         return torch.clip(gelu(x), self.min, self.max)
  137:         return 0.5 * input * (1 + torch.tanh(self.precomputed_constant * (input + 0.044715 * torch.pow(input, 3))))
  154:         return input * torch.tanh(nn.functional.softplus(input))
  157:         return self.act(input)
  166:         return input
  179:         return 0.5 * (1.0 + torch.erf(input))
  190:         return squared
  197:         return cls(**kwargs)
  226:         return ACT2FN[activation_string]

PythonVenv\Lib\site-packages\transformers\cache_utils.py:
   40:         Return:
   46:         """Returns the sequence length of the cached states. A layer index can be optionally passed."""
   51:         """Returns the maximum sequence length of the cached states, if there is any."""
   55:         """Given the sequence length of the new inputs, returns the usable length of the cache."""
   62:             return max_length - new_seq_length
   63:         return previous_seq_length
   80:             return self._seen_tokens
   82:             return None
  104:             return (self.key_cache[layer_idx], self.value_cache[layer_idx])
  121:         return len(self.key_cache)
  143:         Return:
  158:         return self.key_cache[layer_idx], self.value_cache[layer_idx]
  161:         """Returns the sequence length of the cached states. A layer index can be optionally passed."""
  164:             return 0
  165:         return self.key_cache[layer_idx].shape[-2]
  168:         """Returns the maximum sequence length of the cached states. DynamicCache does not have a maximum length."""
  169:         return None
  176:         return legacy_cache
  186:         return cache
  219:         return torch.cat((-x2, x1), dim=-1)
  225:         return rotated_key_states
  247:         return self.cos_sin_rerotation_cache[key_states.shape[-2]]
  250:         """Returns the sequence length of the cached states. A layer index can be optionally passed."""
  254:             return 0
  255:         return self.key_cache[layer_idx].shape[-2]
  258:         """Returns the maximum sequence length of the cached states."""
  259:         return self.window_length
  283:         Return:
  353:         return self.key_cache[layer_idx], self.value_cache[layer_idx]
  422:         Return:
  432:         return k_out, v_out
  435:         """Returns the sequence length of the cached states that were seen by the model."""
  439:         return (self.key_cache[layer_idx][0, 0].any(dim=-1)).sum()
  442:         """Returns the maximum sequence length of the cached states."""
  443:         return self.max_cache_len

PythonVenv\Lib\site-packages\transformers\convert_slow_tokenizer.py:
    41:         return sentencepiece_model_pb2
    53:     return prepend_scheme
    70:         By default will return vocab and merges with respect to their order, by sending `vocab_scores` we're going to
    94:         return vocab, merges
   100:         By default will return vocab and merges with respect to their order, by sending `vocab_scores` we're going to
   128:         return vocab, merges
   132:     return len(piece) < 2 or piece[-1] != "," or not piece[-2].isdigit()
   179:         return tokenizer
   229:         return tokenizer
   268:         return tokenizer
   307:         return tokenizer
   334:         return tokenizer
   369:         return tokenizer
   400:         return tokenizer
   442:         return tokenizer
   471:         return tokenizer
   510:         return tokenizer
   541:         return tokenizer
   568:         return [(piece.piece, piece.score) for piece in proto.pieces]
   571:         return proto.trainer_spec.unk_id
   596:         return tokenizer
   605:             return normalizers.Sequence(_normalizers)
   607:             return normalizers.Sequence([normalizers.Precompiled(precompiled_charsmap)] + _normalizers)
   611:         return pre_tokenizers.Metaspace(replacement=replacement, prepend_scheme=prepend_scheme)
   614:         return None
   618:         return decoders.Metaspace(replacement=replacement, prepend_scheme=prepend_scheme)
   642:         return tokenizer
   647:         return [
   669:         return normalizers.Sequence(list_normalizers)
   672:         return processors.TemplateProcessing(
   685:         return unk_id
   688:         return processors.TemplateProcessing(
   710:         return vocab
   714:         return 3
   717:         return processors.TemplateProcessing(
   734:         return pre_tokenizers.Sequence(list_pretokenizers)
   747:         return normalizers.Sequence(list_normalizers)
   750:         return processors.TemplateProcessing(
   797:         return vocab
   800:         return 3
   803:         return processors.TemplateProcessing(
   824:         return vocab
   827:         return 3
   830:         return processors.TemplateProcessing(
   849:         return vocab
   852:         return 3
   855:         return processors.TemplateProcessing(
   874:         return vocab
   877:         return self.original_tokenizer.unk_token_id
   880:         return processors.TemplateProcessing(
   900:         return vocab
   904:         return unk_id
   907:         return processors.TemplateProcessing(
   919:         return [
   941:         return normalizers.Sequence(list_normalizers)
   944:         return processors.TemplateProcessing(
   977:         return normalizers.Sequence(list_normalizers)
   980:         return processors.TemplateProcessing(
  1012:         return vocab
  1015:         return proto.trainer_spec.unk_id + self.original_tokenizer.offset
  1019:         return pre_tokenizers.Sequence(
  1031:         return processors.TemplateProcessing(single=["$A", eos], pair=["$A", "$B", eos], special_tokens=special_tokens)
  1039:         return vocab
  1042:         return processors.TemplateProcessing(
  1053:         return processors.TemplateProcessing(
  1095:         return tokenizer
  1100:         return processors.TemplateProcessing(
  1150:         return tokenizer
  1189:         return tokenizer
  1218:         return tokenizer
  1231:         return vocab
  1235:         return unk_id
  1238:         return processors.TemplateProcessing(
  1262:         return normalizers.Replace(" ", "‚ñÅ")
  1276:         return vocab
  1279:         return pre_tokenizers.Split(" ", "merged_with_previous")
  1283:         return unk_id
  1286:         return decoders.Sequence(
  1335:         return tokenizer
  1348:         return vocab
  1352:         return unk_id
  1362:         return decoders.Sequence(sequence)
  1393:         return tokenizer
  1401:             return normalizers.Sequence(sequence)
  1402:         return None  # non-legacy, no normalizer
  1407:             return pre_tokenizers.Metaspace(replacement=replacement, prepend_scheme=prepend_scheme, split=False)
  1408:         return None
  1412:         return None
  1450:         return tokenizer
  1456:     Returns list of utf-8 byte and a mapping to unicode strings. We specifically avoids mapping to whitespace/control
  1475:     return dict(zip(bs, cs))
  1507:             return "".join([byte_encoder[ord(char)] for char in b.decode("latin-1")])
  1524:         return vocab, merges
  1531:         return tokenizer
  1543:         return tokenizer
  1615:     Return:
  1631:     return converter_class(transformer_tokenizer).converted()

PythonVenv\Lib\site-packages\transformers\feature_extraction_sequence_utils.py:
   48:         self.return_attention_mask = kwargs.pop("return_attention_mask", True)
   65:         return_attention_mask: Optional[bool] = None,
   66:         return_tensors: Optional[Union[str, TensorType]] = None,
   78:         result will use the same type unless you provide a different tensor type with `return_tensors`. In the case of
   91:                 see the note above for the return type.
   93:                 Select a strategy to pad the returned sequences (according to the model's padding side and padding
  103:                 Maximum length of the returned list and optionally padding length (see above).
  111:             return_attention_mask (`bool`, *optional*):
  112:                 Whether to return the attention mask. If left to the default, will return the attention mask according
  116:             return_tensors (`str` or [`~utils.TensorType`], *optional*):
  117:                 If set, will return tensors instead of list of python integers. Acceptable values are:
  119:                 - `'tf'`: Return TensorFlow `tf.constant` objects.
  120:                 - `'pt'`: Return PyTorch `torch.Tensor` objects.
  121:                 - `'np'`: Return Numpy `np.ndarray` objects.
  139:         return_attention_mask = (
  140:             return_attention_mask if return_attention_mask is not None else self.return_attention_mask
  144:             if return_attention_mask:
  146:             return processed_features
  149:         # and rebuild them afterwards if no return_tensors is specified
  161:         if return_tensors is None:
  163:                 return_tensors = "tf"
  165:                 return_tensors = "pt"
  167:                 return_tensors = "np"
  214:                 return_attention_mask=return_attention_mask,
  224:         return BatchFeature(batch_outputs, tensor_type=return_tensors)
  232:         return_attention_mask: Optional[bool] = None,
  242:                 Maximum length of the returned list and optionally padding length (see below)
  257:             return_attention_mask (`bool`, *optional*):
  258:                 Set to False to avoid returning attention mask (default: set to model specifics)
  270:         if return_attention_mask and "attention_mask" not in processed_features:
  276:                 if return_attention_mask:
  285:                 if return_attention_mask:
  296:         return processed_features
  313:                 maximum length of the returned list and optionally padding length (see below)
  322:             return processed_features
  339:         return processed_features
  371:         return padding_strategy

PythonVenv\Lib\site-packages\transformers\modeling_tf_pytorch_utils.py:
   67:     return tuple with:
  125:     return tf_name, transpose
  148:         return weight
  162:     return weight
  212:     return load_pytorch_weights_in_tf2_model(
  227:     return load_pytorch_weights_in_tf2_model(
  256:     return load_pytorch_state_dict_in_tf2_model(
  444:         return tf_model, loading_info
  446:     return tf_model
  489:         return tf_model, loading_info
  491:     return tf_model
  535:     return load_tf2_model_in_pytorch_model(
  544:     return load_tf2_weights_in_pytorch_model(
  562:     return load_tf2_state_dict_in_pytorch_model(
  674:         return pt_model, loading_info
  676:     return pt_model

PythonVenv\Lib\site-packages\transformers\modeling_tf_utils.py:
   120:         return y_pred
   123:         return tf.reduce_mean(y_pred, axis=reduction_axes)
   137:                 Whether or not to return only the number of trainable parameters
   139:         Returns:
   143:             return int(sum(np.prod(w.shape.as_list()) for w in self.trainable_variables))
   145:             return self.count_params()
   166:     Returns:
   203:             return cfg
   210:     return cls
   231:             return loss_fn(labels, reduced_logits)
   239:         return tf.reshape(reduced_masked_loss, (1,))
   252:         return (start_loss + end_loss) / 2.0
   283:             return loss_fn(labels, reduced_logits)
   294:         return tf.reshape(reduced_masked_loss, (1,))
   306:                 # MeanSquaredError returns a scalar loss if the labels are 1D, so avoid that
   313:         return loss_fn(labels, logits)
   321:         return loss_fn(labels, logits)
   356:             return loss_fn(next_sentence_label, next_sentence_reduced_logits)
   367:         return masked_ns_loss
   380:     Returns:
   394:     final_booleans["return_dict"] = kwargs["return_dict"] if kwargs["return_dict"] is not None else config.return_dict
   400:     return final_booleans
   414:     Returns:
   437:         return func(self, **unpacked_inputs)
   444:     return run_call_with_unpacked_inputs
   461:     Returns:
   607:             if k in ["return_dict", "output_attentions", "output_hidden_states", "use_cache"]
   617:     return output
   622:     Returns the size (in bytes) occupied by one parameter of type `dtype`.
   632:         return 1 / 8
   637:     return bit_size // 8
   647:     return name
   696:     # If we only have one shard, we return it
   698:         return {weights_name: sharded_state_dicts[0]}, None
   716:     return shards, index
   735:     Returns:
   783:     return missing_keys, unexpected_keys, mismatched_keys
   797:     Returns:
   850:         return saved_weight_names_set, unexpected_keys, mismatched_keys
   894:     Returns:
   927:     return missing_keys, unexpected_keys, mismatched_keys
   943:     Returns:
   952:     return load_function(
  1054:     return missing_layers, unexpected_layers, mismatched_layers
  1086:     return missing_layers, unexpected_layers, mismatched_layers
  1126:     return mask, current_weights
  1169:         Returns:
  1193:         return dummies
  1204:         return "tf"
  1224:         return self.config.to_dict()
  1229:         return super().fit(*args, **kwargs)
  1234:         return super().train_on_batch(*args, **kwargs)
  1239:         return super().test_on_batch(*args, **kwargs)
  1244:         return super().predict_on_batch(*args, **kwargs)
  1249:         return super().predict(*args, **kwargs)
  1254:         return super().evaluate(*args, **kwargs)
  1259:             return cls._from_config(config, **kwargs)
  1260:         return cls._from_config(cls.config_class.from_dict(config, **kwargs))
  1267:         return cls(config, **kwargs)
  1279:         Returns:
  1288:         return head_mask
  1299:         return head_mask
  1312:         return self.serving_output(output)
  1317:         This property should return a dict mapping input names to tf.TensorSpec objects, representing the expected
  1359:         return sig
  1366:             return output
  1383:         return output
  1388:         Returns whether this model can generate sequences with `.generate()`.
  1390:         Returns:
  1396:             return False
  1397:         return True
  1401:         Returns the model's input embeddings layer.
  1403:         Returns:
  1409:             return main_layer.get_input_embeddings()
  1441:         model. If you want to specify the column names to return rather than using the names that match this model, we
  1448:                 The size of batches to return.
  1450:                 Whether to return samples from the dataset in random order. Usually `True` for training datasets and
  1469:         Returns:
  1477:                 collate_fn = DefaultDataCollator(return_tensors="np")
  1479:                 collate_fn = DataCollatorWithPadding(tokenizer=tokenizer, return_tensors="np")
  1512:         # were a single element list, the returned element spec would be a single element. Now, passing [feature]
  1513:         # will return a dict structure {"feature": feature}, and passing a single string will return a single element.
  1529:         return tf_dataset
  1588:             return super().compute_loss(*args, **kwargs)
  1597:             return self.hf_compute_loss(*args, **kwargs)
  1602:             return self._label_to_output_map
  1604:             return {"start_positions": "start_logits", "end_positions": "end_logits"}
  1606:             return {"labels": "prediction_logits", "sentence_order_label": "sop_logits"}
  1608:             return {"labels": "prediction_logits", "next_sentence_label": "seq_relationship_logits"}
  1610:             return {"labels": "logits", "mc_labels": "mc_logits"}
  1612:             return {}
  1669:             if self._using_dummy_loss and "return_loss" in arg_names:
  1670:                 y_pred = self(x, training=True, return_loss=True)
  1712:         # Collect metrics to return
  1713:         return_metrics = {}
  1717:                 return_metrics.update(result)
  1719:                 return_metrics[metric.name] = result
  1720:         return return_metrics
  1776:         if self._using_dummy_loss and "return_loss" in arg_names:
  1777:             y_pred = self(x, return_loss=True, training=False)
  1816:         # Collect metrics to return
  1817:         return_metrics = {}
  1821:                 return_metrics.update(result)
  1823:                 return_metrics[metric.name] = result
  1824:         return return_metrics
  1908:         Returns the model's output embeddings
  1910:         Returns:
  1917:                 return lm_head.get_output_embeddings()
  1922:                 return lm_head().get_output_embeddings()
  1924:         return None  # Overwrite for models with output embeddings
  1948:         Return:
  1954:         return self.get_lm_head()
  1960:         Return:
  1964:         return None
  1970:         Return:
  1976:                 return lm_head.get_bias()
  1980:                 return lm_head.get_bias()
  1981:         return None
  2003:         Return:
  2006:         return None
  2020:                 returns a pointer to the input tokens without doing anything.
  2022:         Return:
  2029:             return self._v2_resized_token_embeddings(new_num_tokens)
  2032:             return self._get_word_embedding_weight(self.get_input_embeddings())
  2039:         return model_embeds
  2049:                 returns a pointer to the input tokens without doing anything.
  2051:         Return:
  2055:             return self.get_input_embeddings()
  2062:         return model_embeds
  2067:         # If the variable holds the weights themselves, return them
  2069:             return embedding_layer
  2074:             return embeds
  2078:             return embeds
  2087:             return embeds
  2091:             return embeds
  2093:         return None
  2116:         return self.get_input_embeddings()
  2137:         return self.get_input_embeddings()
  2151:                 vectors from the end. If not provided or `None`, just returns None
  2153:         Return:
  2190:         return new_lm_head_bias
  2206:         Return:
  2224:         return new_lm_head_bias
  2238:                 vectors from the end. If not provided or `None`, just returns None
  2240:         Return:
  2262:         return new_lm_head_decoder
  2276:                 vectors from the end. If not provided or `None`, just returns a pointer to the input tokens
  2279:         Return:
  2297:         return new_embeddings
  2312:         Return:
  2344:         return new_embeddings
  2429:             return
  2615:                 output_loading_info(`bool`, *optional*, defaults to `False`): Whether ot not to also return a
  2729:                 return_unused_kwargs=True,
  2961:             return load_pytorch_checkpoint_in_tf2_model(
  2984:                 return load_pytorch_state_dict_in_tf2_model(
  2997:             return load_sharded_pytorch_safetensors_in_tf2_model(
  3131:             return model, loading_info
  3133:         return model
  3296:             return
  3311:         return x
  3363:         return dict(list(base_config.items()) + list(config.items()))
  3378:         Returns:
  3391:             return self._embedding(inputs)
  3393:             return self._linear(inputs)
  3399:         return tf.gather(self.weight, input_ids)
  3408:         Returns:
  3415:         return tf.reshape(logits, first_dims + [self.vocab_size])
  3532:         return output
  3536:             return
  3550:     Returns:
  3553:     return keras.initializers.TruncatedNormal(stddev=initializer_range)

PythonVenv\Lib\site-packages\transformers\modeling_utils.py:
    91:     replace_return_docstrings,
   134:     return (
   143:     return (
   210:         return next(parameter.parameters()).device
   216:             return tuples
   220:         return first_tuple[1].device
   225:     Returns the first parameter dtype (can be non-floating) or asserts if none were found.
   228:         return next(parameter.parameters()).dtype
   234:             return tuples
   238:         return first_tuple[1].dtype
   243:     Returns the first found floating dtype in parameters if there is one, otherwise returns the last dtype it found.
   254:                 return torch.bfloat16
   257:                     return torch.bfloat16
   259:                     return torch.float32
   260:             return t.dtype
   263:         # if no floating dtype was found return whatever the first dtype is
   264:         return last_dtype
   269:         return tuples
   276:             return tuple[1].dtype
   280:         return last_tuple[1].dtype
   286:             return t.dtype
   287:     return last_dtype
   292:     Returns the first found floating dtype in `state_dict` or asserts if none were found.
   296:             return t.dtype
   303:     Returns the first found floating dtype in `state_dict` if there is one, otherwise returns the first dtype.
   307:             return t.dtype
   309:     # if no floating dtype was found return whatever the first dtype is
   311:         return next(state_dict.values()).dtype
   316:     Returns the size (in bytes) occupied by one parameter of type `dtype`.
   326:         return 1 / 8
   331:     return bit_size // 8
   395:     # If we only have one shard, we return it
   397:         return {weights_name: sharded_state_dicts[0]}, None
   414:     return shards, index
   435:     Returns:
   498:     # Return the same thing as PyTorch load_state_dict function.
   499:     return torch.nn.modules.module._IncompatibleKeys(missing_keys, unexpected_keys)
   504:     Reads a PyTorch checkpoint file, returning properly formatted errors if they arise.
   515:         return safe_load_file(checkpoint_file)
   534:         return torch.load(
   574:     return not_initialized_submodules
   583:     return stop
   597:     return tied_weight_keys
   628:     return shared_tensors, disjoint_tensors
   647:     return shared_tensors, identical
   708:     return error_msgs
   731:     return submodule, split_key[0]
   753:                 # isinstance returns False for Params on meta device, so switch after the check
   898:             # TODO: consider removing used param_parts from state_dict before return
   900:     return error_msgs, offload_index, state_dict_index
   909:     return weights_name
   927:         return None
   941:         return None
   970:         return get_parameter_device(self)
   977:         return get_parameter_dtype(self)
   986:         Returns:
  1001:         return encoder_extended_attention_mask
  1029:         return extended_attention_mask
  1043:         Returns:
  1081:         return extended_attention_mask
  1097:         Returns:
  1108:         return head_mask
  1119:         return head_mask
  1127:                 Whether or not to return only the number of trainable parameters
  1130:                 Whether or not to return only the number of non-embeddings parameters
  1132:         Returns:
  1173:         return sum(total_numel)
  1182:         Returns:
  1188:             return input_dict[self.main_input_name].numel()
  1194:         return 0
  1216:         Returns:
  1220:         return 6 * self.estimate_tokens(input_dict) * self.num_parameters(exclude_embeddings=exclude_embeddings)
  1292:         return {"input_ids": torch.tensor(DUMMY_INPUTS)}
  1299:         return "pt"
  1341:         return hf_quantizer.dequantize(self)
  1422:         return model
  1495:         return config
  1500:         Change the default dtype and return the previous one. This is needed when wanting to instantiate the model
  1507:         Returns:
  1509:             modified. If it wasn't, returns `None`.
  1522:         return dtype_orig
  1529:         return getattr(self, self.base_model_prefix, self)
  1534:         Returns whether this model can generate sequences with `.generate()`.
  1536:         Returns:
  1542:             return False
  1543:         return True
  1633:         return config
  1655:             return config
  1659:             return config
  1663:         return config
  1684:         Returns the model's input embeddings.
  1686:         Returns:
  1691:             return base_model.get_input_embeddings()
  1710:         Returns the model's output embeddings.
  1712:         Returns:
  1715:         return None  # Overwrite for models with output embeddings
  1731:             return
  1795:                 return
  1850:         return tied_weights
  1881:         Returns:
  1899:         return list(_no_split_modules)
  1913:                 returns a pointer to the input tokens `torch.nn.Embedding` module of the model without doing anything.
  1923:         Return:
  1928:             return model_embeds
  1940:         return model_embeds
  1977:         return self.get_input_embeddings()
  1996:                 vectors from the end. If not provided or `None`, just returns a pointer to the input tokens
  2008:         Return:
  2030:             return old_embeddings
  2042:             return old_embeddings
  2081:         return new_embeddings
  2097:                 vectors from the end. If not provided or `None`, just returns a pointer to the input tokens
  2102:         Return:
  2107:             return old_lm_head
  2123:             return old_lm_head
  2165:         return new_lm_head
  2321:         return any(hasattr(m, "gradient_checkpointing") and m.gradient_checkpointing for m in self.modules())
  2426:             return
  2663:         return super().push_to_hub(*args, **kwargs)
  2665:     def get_memory_footprint(self, return_buffers=True):
  2667:         Get the memory footprint of a model. This will return the memory footprint of the current model in bytes.
  2672:             return_buffers (`bool`, *optional*, defaults to `True`):
  2673:                 Whether to return the size of the buffer tensors in the computation of the memory footprint. Buffers
  2678:         if return_buffers:
  2681:         return mem
  2694:             return super().cuda(*args, **kwargs)
  2724:         return super().to(*args, **kwargs)
  2734:             return super().half(*args)
  2744:             return super().float(*args)
  2836:                 Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.
  3138:                 config_dict=config_dict, return_unused_kwargs=True, **kwargs
  3161:                 return_unused_kwargs=True,
  3501:             state_dict = load_gguf_checkpoint(gguf_path, return_tensors=True)["tensors"]
  3842:             return model, loading_info
  3844:         return model
  3899:                 return key.replace("beta", "bias")
  3901:                 return key.replace("gamma", "weight")
  3902:             return key
  4104:             return mismatched_keys
  4308:         return model, missing_keys, unexpected_keys, mismatched_keys, offload_index, error_msgs
  4331:         return retrieved_modules
  4366:         return error_msgs
  4405:         Returns:
  4420:         return BetterTransformer.transform(self)
  4427:         Returns:
  4442:         return BetterTransformer.reverse(self)
  4451:             return
  4454:             return
  4487:             return False
  4489:         return self.hf_quantizer.is_trainable
  4523:         Returns:
  4534:         return x
  4580:         Returns:
  4603:         return x
  4646:         Returns:
  4668:         return x
  4677:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned if both `start_positions` and `end_positions` are provided):
  4680:         start_top_log_probs (`torch.FloatTensor` of shape `(batch_size, config.start_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
  4682:         start_top_index (`torch.LongTensor` of shape `(batch_size, config.start_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
  4684:         end_top_log_probs (`torch.FloatTensor` of shape `(batch_size, config.start_n_top * config.end_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
  4687:         end_top_index (`torch.LongTensor` of shape `(batch_size, config.start_n_top * config.end_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
  4689:         cls_logits (`torch.FloatTensor` of shape `(batch_size,)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
  4721:     @replace_return_docstrings(output_type=SquadHeadOutput, config_class=PretrainedConfig)
  4730:         return_dict: bool = False,
  4747:             return_dict (`bool`, *optional*, defaults to `False`):
  4748:                 Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  4750:         Returns:
  4777:             return SquadHeadOutput(loss=total_loss) if return_dict else (total_loss,)
  4807:             if not return_dict:
  4808:                 return (start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits)
  4810:                 return SquadHeadOutput(
  4886:         Returns:
  4915:         return output
  4939:         return extract_model_from_parallel(model, **kwargs)
  4943:             return unwrap_model(model.module)
  4945:             return model
  4950:     Expand a device map to return the correspondance parameter name to device.
  4958:     return new_device_map
  4963:     Returns the list of shard files containing only weights offloaded to disk.
  4975:     return [fname for fname, devices in files_content.items() if set(devices) == {"disk"}]

PythonVenv\Lib\site-packages\transformers\optimization_tf.py:
   54:             Optional name prefix for the returned tensors during the schedule.
   80:             return tf.cond(
   88:         return {
  176:     # We return the optimizer and the LR scheduler in order to better track the
  178:     return optimizer, lr_schedule
  242:         return super(AdamWeightDecay, cls).from_config(config, custom_objects=custom_objects)
  253:             return var.assign_sub(
  257:         return tf.no_op()
  261:         return super(AdamWeightDecay, self).apply_gradients(zip(grads, tvars), name=name, **kwargs)
  266:             return self._decayed_lr_t[var_dtype], {}
  274:         return coefficients["lr_t"], {"apply_state": apply_state}
  280:             return super(AdamWeightDecay, self)._resource_apply_dense(grad, var, **kwargs)
  286:             return super(AdamWeightDecay, self)._resource_apply_sparse(grad, var, indices, **kwargs)
  291:         return config
  296:             return False
  301:                     return True
  306:                     return False
  307:         return True
  319:     # performed on assignment. To get the value, we call .value() which returns the
  338:         return self._accum_steps.value()
  345:         return [gradient.value() if gradient is not None else gradient for gradient in self._gradients]
  376:             return

PythonVenv\Lib\site-packages\transformers\optimization.py:
   37:     return 1
   50:     Return:
   54:     return LambdaLR(optimizer, _get_constant_lambda, last_epoch=last_epoch)
   68:     Return:
   72:     return ReduceLROnPlateau(optimizer, **kwargs)
   77:         return float(current_step) / float(max(1.0, num_warmup_steps))
   78:     return 1.0
   94:     Return:
   99:     return LambdaLR(optimizer, lr_lambda, last_epoch=last_epoch)
  104:         return float(current_step) / float(max(1, num_warmup_steps))
  105:     return max(0.0, float(num_training_steps - current_step) / float(max(1, num_training_steps - num_warmup_steps)))
  123:     Return:
  132:     return LambdaLR(optimizer, lr_lambda, last_epoch)
  139:         return float(current_step) / float(max(1, num_warmup_steps))
  141:     return max(0.0, 0.5 * (1.0 + math.cos(math.pi * float(num_cycles) * 2.0 * progress)))
  165:     Return:
  175:     return LambdaLR(optimizer, lr_lambda, last_epoch)
  182:         return float(current_step) / float(max(1, num_warmup_steps))
  185:         return 0.0
  186:     return max(0.0, 0.5 * (1.0 + math.cos(math.pi * ((float(num_cycles) * progress) % 1.0))))
  209:     Return:
  219:     return LambdaLR(optimizer, lr_lambda, last_epoch)
  232:         return float(current_step) / float(max(1, num_warmup_steps))
  234:         return lr_end / lr_init  # as LambdaLR multiplies by lr_init
  240:         return decay / lr_init  # as LambdaLR multiplies by lr_init
  269:     Return:
  286:     return LambdaLR(optimizer, lr_lambda, last_epoch)
  291:         return float(current_step) / float(max(1, num_warmup_steps))
  294:     return decay
  314:     Return:
  324:     return LambdaLR(optimizer, lr_lambda, last_epoch=last_epoch)
  331:         return float(current_step) / float(max(1, num_warmup_steps))
  335:     return max(0, factor)
  369:     Return:
  387:     return LambdaLR(optimizer, lr_lambda, last_epoch)
  400:         return float(current_step) / float(max(1, num_warmup_steps))
  402:         return 1.0
  406:         return (1.0 - min_lr_ratio) * value + min_lr_ratio
  407:     return min_lr_ratio
  443:     Return:
  454:     return LambdaLR(optimizer, lr_lambda, last_epoch)
  522:         return LayerWiseDummyScheduler()
  525:         return schedule_func(optimizer)
  531:         return schedule_func(optimizer, **scheduler_specific_kwargs)
  538:         return schedule_func(optimizer, num_warmup_steps=num_warmup_steps)
  541:         return schedule_func(optimizer, num_warmup_steps=num_warmup_steps)
  547:     return schedule_func(
  612:             closure (`Callable`, *optional*): A closure that reevaluates the model and returns the loss.
  666:         return loss
  795:         return param_scale * rel_step_sz
  801:         return factored, use_first_moment
  805:         return tensor.norm(2) / (tensor.numel() ** 0.5)
  813:         return torch.mul(r_factor, c_factor)
  822:                 and returns the loss.
  907:         return loss
  915:     It returns `initial_lr` during startup and the actual `lr` during stepping.
  920:             return initial_lr
  937:         return lrs
  950:     Return:
  955:     return AdafactorSchedule(optimizer, initial_lr)

PythonVenv\Lib\site-packages\transformers\processing_utils.py:
  106:         Returns:
  138:         return output
  144:         Returns:
  149:         return json.dumps(dictionary, indent=2, sort_keys=True) + "\n"
  165:         return f"{self.__class__.__name__}:\n{attributes_repr}\n\n{self.to_json_string()}"
  253:             return []
  254:         return [output_processor_file]
  271:         Returns:
  340:             return {}, kwargs
  363:         return processor_dict, kwargs
  378:         Returns:
  383:         return_unused_kwargs = kwargs.pop("return_unused_kwargs", False)
  401:         if return_unused_kwargs:
  402:             return processor, kwargs
  404:             return processor
  468:         return cls.from_args_and_dict(args, processor_dict, **kwargs)
  512:         return args
  517:         return getattr(first_attribute, "model_input_names", None)

PythonVenv\Lib\site-packages\transformers\pytorch_utils.py:
   47:     return _softmax_backward_data(grad_output, output, parent.dim, self.dtype)
   61:     Returns:
   81:     return new_layer
  106:         return x
  121:     Returns:
  139:     return new_layer
  155:     Returns:
  159:         return prune_linear_layer(layer, index, dim=0 if dim is None else dim)
  161:         return prune_conv1d_layer(layer, index, dim=1 if dim is None else dim)
  186:     Returns:
  196:         return hidden_states
  201:         return apply_chunking_to_forward(self.forward_chunk, self.chunk_size_lm_head, self.seq_len_dim, hidden_states)
  236:         return torch.cat(output_chunks, dim=chunk_dim)
  238:     return forward_fn(*input_tensors)
  253:     Returns:
  265:     return heads, index
  276:     return torch.meshgrid(*tensors, indexing=indexing)
  297:     return tensor.device, unique_id, storage_size(tensor)

PythonVenv\Lib\site-packages\transformers\safetensors_conversion.py:
   21:                 return discussion
   22:     return None
   53:                     return
   72:     # returns it. It checks that the PR was opened by the bot and not by another user so as to prevent
   84:     return sha
   93:             return None, None
  108:         return resolved_archive_file, sha, sharded

PythonVenv\Lib\site-packages\transformers\testing_utils.py:
   182:     return _value
   195:     return _value
   218:         return unittest.skip("test is PT+TF test")(test_case)
   223:             return test_case
   225:             return pytest.mark.is_pt_tf_cross_test()(test_case)
   237:         return unittest.skip("test is PT+FLAX test")(test_case)
   242:             return test_case
   244:             return pytest.mark.is_pt_flax_cross_test()(test_case)
   254:         return unittest.skip("test is staging test")(test_case)
   259:             return test_case
   261:             return pytest.mark.is_staging_test()(test_case)
   270:         return unittest.skip("test is pipeline test")(test_case)
   275:             return test_case
   277:             return pytest.mark.is_pipeline_test()(test_case)
   285:         return unittest.skip("test is an agent test")(test_case)
   290:             return test_case
   292:             return pytest.mark.is_agent_test()(test_case)
   302:     return unittest.skipUnless(_run_slow_tests, "test is slow")(test_case)
   313:     return unittest.skip("test is too slow")(test_case)
   323:     return unittest.skipUnless(_run_custom_tokenizers, "test of custom tokenizers")(test_case)
   330:     return unittest.skipUnless(is_bs4_available(), "test requires BeautifulSoup4")(test_case)
   338:     return unittest.skipUnless(is_galore_torch_available(), "test requires GaLore")(test_case)
   348:     return unittest.skipUnless(is_cv2_available(), "test requires OpenCV")(test_case)
   358:     return unittest.skipUnless(is_levenshtein_available(), "test requires Levenshtein")(test_case)
   368:     return unittest.skipUnless(is_nltk_available(), "test requires NLTK")(test_case)
   375:     return unittest.skipUnless(
   384:     return unittest.skipUnless(is_gguf_available(), "test requires gguf")(test_case)
   391:     return unittest.skipUnless(is_fsdp_available(min_version), f"test requires torch version >= {min_version}")(
   400:     return unittest.skipUnless(is_g2p_en_available(), "test requires g2p_en")(test_case)
   407:     return unittest.skipUnless(is_safetensors_available(), "test requires safetensors")(test_case)
   414:     return unittest.skipUnless(is_rjieba_available(), "test requires rjieba")(test_case)
   421:     return unittest.skipUnless(is_jieba_available(), "test requires jieba")(test_case)
   428:     return unittest.skipUnless(is_jinja_available(), "test requires jinja")(test_case)
   432:     return unittest.skipUnless(is_tf2onnx_available(), "test requires tf2onnx")(test_case)
   436:     return unittest.skipUnless(is_onnx_available(), "test requires ONNX")(test_case)
   446:     return unittest.skipUnless(is_timm_available(), "test requires Timm")(test_case)
   456:     return unittest.skipUnless(is_natten_available(), "test requires natten")(test_case)
   466:     return unittest.skipUnless(is_torch_available(), "test requires PyTorch")(test_case)
   476:     return unittest.skipUnless(is_flash_attn_2_available(), "test requires Flash Attention")(test_case)
   485:     return unittest.skipUnless(is_torch_sdpa_available(), "test requires PyTorch SDPA")(test_case)
   496:         with patch("huggingface_hub.utils._headers.get_token", return_value=token):
   497:             return fn(*args, **kwargs)
   499:     return _inner
   509:     return unittest.skipUnless(is_peft_available(), "test requires PEFT")(test_case)
   519:     return unittest.skipUnless(is_torchvision_available(), "test requires Torchvision")(test_case)
   529:     return unittest.skipUnless(is_torch_available() or is_tf_available(), "test requires PyTorch or TensorFlow")(
   542:     return unittest.skipUnless(
   556:     return unittest.skipUnless(is_tensorflow_probability_available(), "test requires TensorFlow probability")(
   565:     return unittest.skipUnless(is_torchaudio_available(), "test requires torchaudio")(test_case)
   572:     return unittest.skipUnless(is_tf_available(), "test requires TensorFlow")(test_case)
   579:     return unittest.skipUnless(is_flax_available(), "test requires JAX & Flax")(test_case)
   586:     return unittest.skipUnless(is_sentencepiece_available(), "test requires SentencePiece")(test_case)
   593:     return unittest.skipUnless(is_sacremoses_available(), "test requires Sacremoses")(test_case)
   600:     return unittest.skipUnless(is_seqio_available(), "test requires Seqio")(test_case)
   607:     return unittest.skipUnless(is_scipy_available(), "test requires Scipy")(test_case)
   614:     return unittest.skipUnless(is_tokenizers_available(), "test requires tokenizers")(test_case)
   622:     return unittest.skipUnless(is_tensorflow_text_available(), "test requires tensorflow_text")(test_case)
   629:     return unittest.skipUnless(is_keras_nlp_available(), "test requires keras_nlp")(test_case)
   636:     return unittest.skipUnless(is_pandas_available(), "test requires pandas")(test_case)
   643:     return unittest.skipUnless(is_pytesseract_available(), "test requires PyTesseract")(test_case)
   651:     return unittest.skipUnless(is_pytorch_quantization_available(), "test requires PyTorch Quantization Toolkit")(
   661:     return unittest.skipUnless(is_vision_available(), "test requires vision")(test_case)
   668:     return unittest.skipUnless(is_ftfy_available(), "test requires ftfy")(test_case)
   675:     return unittest.skipUnless(is_spacy_available(), "test requires spacy")(test_case)
   682:     return unittest.skipUnless(is_decord_available(), "test requires decord")(test_case)
   693:         return unittest.skip("test requires PyTorch")(test_case)
   697:     return unittest.skipUnless(torch.cuda.device_count() > 1, "test requires multiple GPUs")(test_case)
   707:         return unittest.skip("test requires PyTorch")(test_case)
   709:     return unittest.skipUnless(backend_device_count(torch_device) > 1, "test requires multiple accelerators")(
   719:         return unittest.skip("test requires PyTorch")(test_case)
   723:     return unittest.skipUnless(torch.cuda.device_count() < 2, "test requires 0 or 1 GPU")(test_case)
   731:         return unittest.skip("test requires PyTorch")(test_case)
   733:     return unittest.skipUnless(backend_device_count(torch_device) < 2, "test requires 0 or 1 accelerator")(test_case)
   741:         return unittest.skip("test requires PyTorch")(test_case)
   745:     return unittest.skipUnless(torch.cuda.device_count() < 3, "test requires 0 or 1 or 2 GPUs")(test_case)
   753:         return unittest.skip("test requires PyTorch")(test_case)
   755:     return unittest.skipUnless(backend_device_count(torch_device) < 3, "test requires 0 or 1 or 2 accelerators")
   763:     return unittest.skipUnless(is_torch_xla_available(), "test requires TorchXLA")(test_case)
   770:     return unittest.skipUnless(is_torch_neuroncore_available(check_device=False), "test requires PyTorch NeuronCore")(
   779:     return unittest.skipUnless(is_torch_npu_available(), "test requires PyTorch NPU")(test_case)
   790:         return unittest.skip("test requires PyTorch NPU")(test_case)
   792:     return unittest.skipUnless(torch.npu.device_count() > 1, "test requires multiple NPUs")(test_case)
   802:     return unittest.skipUnless(is_torch_xpu_available(), "test requires IPEX and an XPU device")(test_case)
   813:         return unittest.skip("test requires IPEX and at least one XPU device")(test_case)
   815:     return unittest.skipUnless(torch.xpu.device_count() > 1, "test requires multiple XPUs")(test_case)
   878:     return unittest.skipUnless(is_torchdynamo_available(), "test requires TorchDynamo")(test_case)
   883:     return unittest.skipUnless(is_torch_tensorrt_fx_available(), "test requires Torch-TensorRT FX")(test_case)
   888:     return unittest.skipUnless(torch_device == "cuda", "test requires CUDA")(test_case)
   893:     return unittest.skipUnless(torch_device is not None and torch_device != "cpu", "test requires accelerator")(
   900:     return unittest.skipUnless(
   907:     return unittest.skipUnless(
   914:     return unittest.skipUnless(
   922:     return unittest.skipUnless(
   930:     return unittest.skipUnless(
   937:     return unittest.skipUnless(is_detectron2_available(), "test requires `detectron2`")(test_case)
   942:     return unittest.skipUnless(is_faiss_available(), "test requires `faiss`")(test_case)
   952:     return unittest.skipUnless(is_optuna_available(), "test requires optuna")(test_case)
   962:     return unittest.skipUnless(is_ray_available(), "test requires Ray/tune")(test_case)
   972:     return unittest.skipUnless(is_sigopt_available(), "test requires SigOpt")(test_case)
   982:     return unittest.skipUnless(is_wandb_available(), "test requires wandb")(test_case)
   992:     return unittest.skipUnless(is_clearml_available(), "test requires clearml")(test_case)
  1002:     return unittest.skipUnless(is_soundfile_availble(), "test requires soundfile")(test_case)
  1009:     return unittest.skipUnless(is_deepspeed_available(), "test requires deepspeed")(test_case)
  1016:     return unittest.skipUnless(is_apex_available(), "test requires apex")(test_case)
  1023:     return unittest.skipUnless(is_aqlm_available(), "test requires aqlm")(test_case)
  1030:     return unittest.skipUnless(is_eetq_available(), "test requires eetq")(test_case)
  1037:     return unittest.skipUnless(is_av_available(), "test requires av")(test_case)
  1048:             return pytest.mark.bitsandbytes(test_case)
  1050:             return test_case
  1052:         return unittest.skip("test requires bitsandbytes and torch")(test_case)
  1059:     return unittest.skipUnless(is_optimum_available(), "test requires optimum")(test_case)
  1066:     return unittest.skipUnless(is_tensorboard_available(), "test requires tensorboard")
  1073:     return unittest.skipUnless(is_auto_gptq_available(), "test requires auto-gptq")(test_case)
  1080:     return unittest.skipUnless(is_auto_awq_available(), "test requires autoawq")(test_case)
  1087:     return unittest.skipUnless(is_quanto_available(), "test requires quanto")(test_case)
  1094:     return unittest.skipUnless(is_phonemizer_available(), "test requires phonemizer")(test_case)
  1101:     return unittest.skipUnless(is_pyctcdecode_available(), "test requires pyctcdecode")(test_case)
  1108:     return unittest.skipUnless(is_librosa_available(), "test requires librosa")(test_case)
  1115:     return unittest.skipUnless(is_essentia_available(), "test requires essentia")(test_case)
  1122:     return unittest.skipUnless(is_pretty_midi_available(), "test requires pretty_midi")(test_case)
  1126:     return shutil.which(cmd) is not None
  1133:     return unittest.skipUnless(cmd_exists("/usr/bin/time"), "test requires /usr/bin/time")(test_case)
  1140:     return unittest.skipUnless(is_sudachi_available(), "test requires sudachi")(test_case)
  1147:     return unittest.skipUnless(is_sudachi_projection_available(), "test requires sudachi which supports projection")(
  1156:     return unittest.skipUnless(is_jumanpp_available(), "test requires jumanpp")(test_case)
  1163:     return unittest.skipUnless(is_cython_available(), "test requires cython")(test_case)
  1168:     Return the number of available gpus (regardless of whether torch, tf or jax is used)
  1173:         return torch.cuda.device_count()
  1177:         return len(tf.config.list_physical_devices("GPU"))
  1181:         return jax.device_count()
  1183:         return 0
  1191:     Return:
  1204:         return os.path.join(tests_dir, append_path)
  1206:         return tests_dir
  1225:     return re.sub(r"^.*\r", "", buf, 0, re.M)
  1309:         return self
  1332:         return msg
  1362:     Returns:
  1388:         return self
  1395:         return f"captured: {self.out}\n"
  1460:     - stringified paths---same as above but these return paths as strings, rather than `pathlib` objects:
  1542:         return self._test_file_path
  1546:         return str(self._test_file_path)
  1550:         return self._test_file_dir
  1554:         return str(self._test_file_dir)
  1558:         return self._tests_dir
  1562:         return str(self._tests_dir)
  1566:         return self._examples_dir
  1570:         return str(self._examples_dir)
  1574:         return self._repo_root_dir
  1578:         return str(self._repo_root_dir)
  1582:         return self._src_dir
  1586:         return str(self._src_dir)
  1590:         Return a copy of the `os.environ` object that sets up `PYTHONPATH` correctly, depending on the test suite it's
  1606:         return env
  1629:         Returns:
  1674:         return tmp_dir
  1678:         Runs the passed python one liner (just the code) and returns how much max cpu memory was used to run the
  1685:         Returns:
  1705:         # returned data is in KB so convert to bytes
  1707:         return max_rss
  1732:     return mock.patch.dict(os.environ, kwargs)
  1862:             return
  1932:     def __init__(self, returncode, stdout, stderr):
  1933:         self.returncode = returncode
  1966:     # return _RunOutput(p.returncode, out, err)
  1985:     return _RunOutput(await p.wait(), out, err)
  1995:     if result.returncode > 0:
  1998:             f"'{cmd_str}' failed with returncode {result.returncode}\n\n"
  2007:     return result
  2012:     Returns an int value of worker's numerical id under `pytest-xdist`'s concurrent workers `pytest -n N` regime, or 0
  2017:     return int(worker)
  2022:     Returns a port number that can be fed to `torch.distributed.launch`'s `--master_port` argument.
  2029:     return port + uniq_delta
  2040:         return [nested_simplify(item, decimals) for item in obj]
  2042:         return tuple([nested_simplify(item, decimals) for item in obj])
  2044:         return nested_simplify(obj.tolist())
  2046:         return {nested_simplify(k, decimals): nested_simplify(v, decimals) for k, v in obj.items()}
  2048:         return obj
  2050:         return obj
  2052:         return nested_simplify(obj.tolist(), decimals)
  2054:         return nested_simplify(obj.numpy().tolist())
  2056:         return round(obj, decimals)
  2058:         return nested_simplify(obj.item(), decimals)
  2082:         return x
  2083:     return (x, x)
  2091: def run_command(command: List[str], return_stdout=False):
  2093:     Runs `command` with `subprocess.check_output` and will potentially return the `stdout`. Will also properly capture
  2098:         if return_stdout:
  2101:             return output
  2128:         return self
  2140:         return self._counter[key]
  2144:         return sum(self._counter.values())
  2168:                     return test_func_ref(*args, **kwargs)
  2176:             return test_func_ref(*args, **kwargs)
  2178:         return wrapper
  2180:     return decorator
  2241:     cuda stuff is detective (with a heuristic), this method will return an empty string so no doctest will be run for
  2262:     return modified_string
  2308:         return super().parse(string, name)
  2328:                 Wrapped Doctests will need to be unwrapped so the correct line number is returned. This will be
  2339:                 return super()._find_lineno(  # type:ignore[misc]
  2346:                     return
  2389:         return dispatch_table["default"](*args, **kwargs)
  2393:     # Some device agnostic functions return values. Need to guard against `None`
  2396:         return None
  2397:     return fn(*args, **kwargs)
  2409:     return _device_agnostic_dispatch(device, BACKEND_MANUAL_SEED, seed)
  2413:     return _device_agnostic_dispatch(device, BACKEND_EMPTY_CACHE)
  2417:     return _device_agnostic_dispatch(device, BACKEND_DEVICE_COUNT)

PythonVenv\Lib\site-packages\transformers\tf_utils.py:
   35:     Returns:
   39:         return list(tensor.shape)
   44:         return dynamic
   48:     return [dynamic[i] if s is None else s for i, s in enumerate(static)]
   53:     Stable wrapper that returns the same output as `tf.nn.softmax`, but that works reliably with XLA on CPU. It is
   66:     Returns:
   72:     return tf.nn.softmax(logits=logits + 1e-9, axis=axis, name=name)
  104:     return outputs
  131:     return probs @ value
  144:         return input
  149:     return tf.reshape(input, out_shape)
  159:     Returns:
  177:     return encoder_extended_attention_mask
  182:     `tf.gather`, on which TF embedding layers are based, won't check positive out of bound indices on GPU, returning
  257:     Returns:
  272:     return data
  281:             return tf.expand_dims(t, axis=-1)
  282:         return t
  284:     return tf.nest.map_structure(_expand_single_1d_tensor, data)
  294:     return args, kwargs

PythonVenv\Lib\site-packages\transformers\time_series_utils.py:
   44:         Returns the mean of the distribution.
   46:         return self.base_dist.mean * self.scale + self.loc
   51:         Returns the variance of the distribution.
   53:         return self.base_dist.variance * self.scale**2
   58:         Returns the standard deviation of the distribution.
   60:         return self.variance.sqrt()
   75:         return self.domain_map(*params_unbounded)
   84:         return self.function(x, *args)
   98:             return self.distribution_class(*distr_args)
  100:             return Independent(self.distribution_class(*distr_args), 1)
  110:             return distr
  112:             return AffineTransformed(distr, loc=loc, scale=scale, event_dim=self.event_dim)
  119:         return () if self.dim == 1 else (self.dim,)
  127:         return len(self.event_shape)
  135:         return 0.0
  139:         Return the parameter projection layer that maps the input to the appropriate parameters of the distribution.
  141:         return ParameterProjection(
  150:         correct shape is obtained by reshaping the trailing axis in such a way that the returned tensors define a
  161:         return (x + torch.sqrt(torch.square(x) + 4.0)) / 2.0
  176:         return df.squeeze(-1), loc.squeeze(-1), scale.squeeze(-1)
  190:         return loc.squeeze(-1), scale.squeeze(-1)
  204:         return total_count.squeeze(-1), logits.squeeze(-1)
  209:             return self.distribution_class(total_count=total_count, logits=logits)
  211:             return Independent(self.distribution_class(total_count=total_count, logits=logits), 1)
  214:     # transformation since negative binomial should return integers. Instead
  225:         return self._base_distribution((total_count, logits))

PythonVenv\Lib\site-packages\transformers\tokenization_utils_base.py:
   103:             return self.__dict__
   106:             return self.content
   188:             Dictionary of lists/arrays/tensors returned by the `__call__`/`encode_plus`/`batch_encode_plus` methods
   233:         return self._n_sequences
   241:         return self._encodings is not None
   245:         If the key is a string, returns the value of the dict associated to `key` ('input_ids', 'attention_mask',
   250:         If the key is a slice, returns the value of the dict associated to `key` ('input_ids', 'attention_mask', etc.)
   254:             return self.data[item]
   256:             return self._encodings[item]
   258:             return {key: self.data[key][item] for key in self.data.keys()}
   267:             return self.data[item]
   272:         return {"data": self.data, "encodings": self._encodings}
   282:         return self.data.keys()
   285:         return self.data.values()
   288:         return self.data.items()
   297:         `Optional[List[tokenizers.Encoding]]`: The list all encodings from the tokenization process. Returns `None` if
   300:         return self._encodings
   304:         Return the list of tokens (sub-parts of the input strings after word/subword splitting and before conversion to
   310:         Returns:
   318:         return self._encodings[batch_index].tokens
   322:         Return a list mapping the tokens to the id of their original sentences:
   332:         Returns:
   342:         return self._encodings[batch_index].sequence_ids
   346:         Return a list mapping the tokens to their actual word in the initial sentence for a fast tokenizer.
   351:         Returns:
   366:         return self.word_ids(batch_index)
   370:         Return a list mapping the tokens to their actual word in the initial sentence for a fast tokenizer.
   375:         Returns:
   385:         return self._encodings[batch_index].word_ids
   389:         Get the index of the sequence represented by the given token. In the general use case, this method returns `0`
   409:         Returns:
   424:         return self._encodings[batch_index].token_to_sequence(token_index)
   447:         Returns:
   462:         return self._encodings[batch_index].token_to_word(token_index)
   470:         Token spans are returned as a [`~tokenization_utils_base.TokenSpan`] with:
   496:         Returns:
   497:             ([`~tokenization_utils_base.TokenSpan`], *optional*): Span of tokens in the encoded sequence. Returns
   515:         return TokenSpan(*span) if span is not None else None
   521:         Character spans are returned as a [`~tokenization_utils_base.CharSpan`] with:
   540:         Returns:
   554:         return CharSpan(*span_indices) if span_indices is not None else None
   584:         Returns:
   595:         return self._encodings[batch_index].char_to_token(char_index, sequence_index)
   603:         Character spans are returned as a CharSpan NamedTuple with:
   624:         Returns:
   640:         return CharSpan(*(self._encodings[batch_index].word_to_chars(word_index, sequence_index)))
   668:         Returns:
   679:         return self._encodings[batch_index].char_to_word(char_index, sequence_index)
   695:             return self
   720:                     return torch.tensor(np.array(value))
   721:                 return torch.tensor(value)
   739:                 return isinstance(obj, mx.array)
   748:                 return np.asarray(value, dtype=dtype)
   772:                         "Unable to create tensor returning overflowing tokens of different lengths. "
   782:         return self
   791:         Returns:
   803:         return self
   882:         return self.add_tokens(self.all_special_tokens_extended, special_tokens=True)
   923:         Returns:
   943:             return 0
   984:         return added_tokens
  1012:         Returns:
  1028:             return 0
  1033:         return self._add_tokens(new_tokens, special_tokens=special_tokens)
  1046:             return None
  1047:         return str(self._bos_token)
  1057:             return None
  1058:         return str(self._eos_token)
  1068:             return None
  1069:         return str(self._unk_token)
  1080:             return None
  1081:         return str(self._sep_token)
  1091:             return None
  1092:         return str(self._pad_token)
  1103:             return None
  1104:         return str(self._cls_token)
  1115:             return None
  1116:         return str(self._mask_token)
  1127:             return None
  1128:         return [str(tok) for tok in self._additional_special_tokens]
  1179:         `Optional[int]`: Id of the beginning of sentence token in the vocabulary. Returns `None` if the token has not
  1183:             return None
  1184:         return self.convert_tokens_to_ids(self.bos_token)
  1189:         `Optional[int]`: Id of the end of sentence token in the vocabulary. Returns `None` if the token has not been
  1193:             return None
  1194:         return self.convert_tokens_to_ids(self.eos_token)
  1199:         `Optional[int]`: Id of the unknown token in the vocabulary. Returns `None` if the token has not been set.
  1202:             return None
  1203:         return self.convert_tokens_to_ids(self.unk_token)
  1209:         sequence. Returns `None` if the token has not been set.
  1212:             return None
  1213:         return self.convert_tokens_to_ids(self.sep_token)
  1218:         `Optional[int]`: Id of the padding token in the vocabulary. Returns `None` if the token has not been set.
  1221:             return None
  1222:         return self.convert_tokens_to_ids(self.pad_token)
  1229:         return self._pad_token_type_id
  1237:         Returns `None` if the token has not been set.
  1240:             return None
  1241:         return self.convert_tokens_to_ids(self.cls_token)
  1247:         modeling. Returns `None` if the token has not been set.
  1250:             return None
  1251:         return self.convert_tokens_to_ids(self.mask_token)
  1259:         return self.convert_tokens_to_ids(self.additional_special_tokens)
  1306:         return set_attr
  1322:         return set_attr
  1343:         return all_tokens
  1353:         return all_toks
  1362:         return all_ids
  1402:                 If set to a number along with `max_length`, the overflowing tokens returned when
  1403:                 `return_overflowing_tokens=True` will contain some tokens from the end of the truncated sequence
  1404:                 returned to provide some overlap between truncated and overflowing sequences. The value of this
  1414:             return_tensors (`str` or [`~utils.TensorType`], *optional*):
  1415:                 If set, will return tensors instead of list of python integers. Acceptable values are:
  1417:                 - `'tf'`: Return TensorFlow `tf.constant` objects.
  1418:                 - `'pt'`: Return PyTorch `torch.Tensor` objects.
  1419:                 - `'np'`: Return Numpy `np.ndarray` objects.
  1423:             return_token_type_ids (`bool`, *optional*):
  1424:                 Whether to return token type IDs. If left to the default, will return the token type IDs according to
  1425:                 the specific tokenizer's default, defined by the `return_outputs` attribute.
  1428:             return_attention_mask (`bool`, *optional*):
  1429:                 Whether to return the attention mask. If left to the default, will return the attention mask according
  1430:                 to the specific tokenizer's default, defined by the `return_outputs` attribute.
  1433:             return_overflowing_tokens (`bool`, *optional*, defaults to `False`):
  1434:                 Whether or not to return overflowing token sequences. If a pair of sequences of input ids (or a batch
  1436:                 of returning overflowing tokens.
  1437:             return_special_tokens_mask (`bool`, *optional*, defaults to `False`):
  1438:                 Whether or not to return special tokens mask information.
  1439:             return_offsets_mapping (`bool`, *optional*, defaults to `False`):
  1440:                 Whether or not to return `(char_start, char_end)` for each token.
  1444:             return_length  (`bool`, *optional*, defaults to `False`):
  1445:                 Whether or not to return the lengths of the encoded inputs.
  1450:         Return:
  1457:             - **token_type_ids** -- List of token type ids to be fed to a model (when `return_token_type_ids=True` or
  1463:               `return_attention_mask=True` or if *"attention_mask"* is in `self.model_input_names`).
  1468:               `return_overflowing_tokens=True`).
  1470:               `return_overflowing_tokens=True`).
  1472:               regular sequence tokens (when `add_special_tokens=True` and `return_special_tokens_mask=True`).
  1473:             - **length** -- The length of the inputs (when `return_length=True`)
  1616:         return self.model_max_length - self.num_special_tokens_to_add(pair=False)
  1623:         return self.model_max_length - self.num_special_tokens_to_add(pair=True)
  1661:         return (
  1674:         Returns the vocabulary as a dictionary of token to index.
  1679:         Returns:
  1693:         return_tensors: Optional[Union[str, TensorType]] = None,
  1694:         return_dict: bool = False,
  1722:             return_tensors (`str` or [`~utils.TensorType`], *optional*):
  1723:                 If set, will return tensors of a particular framework. Has no effect if tokenize is `False`. Acceptable
  1725:                 - `'tf'`: Return TensorFlow `tf.Tensor` objects.
  1726:                 - `'pt'`: Return PyTorch `torch.Tensor` objects.
  1727:                 - `'np'`: Return NumPy `np.ndarray` objects.
  1728:                 - `'jax'`: Return JAX `jnp.ndarray` objects.
  1729:             return_dict (`bool`, defaults to `False`):
  1730:                 Whether to return a dictionary with named outputs. Has no effect if tokenize is `False`.
  1734:         Returns:
  1736:             output is ready to pass to the model, either directly or via methods like `generate()`. If `return_dict` is
  1737:             set, will return a dict of tokenizer outputs instead.
  1740:         if return_dict and not tokenize:
  1742:                 "`return_dict=True` is incompatible with `tokenize=False`, because there is no dict "
  1743:                 "of tokenizer outputs to return."
  1827:                 return_tensors=return_tensors,
  1830:             if return_dict:
  1831:                 return out
  1833:                 return out["input_ids"]
  1835:             return rendered
  1856:         return jinja_env.from_string(chat_template)
  1864:         return (
  2110:         return cls._from_pretrained(
  2348:         return tokenizer
  2356:         return max_model_length
  2362:             return AddedToken(**obj)
  2370:             return obj
  2372:             return [cls.convert_added_tokens(o, save=save, add_type_field=add_type_field) for o in obj]
  2374:             return {k: cls.convert_added_tokens(v, save=save, add_type_field=add_type_field) for k, v in obj.items()}
  2375:         return obj
  2417:         Returns:
  2435:             return
  2542:         return save_files
  2567:         # the new get_added_vocab() also returns special tokens and tokens that have an index < vocab_size
  2577:         return file_names + vocab_files + (added_tokens_file,)
  2592:         Returns:
  2612:         Returns:
  2623:         Returns:
  2636:         return_tensors: Optional[Union[str, TensorType]] = None,
  2662:             return_tensors=return_tensors,
  2666:         return encoded_inputs["input_ids"]
  2807:         return padding_strategy, truncation_strategy, max_length, kwargs
  2825:         return_tensors: Optional[Union[str, TensorType]] = None,
  2826:         return_token_type_ids: Optional[bool] = None,
  2827:         return_attention_mask: Optional[bool] = None,
  2828:         return_overflowing_tokens: bool = False,
  2829:         return_special_tokens_mask: bool = False,
  2830:         return_offsets_mapping: bool = False,
  2831:         return_length: bool = False,
  2866:             "return_tensors": return_tensors,
  2867:             "return_token_type_ids": return_token_type_ids,
  2868:             "return_attention_mask": return_attention_mask,
  2869:             "return_overflowing_tokens": return_overflowing_tokens,
  2870:             "return_special_tokens_mask": return_special_tokens_mask,
  2871:             "return_offsets_mapping": return_offsets_mapping,
  2872:             "return_length": return_length,
  2891:             return encodings
  2893:             return target_encodings
  2896:             return encodings
  2909:         return_tensors: Optional[Union[str, TensorType]] = None,
  2910:         return_token_type_ids: Optional[bool] = None,
  2911:         return_attention_mask: Optional[bool] = None,
  2912:         return_overflowing_tokens: bool = False,
  2913:         return_special_tokens_mask: bool = False,
  2914:         return_offsets_mapping: bool = False,
  2915:         return_length: bool = False,
  2923:                 return True
  2928:                     return True
  2931:                     return True
  2934:                     return len(t[0]) == 0 or isinstance(t[0][0], str)
  2936:                     return False
  2938:                 return False
  2969:             return self.batch_encode_plus(
  2978:                 return_tensors=return_tensors,
  2979:                 return_token_type_ids=return_token_type_ids,
  2980:                 return_attention_mask=return_attention_mask,
  2981:                 return_overflowing_tokens=return_overflowing_tokens,
  2982:                 return_special_tokens_mask=return_special_tokens_mask,
  2983:                 return_offsets_mapping=return_offsets_mapping,
  2984:                 return_length=return_length,
  2989:             return self.encode_plus(
  2999:                 return_tensors=return_tensors,
  3000:                 return_token_type_ids=return_token_type_ids,
  3001:                 return_attention_mask=return_attention_mask,
  3002:                 return_overflowing_tokens=return_overflowing_tokens,
  3003:                 return_special_tokens_mask=return_special_tokens_mask,
  3004:                 return_offsets_mapping=return_offsets_mapping,
  3005:                 return_length=return_length,
  3022:         return_tensors: Optional[Union[str, TensorType]] = None,
  3023:         return_token_type_ids: Optional[bool] = None,
  3024:         return_attention_mask: Optional[bool] = None,
  3025:         return_overflowing_tokens: bool = False,
  3026:         return_special_tokens_mask: bool = False,
  3027:         return_offsets_mapping: bool = False,
  3028:         return_length: bool = False,
  3062:         return self._encode_plus(
  3072:             return_tensors=return_tensors,
  3073:             return_token_type_ids=return_token_type_ids,
  3074:             return_attention_mask=return_attention_mask,
  3075:             return_overflowing_tokens=return_overflowing_tokens,
  3076:             return_special_tokens_mask=return_special_tokens_mask,
  3077:             return_offsets_mapping=return_offsets_mapping,
  3078:             return_length=return_length,
  3094:         return_tensors: Optional[Union[str, TensorType]] = None,
  3095:         return_token_type_ids: Optional[bool] = None,
  3096:         return_attention_mask: Optional[bool] = None,
  3097:         return_overflowing_tokens: bool = False,
  3098:         return_special_tokens_mask: bool = False,
  3099:         return_offsets_mapping: bool = False,
  3100:         return_length: bool = False,
  3124:         return_tensors: Optional[Union[str, TensorType]] = None,
  3125:         return_token_type_ids: Optional[bool] = None,
  3126:         return_attention_mask: Optional[bool] = None,
  3127:         return_overflowing_tokens: bool = False,
  3128:         return_special_tokens_mask: bool = False,
  3129:         return_offsets_mapping: bool = False,
  3130:         return_length: bool = False,
  3160:         return self._batch_encode_plus(
  3169:             return_tensors=return_tensors,
  3170:             return_token_type_ids=return_token_type_ids,
  3171:             return_attention_mask=return_attention_mask,
  3172:             return_overflowing_tokens=return_overflowing_tokens,
  3173:             return_special_tokens_mask=return_special_tokens_mask,
  3174:             return_offsets_mapping=return_offsets_mapping,
  3175:             return_length=return_length,
  3197:         return_tensors: Optional[Union[str, TensorType]] = None,
  3198:         return_token_type_ids: Optional[bool] = None,
  3199:         return_attention_mask: Optional[bool] = None,
  3200:         return_overflowing_tokens: bool = False,
  3201:         return_special_tokens_mask: bool = False,
  3202:         return_offsets_mapping: bool = False,
  3203:         return_length: bool = False,
  3221:         return_attention_mask: Optional[bool] = None,
  3222:         return_tensors: Optional[Union[str, TensorType]] = None,
  3238:         result will use the same type unless you provide a different tensor type with `return_tensors`. In the case of
  3251:                 the note above for the return type.
  3253:                  Select a strategy to pad the returned sequences (according to the model's padding side and padding
  3263:                 Maximum length of the returned list and optionally padding length (see above).
  3269:             return_attention_mask (`bool`, *optional*):
  3270:                 Whether to return the attention mask. If left to the default, will return the attention mask according
  3271:                 to the specific tokenizer's default, defined by the `return_outputs` attribute.
  3274:             return_tensors (`str` or [`~utils.TensorType`], *optional*):
  3275:                 If set, will return tensors instead of list of python integers. Acceptable values are:
  3277:                 - `'tf'`: Return TensorFlow `tf.constant` objects.
  3278:                 - `'pt'`: Return PyTorch `torch.Tensor` objects.
  3279:                 - `'np'`: Return Numpy `np.ndarray` objects.
  3307:             if return_attention_mask:
  3309:             return encoded_inputs
  3312:         # and rebuild them afterwards if no return_tensors is specified
  3325:                 return_tensors = "tf" if return_tensors is None else return_tensors
  3327:                 return_tensors = "pt" if return_tensors is None else return_tensors
  3329:                 return_tensors = "np" if return_tensors is None else return_tensors
  3351:                 return_attention_mask=return_attention_mask,
  3353:             return BatchEncoding(encoded_inputs, tensor_type=return_tensors)
  3372:                 return_attention_mask=return_attention_mask,
  3380:         return BatchEncoding(batch_outputs, tensor_type=return_tensors)
  3395:         Returns:
  3399:             return len(token_ids_0) * [0]
  3400:         return [0] * len(token_ids_0) + [1] * len(token_ids_1)
  3415:         Returns:
  3419:             return token_ids_0
  3420:         return token_ids_0 + token_ids_1
  3433:         return_tensors: Optional[Union[str, TensorType]] = None,
  3434:         return_token_type_ids: Optional[bool] = None,
  3435:         return_attention_mask: Optional[bool] = None,
  3436:         return_overflowing_tokens: bool = False,
  3437:         return_special_tokens_mask: bool = False,
  3438:         return_offsets_mapping: bool = False,
  3439:         return_length: bool = False,
  3448:         different than `None` and *truncation_strategy = longest_first* or `True`, it is not possible to return
  3474:         if return_token_type_ids and not add_special_tokens:
  3476:                 "Asking to return token_type_ids while setting add_special_tokens to False "
  3478:                 "set return_token_type_ids to None."
  3482:             return_overflowing_tokens
  3487:                 "Not possible to return overflowing tokens for pair of sequences with the "
  3493:         if return_token_type_ids is None:
  3494:             return_token_type_ids = "token_type_ids" in self.model_input_names
  3495:         if return_attention_mask is None:
  3496:             return_attention_mask = "attention_mask" in self.model_input_names
  3500:         # Compute the total size of the returned encodings
  3514:         if return_overflowing_tokens:
  3528:         if return_token_type_ids:
  3530:         if return_special_tokens_mask:
  3540:         if padding_strategy != PaddingStrategy.DO_NOT_PAD or return_attention_mask:
  3546:                 return_attention_mask=return_attention_mask,
  3549:         if return_length:
  3553:             encoded_inputs, tensor_type=return_tensors, prepend_batch_axis=prepend_batch_axis
  3556:         return batch_outputs
  3594:                 If set to a positive number, the overflowing tokens returned will contain some tokens from the main
  3595:                 sequence returned. The value of this argument defines the number of additional tokens.
  3597:         Returns:
  3599:             overflowing tokens. Note: The *longest_first* strategy returns empty list of overflowing tokens if a pair
  3603:             return ids, pair_ids, []
  3636:                 "Be aware, overflowing tokens are not returned for the setting you have chosen,"
  3638:                 "truncation strategy. So the returned list will always be empty even if some "
  3680:         return (ids, pair_ids, overflowing_tokens)
  3688:         return_attention_mask: Optional[bool] = None,
  3696:             max_length: maximum length of the returned list and optionally padding length (see below).
  3710:             return_attention_mask:
  3711:                 (optional) Set to False to avoid returning attention mask (default: set to model specifics)
  3714:         if return_attention_mask is None:
  3715:             return_attention_mask = "attention_mask" in self.model_input_names
  3728:         if return_attention_mask and "attention_mask" not in encoded_inputs:
  3735:                 if return_attention_mask:
  3745:                 if return_attention_mask:
  3757:         return encoded_inputs
  3767:         Returns:
  3793:         Returns:
  3796:         return [
  3830:         Returns:
  3836:         return self._decode(
  3867:         Returns:
  3873:             "Or set `return_special_tokens_mask=True` when calling the encoding method "
  3881:         return special_tokens_mask
  3891:         Returns:
  3906:         return out_string
  3990:         return_tensors: str = None,
  4019:             return_tensors (`str` or [`~utils.TensorType`], *optional*):
  4020:                 If set, will return tensors instead of list of python integers. Acceptable values are:
  4022:                 - `'tf'`: Return TensorFlow `tf.constant` objects.
  4023:                 - `'pt'`: Return PyTorch `torch.Tensor` objects.
  4024:                 - `'np'`: Return Numpy `np.ndarray` objects.
  4043:         Return:
  4050:             The full set of keys `[input_ids, attention_mask, labels]`, will only be returned if tgt_texts is passed.
  4081:             return_tensors=return_tensors,
  4088:             return model_inputs
  4096:                 return_tensors=return_tensors,
  4103:         return model_inputs
  4113:     Returns:
  4134:     return tokenizer_file

PythonVenv\Lib\site-packages\transformers\tokenization_utils_fast.py:
  203:         return True
  211:         return True
  218:         return self._tokenizer.get_vocab_size(with_added_tokens=False)
  221:         return self._tokenizer.get_vocab(with_added_tokens=True)
  225:         return self.get_vocab()
  230:         Returns the sorted mapping from string to index. The added tokens encoder is cached for performance
  233:         return {k.content: v for v, k in sorted(self.added_tokens_decoder.items(), key=lambda item: item[0])}
  238:         Returns the added tokens in the vocabulary as a dictionary of index to AddedToken.
  240:         Returns:
  243:         return self._tokenizer.get_added_tokens_decoder()
  247:         Returns the added tokens in the vocabulary as a dictionary of token to index.
  249:         Returns:
  252:         return {k.content: v for v, k in sorted(self.added_tokens_decoder.items(), key=lambda item: item[0])}
  258:         return self._tokenizer.get_vocab_size(with_added_tokens=True)
  265:         return self._tokenizer
  272:         return self._tokenizer.decoder
  277:         return_token_type_ids: Optional[bool] = None,
  278:         return_attention_mask: Optional[bool] = None,
  279:         return_overflowing_tokens: bool = False,
  280:         return_special_tokens_mask: bool = False,
  281:         return_offsets_mapping: bool = False,
  282:         return_length: bool = False,
  294:         if return_token_type_ids is None:
  295:             return_token_type_ids = "token_type_ids" in self.model_input_names
  296:         if return_attention_mask is None:
  297:             return_attention_mask = "attention_mask" in self.model_input_names
  299:         if return_overflowing_tokens and encoding.overflowing is not None:
  308:             if return_token_type_ids:
  310:             if return_attention_mask:
  312:             if return_special_tokens_mask:
  314:             if return_offsets_mapping:
  316:             if return_length:
  319:         return encoding_dict, encodings
  329:         Returns:
  333:             return None
  336:             return self._convert_token_to_id_with_added_voc(tokens)
  338:         return [self._convert_token_to_id_with_added_voc(token) for token in tokens]
  343:             return self.unk_token_id
  344:         return index
  347:         return self._tokenizer.id_to_token(int(index))
  351:             return self._tokenizer.add_special_tokens(new_tokens)
  353:         return self._tokenizer.add_tokens(new_tokens)
  357:         Returns the number of added tokens when encoding a sequence with special tokens.
  371:         Returns:
  374:         return self._tokenizer.num_special_tokens_to_add(pair)
  389:         Returns:
  393:             return self._tokenizer.id_to_token(ids)
  400:         return tokens
  403:         return self.encode_plus(text=text, text_pair=pair, add_special_tokens=add_special_tokens, **kwargs).tokens()
  488:         return_tensors: Optional[str] = None,
  489:         return_token_type_ids: Optional[bool] = None,
  490:         return_attention_mask: Optional[bool] = None,
  491:         return_overflowing_tokens: bool = False,
  492:         return_special_tokens_mask: bool = False,
  493:         return_offsets_mapping: bool = False,
  494:         return_length: bool = False,
  526:                 return_token_type_ids=return_token_type_ids,
  527:                 return_attention_mask=return_attention_mask,
  528:                 return_overflowing_tokens=return_overflowing_tokens,
  529:                 return_special_tokens_mask=return_special_tokens_mask,
  530:                 return_offsets_mapping=return_offsets_mapping,
  531:                 return_length=return_length,
  549:         # If returning overflowing tokens, we need to return a mapping
  551:         if return_overflowing_tokens:
  559:         return BatchEncoding(sanitized_tokens, sanitized_encodings, tensor_type=return_tensors)
  572:         return_tensors: Optional[bool] = None,
  573:         return_token_type_ids: Optional[bool] = None,
  574:         return_attention_mask: Optional[bool] = None,
  575:         return_overflowing_tokens: bool = False,
  576:         return_special_tokens_mask: bool = False,
  577:         return_offsets_mapping: bool = False,
  578:         return_length: bool = False,
  592:             return_tensors=return_tensors,
  593:             return_token_type_ids=return_token_type_ids,
  594:             return_attention_mask=return_attention_mask,
  595:             return_overflowing_tokens=return_overflowing_tokens,
  596:             return_special_tokens_mask=return_special_tokens_mask,
  597:             return_offsets_mapping=return_offsets_mapping,
  598:             return_length=return_length,
  603:         # Return tensor is None, then we can remove the leading batch axis
  604:         # Overflowing tokens are returned as a batch of output so we keep them in this case
  605:         if return_tensors is None and not return_overflowing_tokens:
  616:         return batched_output
  619:         return self.backend_tokenizer.decoder.decode(tokens)
  641:             return clean_text
  643:             return text
  692:         return file_names
  723:         Returns:
  853:         return self.__class__(tokenizer_object=tokenizer, **kwargs)

PythonVenv\Lib\site-packages\transformers\tokenization_utils.py:
    84:             return
   244:         return self.cut_text(text, offsets)
   268:         return tokens
   276:         return True
   279:         return True
   280:     return False
   288:         return False
   291:         return True
   292:     return False
   303:         return True
   306:         return True
   307:     return False
   313:     return bool(_is_control(last_char) | _is_punctuation(last_char) | _is_whitespace(last_char))
   319:     return bool(_is_control(first_char) | _is_punctuation(first_char) | _is_whitespace(first_char))
   330:         return
   376:         return False
   388:         Returns the sorted mapping from string to index. The added tokens encoder is cached for performance
   391:         return {k.content: v for v, k in sorted(self._added_tokens_decoder.items(), key=lambda item: item[0])}
   396:         Returns the added tokens in the vocabulary as a dictionary of index to AddedToken.
   398:         Returns:
   401:         return dict(sorted(self._added_tokens_decoder.items(), key=lambda item: item[0]))
   417:         Returns the added tokens in the vocabulary as a dictionary of token to index. Results might be different from
   421:         Returns:
   424:         return self._added_tokens_encoder
   431:         return len(set(self.get_vocab().keys()))
   448:         Returns:
   465:             return added_tokens
   508:         return added_tokens
   520:         Returns the number of added tokens when encoding a sequence with special tokens.
   534:         Returns:
   539:         return len(self.build_inputs_with_special_tokens(token_ids_0, token_ids_1 if pair else None))
   554:         Returns:
   619:         return tokenized_text
   638:         Returns:
   642:             return None
   645:             return self._convert_token_to_id_with_added_voc(tokens)
   650:         return ids
   654:             return None
   657:             return self._added_tokens_encoder[token]
   658:         return self._convert_token_to_id(token)
   674:         return_tensors: Optional[Union[str, TensorType]] = None,
   675:         return_token_type_ids: Optional[bool] = None,
   676:         return_attention_mask: Optional[bool] = None,
   677:         return_overflowing_tokens: bool = False,
   678:         return_special_tokens_mask: bool = False,
   679:         return_offsets_mapping: bool = False,
   680:         return_length: bool = False,
   687:                 return self.convert_tokens_to_ids(tokens)
   693:                     return self.convert_tokens_to_ids(tokens)
   695:                     return self.convert_tokens_to_ids(text)
   697:                 return text
   710:         if return_offsets_mapping:
   712:                 "return_offset_mapping is not available when using Python tokenizers. "
   722:         return self.prepare_for_model(
   731:             return_tensors=return_tensors,
   733:             return_attention_mask=return_attention_mask,
   734:             return_token_type_ids=return_token_type_ids,
   735:             return_overflowing_tokens=return_overflowing_tokens,
   736:             return_special_tokens_mask=return_special_tokens_mask,
   737:             return_length=return_length,
   758:         return_tensors: Optional[Union[str, TensorType]] = None,
   759:         return_token_type_ids: Optional[bool] = None,
   760:         return_attention_mask: Optional[bool] = None,
   761:         return_overflowing_tokens: bool = False,
   762:         return_special_tokens_mask: bool = False,
   763:         return_offsets_mapping: bool = False,
   764:         return_length: bool = False,
   771:                 return self.convert_tokens_to_ids(tokens)
   777:                     return self.convert_tokens_to_ids(tokens)
   779:                     return self.convert_tokens_to_ids(text)
   781:                 return text
   787:         if return_offsets_mapping:
   789:                 "return_offset_mapping is not available when using Python tokenizers. "
   815:             return_attention_mask=return_attention_mask,
   816:             return_token_type_ids=return_token_type_ids,
   817:             return_overflowing_tokens=return_overflowing_tokens,
   818:             return_special_tokens_mask=return_special_tokens_mask,
   819:             return_length=return_length,
   820:             return_tensors=return_tensors,
   824:         return BatchEncoding(batch_outputs)
   836:         return_tensors: Optional[str] = None,
   837:         return_token_type_ids: Optional[bool] = None,
   838:         return_attention_mask: Optional[bool] = None,
   839:         return_overflowing_tokens: bool = False,
   840:         return_special_tokens_mask: bool = False,
   841:         return_length: bool = False,
   864:                 return_attention_mask=False,  # we pad in batch afterward
   865:                 return_token_type_ids=return_token_type_ids,
   866:                 return_overflowing_tokens=return_overflowing_tokens,
   867:                 return_special_tokens_mask=return_special_tokens_mask,
   868:                 return_length=return_length,
   869:                 return_tensors=None,  # We convert the whole batch to tensors at the end
   884:             return_attention_mask=return_attention_mask,
   887:         batch_outputs = BatchEncoding(batch_outputs, tensor_type=return_tensors)
   889:         return batch_outputs
   897:         This method should pop the arguments from kwargs and return the remaining `kwargs` as well. We test the
   910:         Returns:
   913:         return (text, kwargs)
   930:         Returns:
   940:             return super().get_special_tokens_mask(
   943:         return [0] * ((len(token_ids_1) if token_ids_1 else 0) + len(token_ids_0))
   966:         Returns:
   971:                 return self._added_tokens_decoder[ids].content
   973:                 return self._convert_id_to_token(ids)
   983:         return tokens
   989:         return " ".join(tokens)
  1038:             return clean_text
  1040:             return text

PythonVenv\Lib\site-packages\transformers\trainer_callback.py:
  150:         return cls(**json.loads(text))
  175:             return {
  194:         return instance
  247:         return {
  271:             The object that is returned to the [`Trainer`] and can be used to make some decisions.
  294:     should return the modified version.
  429:                     return cb
  434:                     return cb
  441:                     return
  447:         return "\n".join(cb.__class__.__name__ for cb in self.callbacks)
  450:         return self.call_event("on_init_end", args, state, control)
  454:         return self.call_event("on_train_begin", args, state, control)
  457:         return self.call_event("on_train_end", args, state, control)
  461:         return self.call_event("on_epoch_begin", args, state, control)
  464:         return self.call_event("on_epoch_end", args, state, control)
  470:         return self.call_event("on_step_begin", args, state, control)
  473:         return self.call_event("on_substep_end", args, state, control)
  476:         return self.call_event("on_step_end", args, state, control)
  480:         return self.call_event("on_evaluate", args, state, control, metrics=metrics)
  483:         return self.call_event("on_predict", args, state, control, metrics=metrics)
  487:         return self.call_event("on_save", args, state, control)
  491:         return self.call_event("on_log", args, state, control, logs=logs)
  494:         return self.call_event("on_prediction_step", args, state, control)
  510:             # A Callback can skip the return of `control` if it doesn't change it.
  513:         return control
  548:         return control
  563:         return control
  686:             return
  693:         return {

PythonVenv\Lib\site-packages\transformers\trainer_pt_utils.py:
    77:         return get_dataloader_sampler(dataloader.batch_sampler)
    79:         return dataloader.sampler
    90:     return tensor_or_array
    99:         return torch.cat((tensor1, tensor2), dim=0)
   108:     return result
   117:         return np.concatenate((array1, array2), axis=0)
   126:     return result
   138:         return type(tensors)(nested_concat(t, n, padding_index=padding_index) for t, n in zip(tensors, new_tensors))
   140:         return torch_pad_and_concatenate(tensors, new_tensors, padding_index=padding_index)
   142:         return type(tensors)(
   146:         return numpy_pad_and_concatenate(tensors, new_tensors, padding_index=padding_index)
   159:                 return result
   164:                 return result
   166:         return tensors.shape[0] if len(tensors.shape) >= 1 else None
   168:         return tensors.shape[0] if len(tensors.shape) >= 1 else None
   174:         return type(tensors)(nested_numpify(t) for t in tensors)
   176:         return type(tensors)({k: nested_numpify(t) for k, t in tensors.items()})
   184:     return t.numpy()
   190:         return type(tensors)(nested_detach(t) for t in tensors)
   192:         return type(tensors)({k: nested_detach(t) for k, t in tensors.items()})
   193:     return tensors.detach()
   201:             return type(tensors)(nested_xla_mesh_reduce(t, f"{name}_{i}") for i, t in enumerate(tensors))
   203:             return type(tensors)(
   208:         return xm.mesh_reduce(name, tensors, torch.cat)
   216:             return type(tensor)(distributed_concat(t, num_total_examples) for t in tensor)
   218:             return type(tensor)({k: distributed_concat(t, num_total_examples) for k, t in tensor.items()})
   227:         return concat
   246:         return concat
   299:         return iter(indices)
   333:         # Check if we have something to add, if not just return
   335:             return
   349:         """Returns the numpified and moved to CPU stored objects."""
   351:         return self.arrays
   404:         return iter(indices)
   407:         return self.num_samples
   412:         return RandomSampler(dataset)
   413:     return DistributedSampler(dataset, num_replicas=xm.xrt_world_size(), rank=xm.get_ordinal())
   419:         return type(arrays)(nested_new_like(x, num_samples) for x in arrays)
   420:     return np.full_like(arrays, padding_index, shape=(num_samples, *arrays.shape[1:]))
   427:     return result
   433:         return type(tensors)(nested_truncate(t, limit) for t in tensors)
   435:         return type(tensors)({k: nested_truncate(t, limit) for k, t in tensors.items()})
   437:     return tensors[:limit]
   506:             return
   518:             return result[0][0], type(arrays)(r[1] for r in result)
   534:         return slice_len, storage
   538:         Return the properly gathered arrays and truncate to the number of samples (since the sampler added some extras
   542:             return
   545:         return nested_truncate(self._storage, self.num_samples)
   588:         return (1 - self.epsilon) * nll_loss + self.epsilon * smoothed_loss
   593:     Return a list of indices so that each slice of `batch_size` consecutive indices correspond to elements of similar
   623:     return [i for megabatch in megabatches for i in megabatch]
   665:         return len(self.lengths)
   669:         return iter(indices)
   757:         return iter(indices)
   800:         return iter(result)
   804:         return self.total_num_samples // self.num_processes
   907:             return (len(self.dataset) // (self.batch_size * self.num_processes)) * self.batch_size
   909:             return math.ceil(len(self.dataset) / (self.batch_size * self.num_processes)) * self.batch_size
   925:                 logger.warning("tried to get lr value before scheduler/optimizer started stepping, returning lr=0")
   936:     return last_lr
   945:     return f"{datetime.timedelta(seconds=int(secs))}.{msec:02d}"
   954:             The metrics returned from train/evaluate/predict
   956:     Returns:
   971:     return metrics_copy
   984:             The metrics returned from train/evaluate/predictmetrics: metrics dict
  1054:         return
  1074:             The metrics returned from train/evaluate/predict
  1083:         return
  1109:         return
  1122:             return p.ds_numel if hasattr(p, "ds_numel") else p.numel()
  1127:             return p.numel()
  1129:     return sum(numel(p) for p in model.parameters() if not trainable_only or p.requires_grad)
  1134:     Returns the names of the model parameters that are not inside a forbidden layer.
  1145:     return result
  1158:         return module.__class__
  1160:         return
  1165:                 return module_class
  1185:         return loss
  1189:         return model(**inputs)
  1193:             return type(tensor)(smp_gather(t) for t in tensor)
  1195:             return type(tensor)({k: smp_gather(v) for k, v in tensor.items()})
  1202:         return torch.cat([t.cpu() for t in all_tensors], dim=0)
  1206:             return type(tensor)(smp_nested_concat(t) for t in tensor)
  1208:             return type(tensor)({k: smp_nested_concat(v) for k, v in tensor.items()})
  1211:         return tensor.concat().detach().cpu()
  1329:         return cls(**config_dict)
  1332:         return copy.deepcopy(self.__dict__)
  1340:     args and kwargs and return a no-op during training.
  1363:     args and kwargs and return a no-op during training.
  1373:         return [group["lr"] for group in self.optimizer.param_groups]
  1376:         return self.base_lrs

PythonVenv\Lib\site-packages\transformers\trainer_seq2seq.py:
   86:         Returns:
  124:         return gen_config
  134:         Run evaluation and returns metrics.
  160:         Returns:
  180:         return super().evaluate(eval_dataset, ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix)
  190:         Run prediction and returns predictions and potential metrics.
  193:         will also return metrics, like in `evaluate()`.
  221:         Returns: *NamedTuple* A namedtuple with the following keys:
  244:         return super().predict(test_dataset, ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix)
  268:                 Whether or not to return the loss only.
  272:         Return:
  278:             return super().prediction_step(
  338:             return loss, None, None
  349:         return loss, generated_tokens, labels
  367:         return padded_tensor

PythonVenv\Lib\site-packages\transformers\trainer_utils.py:
  141:     return output
  166:             return iter((self.predictions, self.label_ids, self.inputs))
  168:             return iter((self.predictions, self.label_ids))
  176:             return self.predictions
  178:             return self.label_ids
  180:             return self.inputs
  214:         return
  215:     return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
  265:         metrics (`Dict[str, float]`): The metrics returned by the evaluate method.
  267:     Return:
  281:     return loss if len(metrics) == 0 else sum(metrics.values())
  288:     return {
  302:     return {
  311:     return [
  329:     return {
  356:         return xm.get_ordinal() == 0
  357:     return local_rank in [-1, 0]
  362:     Return the number of processes launched in parallel. Works with `torch.distributed` and TPUs.
  367:         return xm.xrt_world_size()
  371:         return torch.distributed.get_world_size()
  372:     return 1
  377:     Measure and return speed performance metrics.
  392:         return result
  402:     return result
  458:             return
  495:             return self.stages[caller]
  503:         return self.process.memory_info().rss
  520:             return
  525:             return
  573:             return
  645:             return
  649:             return
  651:         # since we don't have a way to return init metrics, we push them into the first of train/val/predict
  686:             return
  701:         return len(dataset) is not None
  704:         return False
  712:         return type(metrics)(denumpify_detensorize(m) for m in metrics)
  714:         return type(metrics)({k: denumpify_detensorize(v) for k, v in metrics.items()})
  716:         return metrics.item()
  718:         return metrics.item()
  719:     return metrics
  724:     Return the number of arguments of the passed function, even if it's a partial function.
  728:         return total_args - len(func.args) - len(func.keywords)
  729:     return len(inspect.signature(func).parameters)
  748:         return functools.partial(
  758:         return accelerate_find_executable_batch_size(function=function, starting_batch_size=starting_batch_size)
  760:     return functools.partial(function, batch_size=starting_batch_size)
  793:             return feature
  805:         return {k: v for k, v in feature.items() if k in self.signature_columns}
  809:         return self.data_collator(features)
  812: def check_target_module_exists(optim_target_modules, key: str, return_is_regex: bool = False):
  820:         return_is_regex (`bool`):
  821:             If set to `True`, the method will return whether the passed `optim_target_modules`
  824:     Returns:
  845:     if return_is_regex:
  846:         return target_module_found, is_regex
  848:     return target_module_found

PythonVenv\Lib\site-packages\transformers\trainer.py:
   147:     can_return_loss,
   250:         return isinstance(model, classes_to_check)
   251:     return False
   257:         return {"adapter_only": True}
   259:         return {}
   329:             The function that will be used to compute metrics at evaluation. Must take a [`EvalPrediction`] and return
   332:             after the last eval batch to signal that the function needs to calculate and return the global summary
   344:             tensors, the logits and the labels, and return the logits once processed as desired. The modifications made
   361:           `TrainingArguments.place_model_on_device` is overridden to return `False` .
   393:                     " summary statistics should be returned by the function."
   672:         # returned to 0 every time flos need to be logged
   677:         self.can_return_loss = can_return_loss(self.model.__class__)
   717:         return model
   749:         Remove a callback from the current list of [`~transformers.TrainerCallback`] and returns it.
   751:         If the callback is not found, returns `None` (and no error is raised).
   758:         Returns:
   761:         return self.callback_handler.pop_callback(callback)
   797:             return dataset
   817:             return dataset
   819:             return dataset.remove_columns(ignored_columns)
   826:             return data_collator
   837:         return remove_columns_collator
   841:             return None
   854:             return LengthGroupedSampler(
   862:             return RandomSampler(self.train_dataset)
   866:         Returns the training [`~torch.utils.data.DataLoader`].
   897:         return self.accelerator.prepare(DataLoader(train_dataset, **dataloader_params))
   903:                 return SequentialDistributedSampler(
   907:                 return SequentialDistributedSampler(
   914:                 return SequentialSampler(eval_dataset)
   917:             return SequentialSampler(eval_dataset)
   919:             return None
   923:         Returns the evaluation [`~torch.utils.data.DataLoader`].
   938:             return self.accelerator.prepare(self._eval_dataloader)
   966:         return self.accelerator.prepare(eval_dataloader)
   970:         Returns the test [`~torch.utils.data.DataLoader`].
  1000:         return self.accelerator.prepare(DataLoader(test_dataset, **dataloader_params))
  1027:         return decay_parameters
  1085:         return self.optimizer
  1091:         return sum(p.numel() for p in self.model.parameters() if p.requires_grad)
  1095:         Returns the learning rate of each parameter from self.optimizer.
  1099:         return [group["lr"] for group in self.optimizer.param_groups]
  1103:         Returns optimizer group for a parameter if given, else returns all optimizer groups for params.
  1107:                 The parameter for which optimizer group needs to be returned.
  1114:                     return group
  1115:         return [group["params"] for group in self.optimizer.param_groups]
  1122:         Returns the optimizer class and optimizer parameters based on the training arguments.
  1314:                     args.optim_target_modules, module_name, return_is_regex=True
  1387:         return optimizer_cls, optimizer_kwargs
  1406:         return self.lr_scheduler
  1417:                 return len(dataloader.dataset.dataset)
  1418:             return len(dataloader.dataset)
  1420:             return len(dataloader) * self.args.per_device_train_batch_size
  1431:                     return tokens * max_steps
  1433:             return train_tokens
  1436:             return train_tokens
  1443:             return
  1489:             return
  1531:             raise RuntimeError("model_init should not return None.")
  1533:         return model
  1539:                 return model
  1575:         return model
  1598:         return model
  1636:                 return self.model_wrapped
  1637:             return smp.DistributedModel(model, backward_passes_per_step=self.args.gradient_accumulation_steps)
  1641:             return model
  1659:             return model
  1714:                     return target_cls(checkpoint_module(m), *args, **kwargs)
  1754:                 return loss
  1763:                 return model
  1782:         return model
  1876:                 return inner_training_loop(
  1885:             return inner_training_loop(
  2272:                             # In some cases the grad norm may not return a float
  2383:         return TrainOutput(self.state.global_step, train_loss, metrics)
  2403:         return run_dir
  2637:                             # Load_adapter has no return value present, modify it when appropriate.
  2738:             return
  2748:                 return
  2756:                 return
  2943:             return
  2951:             return
  3026:             return
  3074:         by `compute_objective`, which defaults to a function returning the evaluation loss when no metric is provided,
  3092:                 A function computing the objective to minimize or maximize from the metrics returned by the `evaluate`
  3116:         Returns:
  3139:         return best_run
  3165:             return type(data)({k: self._prepare_input(v) for k, v in data.items()})
  3167:             return type(data)(self._prepare_input(v) for v in data)
  3175:             return data.to(**kwargs)
  3176:         return data
  3192:         return inputs
  3198:         return self.autocast_smart_context_manager()
  3210:         return ctx_manager
  3227:         Return:
  3235:             return loss_mb.reduce_mean().detach().to(self.args.device)
  3252:         return loss.detach() / self.args.gradient_accumulation_steps
  3254:     def compute_loss(self, model, inputs, return_outputs=False):
  3256:         How the loss is computed by Trainer. By default, all models return the loss in the first element.
  3283:                     "The model did not return a loss from the inputs, only the following keys: "
  3286:             # We don't use .loss here since the model may return tuples instead of ModelOutput.
  3289:         return (loss, outputs) if return_outputs else loss
  3296:         return self.args.local_process_index == 0
  3306:             return smp.rank() == 0
  3308:             return self.args.process_index == 0
  3478:         return checkpoints_sorted
  3482:             return
  3487:             return
  3512:         Run evaluation and returns metrics.
  3545:         Returns:
  3560:             return metrics
  3604:         return output.metrics
  3610:         Run prediction and returns predictions and potential metrics.
  3613:         will also return metrics, like in `evaluate()`.
  3634:         Returns: *NamedTuple* A namedtuple with the following keys:
  3666:         return PredictionOutput(predictions=output.predictions, label_ids=output.label_ids, metrics=output.metrics)
  3873:         return EvalLoopOutput(predictions=all_preds, label_ids=all_labels, metrics=metrics, num_samples=num_samples)
  3881:             return
  3892:         return tensors
  3915:                 Whether or not to return the loss only.
  3920:         Return:
  3925:         # For CLIP-like models capable of returning loss values.
  3926:         # If `return_loss` is not specified or being `None` in `inputs`, we check if the default value of `return_loss`
  3928:         return_loss = inputs.get("return_loss", None)
  3929:         if return_loss is None:
  3930:             return_loss = self.can_return_loss
  3931:         loss_without_labels = True if len(self.label_names) == 0 and return_loss else False
  3971:                         loss, outputs = self.compute_loss(model, inputs, return_outputs=True)
  3991:             return (loss, None, None)
  3997:         return (loss, logits, labels)
  4009:         Returns:
  4013:             return self.model.floating_point_ops(inputs)
  4015:             return 0
  4023:             return
  4073:             return
  4112:             return
  4115:             return
  4168:             return
  4187:                 Whether the function should return only when the `git push` has finished.
  4193:         Returns:
  4215:             return
  4236:         return upload_folder(
  4424:         return EvalLoopOutput(predictions=preds, label_ids=label_ids, metrics=metrics, num_samples=num_examples)
  4432:             return
  4440:         return nested_numpify(tensors)
  4446:             return

PythonVenv\Lib\site-packages\transformers\training_args_seq2seq.py:
  96:         return d

PythonVenv\Lib\site-packages\transformers\training_args_tf.py:
  238:         return strategy
  246:         return self._setup_strategy
  254:         return self._setup_strategy.num_replicas_in_sync
  261:         return False  # TF Logging is handled by Keras not the Trainer
  274:         return per_device_batch_size * self.n_replicas
  287:         return per_device_batch_size * self.n_replicas
  299:         return self._setup_strategy.num_replicas_in_sync

PythonVenv\Lib\site-packages\transformers\training_args.py:
   118:     return os.path.join("runs", current_time + "_" + socket.gethostname())
   122:     """Returns the first positive env value found in the `env_keys` list or the default."""
   126:             return val
   127:     return default
   132:     Returns the xla device type (CPU|GPU|TPU) or None if the device is a non-xla device.
   136:             return "CPU"
   137:         return xm.xla_real_devices([device])[0].split(":")[0]
   138:     return None
   204:     return passed_value
   245:             When performing evaluation and generating predictions, only returns the loss.
   453:             models. Must be the name of a metric returned by the evaluation with or without the prefix `"eval_"`. Will
   790:         metadata={"help": "When performing evaluation and predictions, only returns the loss."},
  2010:         return f"{self.__class__.__name__}(\n{''.join(attrs_as_str)})"
  2026:         return train_batch_size
  2040:         return eval_batch_size
  2047:         return timedelta(seconds=self.ddp_timeout)
  2141:         return device
  2149:         return self._setup_devices
  2164:         return self._n_gpu
  2179:             return ParallelMode.TPU
  2181:             return ParallelMode.SAGEMAKER_MODEL_PARALLEL
  2183:             return ParallelMode.SAGEMAKER_DATA_PARALLEL
  2187:             return ParallelMode.DISTRIBUTED
  2189:             return ParallelMode.NOT_DISTRIBUTED
  2191:             return ParallelMode.NOT_PARALLEL
  2200:             return self.distributed_state.num_processes
  2202:             return smp.dp_size() if not smp.state.cfg.prescaled_batch else smp.rdp_size()
  2203:         return 1
  2212:             return self.distributed_state.process_index
  2214:             return smp.dp_rank() if not smp.state.cfg.prescaled_batch else smp.rdp_rank()
  2215:         return 0
  2225:             return self.distributed_state.local_process_index
  2227:             return smp.local_rank()
  2228:         return 0
  2236:             return self.local_process_index == 0
  2239:                 return smp.rank() == 0
  2241:                 return self.process_index == 0
  2249:             return self.local_process_index == 0
  2252:                 return smp.rank() == 0
  2254:                 return self.process_index == 0
  2258:         Returns the log level to be used depending on whether this process is the main process of node 0, main process
  2267:         The choice between the main and replica process settings is made according to the return value of `should_log`.
  2276:         return log_level_main_node if self.should_log else log_level_replica_node
  2283:         return not is_sagemaker_mp_enabled()
  2290:         return not (
  2352:         return warmup_steps
  2372:         return d
  2378:         return json.dumps(self.to_dict(), indent=2)
  2391:         return {k: v if type(v) in valid_types else str(v) for k, v in d.items()}
  2467:         return self
  2528:         return self
  2568:         return self
  2617:         return self
  2692:         return self
  2762:         return self
  2813:         return self
  2858:         return self
  2926:         return self

PythonVenv\Lib\site-packages\transformers\benchmark\benchmark_args_utils.py:
   31:     return field(default_factory=lambda: default, metadata=metadata)
  147:         return json.dumps(dataclasses.asdict(self), indent=2)
  156:         return self.models
  161:             return False
  164:             return False
  166:             return True

PythonVenv\Lib\site-packages\transformers\benchmark\benchmark_args.py:
  100:         return device, n_gpu
  104:         return is_torch_xla_available() and self.tpu
  110:         return torch.cuda.current_device()
  115:         return self._setup_devices[0]
  120:         return self._setup_devices[1]
  124:         return self.n_gpu > 0

PythonVenv\Lib\site-packages\transformers\models\albert\tokenization_albert_fast.py:
  136:         return os.path.isfile(self.vocab_file) if self.vocab_file else False
  154:         Returns:
  160:             return cls + token_ids_0 + sep
  161:         return cls + token_ids_0 + sep + token_ids_1 + sep
  175:         if token_ids_1 is None, only returns the first portion of the mask (0s).
  183:         Returns:
  190:             return len(cls + token_ids_0 + sep) * [0]
  191:         return len(cls + token_ids_0 + sep) * [0] + len(token_ids_1 + sep) * [1]
  202:             return
  210:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\auto\image_processing_auto.py:
  143:                 return getattr(module, class_name)
  149:             return extractor
  152:     # init and we return the proper dummy to get an appropriate error message.
  155:         return getattr(main_module, class_name)
  157:     return None
  211:     Returns:
  254:         return {}
  257:         return json.load(reader)
  316:             return_unused_kwargs (`bool`, *optional*, defaults to `False`):
  317:                 If `False`, then this function returns just the final image processor object. If `True`, then this
  318:                 functions returns a `Tuple(image_processor, unused_kwargs)` where *unused_kwargs* is a dictionary
  328:                 controlled by the `return_unused_kwargs` keyword parameter.
  404:             return image_processor_class.from_dict(config_dict, **kwargs)
  406:             return image_processor_class.from_dict(config_dict, **kwargs)
  410:             return image_processor_class.from_dict(config_dict, **kwargs)

PythonVenv\Lib\site-packages\transformers\models\pvt\configuration_pvt.py:
  147:         return OrderedDict(
  155:         return 1e-4
  159:         return 12

PythonVenv\Lib\site-packages\transformers\models\pvt\convert_pvt_to_pytorch.py:
  117:     return rename_keys
  147:     return im
  182:     encoding = image_processor(images=prepare_img(), return_tensors="pt")

PythonVenv\Lib\site-packages\transformers\models\pvt\image_processing_pvt.py:
  109:             "return_tensors",
  147:         Returns:
  154:         return resize(
  174:         return_tensors: Optional[Union[str, TensorType]] = None,
  204:             return_tensors (`str` or `TensorType`, *optional*):
  205:                 The type of tensors to return. Can be one of:
  206:                 - Unset: Return a list of `np.ndarray`.
  207:                 - `TensorType.TENSORFLOW` or `'tf'`: Return a batch of type `tf.Tensor`.
  208:                 - `TensorType.PYTORCH` or `'pt'`: Return a batch of type `torch.Tensor`.
  209:                 - `TensorType.NUMPY` or `'np'`: Return a batch of type `np.ndarray`.
  210:                 - `TensorType.JAX` or `'jax'`: Return a batch of type `jax.numpy.ndarray`.
  290:         return BatchFeature(data=data, tensor_type=return_tensors)

PythonVenv\Lib\site-packages\transformers\models\pvt\modeling_pvt.py:
   65:         return input
   71:     return output
   83:         return drop_path(hidden_states, self.drop_prob, self.training)
   86:         return "p={}".format(self.drop_prob)
  127:             return self.position_embeddings
  131:         return interpolated_embeddings
  152:         return embeddings, height, width
  164:         return hidden_states
  202:         return hidden_states.permute(0, 2, 1, 3)
  246:         return outputs
  265:             return
  288:         return outputs
  315:         return hidden_states
  361:         return outputs
  420:         return_dict: Optional[bool] = True,
  444:         if not return_dict:
  445:             return tuple(v for v in [hidden_states, all_hidden_states, all_self_attentions] if v is not None)
  446:         return BaseModelOutput(
  506:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  509:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  511:         return_dict (`bool`, *optional*):
  512:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  552:         return_dict: Optional[bool] = None,
  558:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  564:             return_dict=return_dict,
  568:         if not return_dict:
  569:             return (sequence_output,) + encoder_outputs[1:]
  571:         return BaseModelOutput(
  613:         return_dict: Optional[bool] = None,
  621:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  627:             return_dict=return_dict,
  657:         if not return_dict:
  659:             return ((loss,) + output) if loss is not None else output
  661:         return ImageClassifierOutput(

PythonVenv\Lib\site-packages\transformers\models\pvt_v2\convert_pvt_v2_to_pytorch.py:
  146:     return rename_keys
  180:     return im
  226:         encoding = image_processor(images=prepare_img(), return_tensors="pt")

PythonVenv\Lib\site-packages\transformers\models\pvt_v2\modeling_pvt_v2.py:
   36:     replace_return_docstrings,
   65:         return input
   71:     return output
   83:         return drop_path(hidden_states, self.drop_prob, self.training)
   86:         return "p={}".format(self.drop_prob)
  114:         return embeddings, height, width
  134:         return hidden_states
  178:         return hidden_states.permute(0, 2, 1, 3)
  223:         return outputs
  227:             return
  272:         return hidden_states
  314:         return outputs
  359:         return outputs, height, width
  376:         return_dict: Optional[bool] = True,
  396:         if not return_dict:
  397:             return tuple(v for v in [hidden_states, all_hidden_states, all_self_attentions] if v is not None)
  398:         return BaseModelOutput(
  452:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  455:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  457:         return_dict (`bool`, *optional*):
  458:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  498:         return_dict: Optional[bool] = None,
  504:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  510:             return_dict=return_dict,
  514:         if not return_dict:
  515:             return (sequence_output,) + encoder_outputs[1:]
  517:         return BaseModelOutput(
  559:         return_dict: Optional[bool] = None,
  567:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  573:             return_dict=return_dict,
  612:         if not return_dict:
  614:             return ((loss,) + output) if loss is not None else output
  616:         return ImageClassifierOutput(
  637:     @replace_return_docstrings(output_type=BackboneOutput, config_class=_CONFIG_FOR_DOC)
  643:         return_dict: Optional[bool] = None,
  646:         Returns:
  664:         >>> inputs = processor(image, return_tensors="pt")
  671:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  680:             return_dict=return_dict,
  690:         if not return_dict:
  694:             return output
  696:         return BackboneOutput(

PythonVenv\Lib\site-packages\transformers\models\qwen2\modeling_qwen2.py:
    42:     replace_return_docstrings,
    67:     return (
    89:         return self.weight * hidden_states.to(input_dtype)
   123:         return (
   134:     return torch.cat((-x2, x1), dim=-1)
   156:     Returns:
   163:     return q_embed, k_embed
   179:         return self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
   190:         return hidden_states
   192:     return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)
   312:         return attn_output, attn_weights, past_key_value
   459:         return attn_output, attn_weights, past_key_value
   563:         return attn_output
   599:         return (
   633:             return super().forward(
   694:         return attn_output, None, past_key_value
   735:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
   736:                 returned tensors for more detail.
   738:                 If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding
   772:         return outputs
   856:             returned by the model at a previous stage of decoding, when `use_cache=True` or `config.use_cache=True`.
   865:             legacy cache format will be returned.
   875:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   878:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   881:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   883:         return_dict (`bool`, *optional*):
   884:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   917:         return self.embed_tokens
   933:         return_dict: Optional[bool] = None,
   941:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1061:         if not return_dict:
  1062:             return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)
  1063:         return BaseModelOutputWithPast(
  1084:         return self.model.embed_tokens
  1090:         return self.lm_head
  1099:         return self.model
  1102:     @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)
  1114:         return_dict: Optional[bool] = None,
  1123:         Returns:
  1134:         >>> inputs = tokenizer(prompt, return_tensors="pt")
  1146:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1158:             return_dict=return_dict,
  1178:         if not return_dict:
  1180:             return (loss,) + output if loss is not None else output
  1182:         return CausalLMOutputWithPast(
  1245:         return model_inputs
  1254:         return reordered_past
  1283:         return self.model.embed_tokens
  1300:         return_dict: Optional[bool] = None,
  1308:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1319:             return_dict=return_dict,
  1367:         if not return_dict:
  1369:             return ((loss,) + output) if loss is not None else output
  1371:         return SequenceClassifierOutputWithPast(

PythonVenv\Lib\site-packages\transformers\models\qwen2\tokenization_qwen2_fast.py:
  134:         return tuple(files)

PythonVenv\Lib\site-packages\transformers\models\qwen2\tokenization_qwen2.py:
   46:     Returns list of utf-8 byte and a mapping to unicode strings. We specifically avoids mapping to whitespace/control
   65:     return dict(zip(bs, cs))
   71:     Return set of symbol pairs in a word.
   80:     return pairs
  212:         return len(self.encoder)
  216:         return dict(self.encoder, **self.added_tokens_encoder)
  221:             return self.cache[token]
  226:             return token
  259:         return word
  270:         return bpe_tokens
  275:         return self.encoder.get(token, self.encoder.get(self.unk_token))
  280:         return self.decoder.get(index)
  287:         return text
  299:         return super().decode(
  311:             return
  335:         return vocab_file, merge_file
  339:         return (text, kwargs)

PythonVenv\Lib\site-packages\transformers\models\qwen2_moe\configuration_qwen2_moe.py:
  63:             Whether or not the model should return the last key/values attentions (not used by all models). Only
  90:             Whether or not the router logits should be returned by the model. Enabeling this will also

PythonVenv\Lib\site-packages\transformers\models\qwen2_moe\modeling_qwen2_moe.py:
    43:     replace_return_docstrings,
    81:     Returns:
    85:         return 0
   134:     return overall_loss * num_experts
   143:     return (
   165:         return self.weight * hidden_states.to(input_dtype)
   199:         return (
   210:     return torch.cat((-x2, x1), dim=-1)
   232:     Returns:
   239:     return q_embed, k_embed
   255:         return self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
   266:         return hidden_states
   268:     return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)
   389:         return attn_output, attn_weights, past_key_value
   537:         return attn_output, attn_weights, past_key_value
   641:         return attn_output
   677:         return (
   711:             return super().forward(
   772:         return attn_output, None, past_key_value
   841:         return final_hidden_states, router_logits
   877:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
   878:                 returned tensors for more detail.
   880:                 Whether or not to return the logits of all the routers. They are useful for computing the router loss,
   881:                 and should not be returned during inference.
   883:                 If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding
   926:         return outputs
  1010:             returned by the model at a previous stage of decoding, when `use_cache=True` or `config.use_cache=True`.
  1019:             legacy cache format will be returned.
  1029:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
  1032:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  1035:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  1038:             Whether or not to return the logits of all the routers. They are useful for computing the router loss, and
  1039:             should not be returned during inference.
  1040:         return_dict (`bool`, *optional*):
  1041:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  1074:         return self.embed_tokens
  1091:         return_dict: Optional[bool] = None,
  1102:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1228:         if not return_dict:
  1229:             return tuple(
  1234:         return MoeModelOutputWithPast(
  1259:         return self.model.embed_tokens
  1265:         return self.lm_head
  1274:         return self.model
  1277:     @replace_return_docstrings(output_type=MoeCausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)
  1290:         return_dict: Optional[bool] = None,
  1299:         Returns:
  1310:         >>> inputs = tokenizer(prompt, return_tensors="pt")
  1325:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1338:             return_dict=return_dict,
  1361:                 outputs.router_logits if return_dict else outputs[-1],
  1369:         if not return_dict:
  1373:             return (loss,) + output if loss is not None else output
  1375:         return MoeCausalLMOutputWithPast(
  1440:         return model_inputs
  1449:         return reordered_past
  1479:         return self.model.embed_tokens
  1496:         return_dict: Optional[bool] = None,
  1504:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1515:             return_dict=return_dict,
  1563:         if not return_dict:
  1565:             return ((loss,) + output) if loss is not None else output
  1567:         return SequenceClassifierOutputWithPast(

PythonVenv\Lib\site-packages\transformers\models\rembert\configuration_rembert.py:
   77:             Whether or not the model should return the last key/values attentions (not used by all models). Only
  148:         return OrderedDict(
  158:         return 1e-4

PythonVenv\Lib\site-packages\transformers\models\sew_d\modeling_sew_d.py:
   111:         return num_masked_span
   127:         return spec_aug_mask
   176:     return spec_aug_mask
   192:     return bucket_pos
   211:     Return:
   223:     return rel_pos_ids
   229:     return c2p_pos.expand([query_layer.size(0), query_layer.size(1), query_layer.size(2), relative_pos.size(-1)])
   235:     return c2p_pos.expand([query_layer.size(0), query_layer.size(1), key_layer.size(-2), key_layer.size(-2)])
   241:     return pos_index.expand(p2c_att.size()[:2] + (pos_index.size(-2), key_layer.size(-2)))
   261:     return mask, dropout
   283:         return hidden_states
   311:         return hidden_states
   336:         return hidden_states
   370:         return hidden_states
   382:         return hidden_states
   405:         return hidden_states
   450:         return hidden_states
   480:         return pooled_output
   484:         return self.config.hidden_size
   525:         return output
   531:         return inputGrad, None, None
   548:         return masked_fill(g, output, r_mask, g.op("Constant", value_t=torch.tensor(0, dtype=torch.bool)))
   570:             return input.masked_fill(mask, 0) * ctx.scale
   572:             return input
   578:             return grad_output.masked_fill(mask, 0) * ctx.scale, None
   580:             return grad_output, None
   596:         #   return torch.onnx.symbolic_opset9.dropout(g, input, dropout_p, train)
   597:         return symbolic_opset12.dropout(g, input, dropout_p, train)
   623:             return XDropout.apply(x, self.get_context())
   624:         return x
   645:             return ctx
   647:             return self.drop_prob
   662:         return hidden_states
   718:         return x.permute(0, 2, 1, 3).contiguous().view(-1, x.size(1), x.size(-1))
   743:                 Whether return the attention matrix.
   800:             return (context_layer, attention_probs)
   802:             return context_layer
   880:         return score
   915:             return (attention_output, att_matrix)
   917:             return attention_output
   933:         return hidden_states
   949:         return hidden_states
   982:             return (layer_output, att_matrix)
   984:             return layer_output
  1021:         return output_states
  1059:         return rel_embeddings
  1068:         return attention_mask
  1080:         return relative_pos
  1090:         return_dict=True,
  1151:         if not return_dict:
  1152:             return tuple(v for v in [output_states, all_hidden_states, all_attentions] if v is not None)
  1153:         return BaseModelOutput(
  1174:         return_dict: bool = True,
  1210:         if not return_dict:
  1211:             return tuple(
  1214:         return BaseModelOutput(
  1276:             return torch.div(input_length - kernel_size, stride, rounding_mode="floor") + 1
  1281:         return input_lengths
  1293:         return attention_mask
  1332:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  1335:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  1337:         return_dict (`bool`, *optional*):
  1338:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  1381:             return hidden_states
  1412:         return hidden_states
  1429:         return_dict: Optional[bool] = None,
  1435:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1456:             return_dict=return_dict,
  1461:         if not return_dict:
  1462:             return (hidden_states,) + encoder_outputs[1:]
  1464:         return BaseModelOutput(
  1562:         return_dict: Optional[bool] = None,
  1573:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1580:             return_dict=return_dict,
  1619:         if not return_dict:
  1621:             return ((loss,) + output) if loss is not None else output
  1623:         return CausalLMOutput(
  1696:         return_dict: Optional[bool] = None,
  1706:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1714:             return_dict=return_dict,
  1740:         if not return_dict:
  1742:             return ((loss,) + output) if loss is not None else output
  1744:         return SequenceClassifierOutput(

PythonVenv\Lib\site-packages\transformers\models\swiftformer\convert_swiftformer_original_to_hf.py:
   45:     return im
   50:         return torch.tensor([-2.1703e00, 2.1107e00, -2.0811e00, 8.8685e-01, 2.4360e-01])
   53:         return torch.tensor([3.9636e-01, 2.3478e-01, -1.6963e00, -1.7381e00, -8.6337e-01])
   56:         return torch.tensor([-4.2768e-01, -4.7429e-01, -1.0897e00, -1.0248e00, 3.5523e-02])
   59:         return torch.tensor([-2.5330e-01, 2.4211e-01, -6.0185e-01, -8.2789e-01, -6.0446e-02])
   86:     return rename_keys
  143:     inputs = processor(images=image, return_tensors="pt")

PythonVenv\Lib\site-packages\transformers\models\vivit\modeling_vivit.py:
   30: from ...utils import add_start_docstrings, add_start_docstrings_to_model_forward, logging, replace_return_docstrings
   81:         return x
  115:             return self.position_embeddings
  133:         return torch.cat((class_pos_embed.unsqueeze(0), patch_pos_embed), dim=1)
  150:         return embeddings
  176:         return x.permute(0, 2, 1, 3)
  211:         return outputs
  230:         return hidden_states
  243:             return
  270:         return outputs
  288:         return hidden_states
  304:         return hidden_states
  343:         return outputs
  359:         return_dict=True,
  388:         if not return_dict:
  389:             return tuple(v for v in [hidden_states, all_hidden_states, all_self_attentions] if v is not None)
  390:         return BaseModelOutput(
  409:         return pooled_output
  467:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  470:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  474:         return_dict (`bool`, *optional*):
  475:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  498:         return self.embeddings.patch_embeddings
  512:     @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=_CONFIG_FOR_DOC)
  520:         return_dict: Optional[bool] = None,
  523:         Returns:
  543:         ...     Returns:
  555:         ...     return np.stack([x.to_ndarray(format="rgb24") for x in frames])
  565:         ...     Returns:
  573:         ...     return indices
  590:         >>> inputs = image_processor(list(video), return_tensors="pt")
  602:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  616:             return_dict=return_dict,
  622:         if not return_dict:
  623:             return (sequence_output, pooled_output) + encoder_outputs[1:]
  625:         return BaseModelOutputWithPooling(
  662:     @replace_return_docstrings(output_type=ImageClassifierOutput, config_class=_CONFIG_FOR_DOC)
  671:         return_dict: Optional[bool] = None,
  679:         Returns:
  700:         ...     Returns:
  712:         ...     return np.stack([x.to_ndarray(format="rgb24") for x in frames])
  722:         ...     Returns:
  730:         ...     return indices
  746:         >>> inputs = image_processor(list(video), return_tensors="pt")
  757:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  765:             return_dict=return_dict,
  782:         if not return_dict:
  784:             return ((loss,) + output) if loss is not None else output
  786:         return ImageClassifierOutput(

PythonVenv\Lib\site-packages\transformers\models\x_clip\configuration_x_clip.py:
  131:         return cls.from_dict(config_dict, **kwargs)
  258:         return cls.from_dict(config_dict, **kwargs)
  410:         Returns:
  414:         return cls(text_config=text_config.to_dict(), vision_config=vision_config.to_dict(), **kwargs)

PythonVenv\Lib\site-packages\transformers\models\x_clip\convert_x_clip_original_pytorch_to_hf.py:
   63:     return config
  117:     return name
  199:     return orig_state_dict
  215:     return list(video)
  301:         text=["playing sports", "eating spaghetti", "go shopping"], videos=video, return_tensors="pt", padding=True

PythonVenv\Lib\site-packages\transformers\models\x_clip\modeling_x_clip.py:
    35:     replace_return_docstrings,
    48:     return nn.functional.cross_entropy(logits, torch.arange(len(logits), device=logits.device))
    55:     return (caption_loss + image_loss) / 2.0
    62:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `return_loss` is `True`):
    93:         return tuple(
   134:         return embeddings
   168:         return embeddings
   195:         return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
   273:         return attn_output, attn_weights_reshaped
   289:         return hidden_states
   316:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
   317:                 returned tensors for more detail.
   340:         return outputs
   355:         return input
   361:     return output
   373:         return drop_path(hidden_states, self.drop_prob, self.training)
   376:         return "p={}".format(self.drop_prob)
   419:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
   420:                 returned tensors for more detail.
   456:         return outputs
   551:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   554:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   556:         return_dict (`bool`, *optional*):
   557:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   566:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   569:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   571:         return_dict (`bool`, *optional*):
   572:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   600:         return_loss (`bool`, *optional*):
   601:             Whether or not to return the contrastive loss.
   603:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   606:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   608:         return_dict (`bool`, *optional*):
   609:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   636:         return_dict: Optional[bool] = None,
   659:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
   660:                 returned tensors for more detail.
   662:                 Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors
   664:             return_dict (`bool`, *optional*):
   665:                 Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   671:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   704:         if not return_dict:
   705:             return tuple(v for v in [hidden_states, encoder_states, all_attentions] if v is not None)
   706:         return BaseModelOutput(
   721:     @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=XCLIPTextConfig)
   729:         return_dict: Optional[bool] = None,
   732:         Returns:
   739:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   765:             return_dict=return_dict,
   775:         if not return_dict:
   776:             return (last_hidden_state, pooled_output) + encoder_outputs[1:]
   778:         return BaseModelOutputWithPooling(
   796:         return self.text_model.embeddings.token_embedding
   802:     @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=XCLIPTextConfig)
   810:         return_dict: Optional[bool] = None,
   813:         Returns:
   823:         >>> inputs = tokenizer(["a photo of a cat", "a photo of a dog"], padding=True, return_tensors="pt")
   829:         return self.text_model(
   835:             return_dict=return_dict,
   861:         return_dict: Optional[bool] = None,
   884:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
   885:                 returned tensors for more detail.
   887:                 Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors
   889:             return_dict (`bool`, *optional*):
   890:                 Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   896:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   929:         if not return_dict:
   930:             return tuple(v for v in [hidden_states, encoder_states, all_attentions] if v is not None)
   931:         return BaseModelOutput(
   952:     @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=XCLIPVisionConfig)
   958:         return_dict: Optional[bool] = None,
   961:         Returns:
   968:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   977:             return_dict=return_dict,
   984:         if not return_dict:
   985:             return (last_hidden_state, pooled_output) + encoder_outputs[1:]
   987:         return BaseModelOutputWithPooling(
  1006:         return self.vision_model.embeddings.patch_embedding
  1009:     @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=XCLIPVisionConfig)
  1015:         return_dict: Optional[bool] = None,
  1018:         Returns:
  1039:         ...     Returns:
  1051:         ...     return np.stack([x.to_ndarray(format="rgb24") for x in frames])
  1061:         ...     Returns:
  1069:         ...     return indices
  1085:         >>> pixel_values = processor(videos=list(video), return_tensors="pt").pixel_values
  1093:         return self.vision_model(
  1097:             return_dict=return_dict,
  1117:         return_dict: Optional[bool] = None,
  1128:             return_dict=return_dict,
  1136:         if not return_dict:
  1137:             return (last_hidden_state, pooled_output) + encoder_outputs[1:]
  1139:         return BaseModelOutputWithPooling(
  1167:         return tensor.view(batch_size, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
  1196:         return x
  1217:         return x
  1235:         return self.alpha * text
  1294:         return_dict: Optional[bool] = None,
  1297:         Returns:
  1309:         >>> inputs = tokenizer(["a photo of a cat", "a photo of a dog"], padding=True, return_tensors="pt")
  1317:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1325:             return_dict=return_dict,
  1331:         return text_embeds
  1339:         return_dict: Optional[bool] = None,
  1342:         Returns:
  1366:         ...     Returns:
  1378:         ...     return np.stack([x.to_ndarray(format="rgb24") for x in frames])
  1388:         ...     Returns:
  1396:         ...     return indices
  1412:         >>> inputs = processor(videos=list(video), return_tensors="pt")
  1421:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1430:             return_dict=return_dict,
  1442:             return_dict=return_dict,
  1446:         return video_embeds
  1449:     @replace_return_docstrings(output_type=XCLIPOutput, config_class=XCLIPConfig)
  1456:         return_loss: Optional[bool] = None,
  1459:         return_dict: Optional[bool] = None,
  1462:         Returns:
  1483:         ...     Returns:
  1495:         ...     return np.stack([x.to_ndarray(format="rgb24") for x in frames])
  1505:         ...     Returns:
  1513:         ...     return indices
  1532:         ...     return_tensors="pt",
  1550:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1559:             return_dict=return_dict,
  1571:             return_dict=return_dict,
  1587:             return_dict=return_dict,
  1606:         if return_loss:
  1609:         if not return_dict:
  1611:             return ((loss,) + output) if loss is not None else output
  1613:         return XCLIPOutput(

PythonVenv\Lib\site-packages\transformers\models\x_clip\processing_x_clip.py:
   62:     def __call__(self, text=None, videos=None, return_tensors=None, **kwargs):
   81:             return_tensors (`str` or [`~utils.TensorType`], *optional*):
   82:                 If set, will return tensors of a particular framework. Acceptable values are:
   84:                 - `'tf'`: Return TensorFlow `tf.constant` objects.
   85:                 - `'pt'`: Return PyTorch `torch.Tensor` objects.
   86:                 - `'np'`: Return NumPy `np.ndarray` objects.
   87:                 - `'jax'`: Return JAX `jnp.ndarray` objects.
   89:         Returns:
   92:             - **input_ids** -- List of token ids to be fed to a model. Returned when `text` is not `None`.
   94:               `return_attention_mask=True` or if *"attention_mask"* is in `self.model_input_names` and if `text` is not
   96:             - **pixel_values** -- Pixel values to be fed to a model. Returned when `videos` is not `None`.
  103:             encoding = self.tokenizer(text, return_tensors=return_tensors, **kwargs)
  106:             image_features = self.image_processor(videos, return_tensors=return_tensors, **kwargs)
  110:             return encoding
  112:             return encoding
  114:             return BatchEncoding(data=dict(**image_features), tensor_type=return_tensors)
  121:         return self.tokenizer.batch_decode(*args, **kwargs)
  128:         return self.tokenizer.decode(*args, **kwargs)
  132:         return ["input_ids", "attention_mask", "position_ids", "pixel_values"]
  140:         return self.image_processor_class
  148:         return self.image_processor

PythonVenv\Lib\site-packages\transformers\models\xglm\convert_xglm_original_ckpt_to_trfms.py:
  25:     return lin_layer
  58:     return model

PythonVenv\Lib\site-packages\transformers\models\xglm\modeling_flax_xglm.py:
  103:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  106:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  108:         return_dict (`bool`, *optional*):
  109:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  124:     return jnp.array(emb)
  164:         return hidden_states.reshape(hidden_states.shape[:2] + (self.num_heads, self.head_dim))
  167:         return hidden_states.reshape(hidden_states.shape[:2] + (self.embed_dim,))
  200:         return key, value, attention_mask
  293:         return attn_output, attn_weights
  384:         return outputs
  407:         return_dict: bool = True,
  445:         if not return_dict:
  446:             return tuple(v for v in outputs if v is not None)
  448:         return FlaxBaseModelOutputWithPastAndCrossAttentions(
  493:         return_dict: bool = True,
  517:             return_dict=return_dict,
  528:         if not return_dict:
  530:             return tuple(v for v in outputs if v is not None)
  532:         return FlaxBaseModelOutputWithPastAndCrossAttentions(
  575:                 return_dict=False,
  578:             module_init_outputs = self.module.init(rngs, input_ids, attention_mask, position_ids, return_dict=False)
  588:             return freeze(unflatten_dict(params))
  590:             return random_params
  607:             jax.random.PRNGKey(0), input_ids, attention_mask, position_ids, return_dict=False, init_cache=True
  609:         return unfreeze(init_variables["cache"])
  621:         return_dict: Optional[bool] = None,
  631:         return_dict = return_dict if return_dict is not None else self.config.return_dict
  667:             return_dict=return_dict,
  674:         if past_key_values is not None and return_dict:
  677:             return outputs
  678:         elif past_key_values is not None and not return_dict:
  682:         return outputs
  724:         return_dict: bool = True,
  737:             return_dict=return_dict,
  748:         if not return_dict:
  749:             return (lm_logits,) + outputs[1:]
  751:         return FlaxCausalLMOutputWithCrossAttentions(
  784:         return {
  793:         return model_kwargs

PythonVenv\Lib\site-packages\transformers\models\xglm\modeling_tf_xglm.py:
    34:     replace_return_docstrings,
    81:     return tf.constant(emb, name="embed_positions")
    94:     return tf.cast(incremental_indices, dtype=tf.int64) + padding_idx
   104:     Returns: tf.Tensor
   111:     return tf.broadcast_to(tf.expand_dims(position_ids, axis=0), input_shape) + past_key_values_length
   129:     return tf.tile(mask[None, None, :, :], (bsz, 1, 1, 1))
   143:     return (one_cst - expanded_mask) * LARGE_NEGATIVE
   179:         return tf.transpose(tf.reshape(tensor, (bsz, seq_len, self.num_heads, self.head_dim)), (0, 2, 1, 3))
   297:         return attn_output, attn_weights, past_key_value
   301:             return
   424:         return (
   433:             return
   492:         return self.embed_tokens
   510:             return combined_attention_mask
   512:         return expand_attention_mask + combined_attention_mask
   517:         return positions
   534:         return_dict: Optional[bool] = None,
   543:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   637:         if not return_dict:
   638:             return tuple(
   643:         return TFBaseModelOutputWithPastAndCrossAttentions(
   653:             return
   767:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   770:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   774:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   777:         return_dict (`bool`, *optional*):
   778:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple. This argument can be used in
   827:         return_dict: Optional[bool] = None,
   843:             return_dict=return_dict,
   847:         return outputs
   851:             return
   890:         return self.lm_head
   908:         return {
   918:     @replace_return_docstrings(output_type=TFCausalLMOutputWithCrossAttentions, config_class=_CONFIG_FOR_DOC)
   939:         return_dict: Optional[bool] = None,
   963:             return_dict=return_dict,
   978:         if not return_dict:
   980:             return ((loss,) + output) if loss is not None else output
   982:         return TFCausalLMOutputWithCrossAttentions(
   993:             return
  1004:             return tf_weight, "model.embed_tokens.weight"
  1006:             return (tf_weight,)

PythonVenv\Lib\site-packages\transformers\models\xglm\modeling_xglm.py:
  101:         past_key_values (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
  117:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  120:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  122:         return_dict (`bool`, *optional*):
  123:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  138:         return super().forward(input_ids) * self.embed_scale
  178:         return emb.to(torch.get_default_dtype())
  190:         return self.weights.index_select(0, position_ids.view(-1)).view(bsz, seq_len, self.weights.shape[-1]).detach()
  224:         return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
  344:         return attn_output, attn_weights_reshaped, past_key_value
  404:                 Whether or not to return the attentions tensors of all attention layers. See `attentions` under
  405:                 returned tensors for more detail.
  464:         return outputs
  526:         return self.embed_tokens
  551:         return_dict: Optional[bool] = None,
  558:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  678:         if not return_dict:
  679:             return tuple(
  684:         return BaseModelOutputWithPastAndCrossAttentions(
  713:         return self.model.embed_tokens
  719:         return self.lm_head
  745:         return_dict: Optional[bool] = None,
  758:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  774:             return_dict=return_dict,
  789:         if not return_dict:
  791:             return (loss,) + output if loss is not None else output
  793:         return CausalLMOutputWithCrossAttentions(
  830:         return {
  845:         return reordered_past

PythonVenv\Lib\site-packages\transformers\models\xglm\tokenization_xglm_fast.py:
  125:         return os.path.isfile(self.vocab_file) if self.vocab_file else False
  143:         Returns:
  148:             return [self.sep_token_id] + token_ids_0
  150:         return sep + token_ids_0 + sep + sep + token_ids_1
  157:         not make use of token type ids, therefore a list of zeros is returned.
  165:         Returns:
  173:             return len(sep + token_ids_0) * [0]
  174:         return len(sep + token_ids_0 + sep + sep + token_ids_1) * [0]
  185:             return
  193:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\xglm\tokenization_xglm.py:
  160:         return state
  188:         Returns:
  193:             return [self.sep_token_id] + token_ids_0
  195:         return sep + token_ids_0 + sep + sep + token_ids_1
  212:         Returns:
  217:             return super().get_special_tokens_mask(
  222:             return [1] + ([0] * len(token_ids_0))
  223:         return [1] + ([0] * len(token_ids_0)) + [1, 1] + ([0] * len(token_ids_1))
  230:         not make use of token type ids, therefore a list of zeros is returned.
  238:         Returns:
  246:             return len(sep + token_ids_0) * [0]
  247:         return len(sep + token_ids_0 + sep + sep + token_ids_1) * [0]
  251:         return len(self.sp_model) + self.fairseq_offset + self.num_madeup_words
  256:         return vocab
  259:         return self.sp_model.encode(text, out_type=str)
  264:             return self.fairseq_tokens_to_ids[token]
  267:         # Need to return unknown token if the SP model returned 0
  268:         return spm_id + self.fairseq_offset if spm_id else self.unk_token_id
  273:             return self.fairseq_ids_to_tokens[index]
  274:         return self.sp_model.IdToPiece(index - self.fairseq_offset)
  279:         return out_string
  284:             return
  296:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\xlm\configuration_xlm.py:
  231:         return OrderedDict(

PythonVenv\Lib\site-packages\transformers\models\xlm\modeling_tf_xlm.py:
   102:     return mask, attn_mask
   146:             return tf.transpose(tf.reshape(x, (bs, -1, self.n_heads, dim_per_head)), perm=(0, 2, 1, 3))
   150:             return tf.reshape(tf.transpose(x, perm=(0, 2, 1, 3)), (bs, -1, self.n_heads * dim_per_head))
   195:         return outputs
   199:             return
   232:         return x
   236:             return
   256:         self.return_dict = config.use_return_dict
   339:             return
   375:         return self.embeddings
   402:         return_dict=None,
   551:         if not return_dict:
   552:             return tuple(v for v in [tensor, hidden_states, attentions] if v is not None)
   554:         return TFBaseModelOutput(last_hidden_state=tensor, hidden_states=hidden_states, attentions=attentions)
   572:             return {
   578:             return {"input_ids": inputs_list, "attention_mask": attns_list}
   590:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   595:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   708:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   712:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   715:         return_dict (`bool`, *optional*):
   716:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple. This argument can be used in
   753:         return_dict: bool | None = None,
   768:             return_dict=return_dict,
   772:         return outputs
   776:             return
   814:         return self.input_embeddings
   821:         return {"bias": self.bias}
   831:         return hidden_states
   850:         return self.pred_layer
   854:         return self.name + "/" + self.pred_layer.name
   868:         return {"input_ids": inputs, "langs": langs}
   890:         return_dict: Optional[bool] = None,
   905:             return_dict=return_dict,
   912:         if not return_dict:
   913:             return (outputs,) + transformer_outputs[1:]
   915:         return TFXLMWithLMHeadModelOutput(
   921:             return
   966:         return_dict: Optional[bool] = None,
   988:             return_dict=return_dict,
   997:         if not return_dict:
   999:             return ((loss,) + output) if loss is not None else output
  1001:         return TFSequenceClassifierOutput(
  1010:             return
  1043:         Returns:
  1048:             return {
  1053:             return {
  1077:         return_dict: Optional[bool] = None,
  1118:             return_dict=return_dict,
  1128:         if not return_dict:
  1130:             return ((loss,) + output) if loss is not None else output
  1132:         return TFMultipleChoiceModelOutput(
  1141:             return
  1193:         return_dict: Optional[bool] = None,
  1213:             return_dict=return_dict,
  1223:         if not return_dict:
  1225:             return ((loss,) + output) if loss is not None else output
  1227:         return TFTokenClassifierOutput(
  1236:             return
  1282:         return_dict: Optional[bool] = None,
  1309:             return_dict=return_dict,
  1325:         if not return_dict:
  1327:             return ((loss,) + output) if loss is not None else output
  1329:         return TFQuestionAnsweringModelOutput(
  1339:             return

PythonVenv\Lib\site-packages\transformers\models\xlm\modeling_xlm.py:
    46:     replace_return_docstrings,
    87:     return mask, attn_mask
   110:             return
   140:             return x.view(bs, -1, self.n_heads, dim_per_head).transpose(1, 2)
   144:             return x.transpose(1, 2).contiguous().view(bs, -1, self.n_heads * dim_per_head)
   183:         return outputs
   197:         return apply_chunking_to_forward(self.ff_chunk, self.chunk_size_feed_forward, self.seq_len_dim, input)
   204:         return x
   228:         return {"input_ids": inputs_list, "attention_mask": attns_list, "langs": langs_list}
   257:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned if both `start_positions` and `end_positions` are provided):
   260:         start_top_log_probs (`torch.FloatTensor` of shape `(batch_size, config.start_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   262:         start_top_index (`torch.LongTensor` of shape `(batch_size, config.start_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   264:         end_top_log_probs (`torch.FloatTensor` of shape `(batch_size, config.start_n_top * config.end_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   267:         end_top_index (`torch.LongTensor` of shape `(batch_size, config.start_n_top * config.end_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   269:         cls_logits (`torch.FloatTensor` of shape `(batch_size,)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   271:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   276:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   369:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   372:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   374:         return_dict (`bool`, *optional*):
   375:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   455:         return self.embeddings
   487:         return_dict: Optional[bool] = None,
   493:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   606:         if not return_dict:
   607:             return tuple(v for v in [tensor, hidden_states, attentions] if v is not None)
   608:         return BaseModelOutput(last_hidden_state=tensor, hidden_states=hidden_states, attentions=attentions)
   650:         return outputs
   672:         return self.pred_layer.proj
   688:         return {"input_ids": input_ids, "langs": langs}
   711:         return_dict: Optional[bool] = None,
   719:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   733:             return_dict=return_dict,
   739:         if not return_dict:
   740:             return outputs + transformer_outputs[1:]
   742:         return MaskedLMOutput(
   789:         return_dict: Optional[bool] = None,
   797:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   811:             return_dict=return_dict,
   840:         if not return_dict:
   842:             return ((loss,) + output) if loss is not None else output
   844:         return SequenceClassifierOutput(
   890:         return_dict: Optional[bool] = None,
   902:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   916:             return_dict=return_dict,
   943:         if not return_dict:
   945:             return ((total_loss,) + output) if total_loss is not None else output
   947:         return QuestionAnsweringModelOutput(
   974:     @replace_return_docstrings(output_type=XLMForQuestionAnsweringOutput, config_class=_CONFIG_FOR_DOC)
   993:         return_dict: Optional[bool] = None,
  1013:         Returns:
  1033:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1047:             return_dict=return_dict,
  1059:             return_dict=return_dict,
  1062:         if not return_dict:
  1063:             return outputs + transformer_outputs[1:]
  1065:         return XLMForQuestionAnsweringOutput(
  1116:         return_dict: Optional[bool] = None,
  1122:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1136:             return_dict=return_dict,
  1149:         if not return_dict:
  1151:             return ((loss,) + output) if loss is not None else output
  1153:         return TokenClassifierOutput(
  1199:         return_dict: Optional[bool] = None,
  1207:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1240:             return_dict=return_dict,
  1252:         if not return_dict:
  1254:             return ((loss,) + output) if loss is not None else output
  1256:         return MultipleChoiceModelOutput(

PythonVenv\Lib\site-packages\transformers\models\xlm\tokenization_xlm.py:
   39:     Return set of symbol pairs in a word. word is represented as tuple of symbols (symbols being variable-length
   47:     return pairs
   64:     return "".join(output).lower().split(" ")
  107:     return text
  120:     return "".join(output)
  134:     return text
  271:         return self.do_lowercase_and_remove_accent
  279:         return punct_normalizer.normalize(text)
  287:         return moses_tokenizer.tokenize(text, return_str=False, escape=False)
  293:         return text
  314:         return list(self.ja_word_tokenizer.getWS(text))
  318:         return len(self.encoder)
  321:         return dict(self.encoder, **self.added_tokens_encoder)
  326:             return self.cache[token]
  330:             return token + "</w>"
  365:         return word
  404:         Returns:
  461:         return split_tokens
  465:         return self.encoder.get(token, self.encoder.get(self.unk_token))
  469:         return self.decoder.get(index, self.unk_token)
  474:         return out_string
  492:         Returns:
  500:             return bos + token_ids_0 + sep
  501:         return bos + token_ids_0 + sep + token_ids_1 + sep
  518:         Returns:
  523:             return super().get_special_tokens_mask(
  528:             return [1] + ([0] * len(token_ids_0)) + [1] + ([0] * len(token_ids_1)) + [1]
  529:         return [1] + ([0] * len(token_ids_0)) + [1]
  543:         If `token_ids_1` is `None`, this method only returns the first portion of the mask (0s).
  551:         Returns:
  557:             return len(cls + token_ids_0 + sep) * [0]
  558:         return len(cls + token_ids_0 + sep) * [0] + len(token_ids_1 + sep) * [1]
  563:             return
  586:         return vocab_file, merge_file
  591:         return state

PythonVenv\Lib\site-packages\transformers\models\xlm_prophetnet\configuration_xlm_prophetnet.py:
   95:             Whether or not the model should return the last key/values attentions (not used by all models).
  172:         return self.num_encoder_layers + self.num_decoder_layers

PythonVenv\Lib\site-packages\transformers\models\xlm_prophetnet\modeling_xlm_prophetnet.py:
    37:     replace_return_docstrings,
   130:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   133:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   136:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   138:         return_dict (`bool`, *optional*):
   139:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   168:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   171:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   173:         return_dict (`bool`, *optional*):
   174:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   181:         return nn.functional.softmax(hidden_state.float(), dim=dim)
   183:         return nn.functional.softmax(hidden_state, dim=dim, dtype=torch.float32)
   201:     return torch.cat([left_block, right_block], dim=2)
   229:     return rel_positions_bucket
   253:     return main_relative_position_buckets, predict_relative_position_buckets
   263:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` is provided):
   271:         past_key_values (`List[torch.FloatTensor]`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
   277:         decoder_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   282:         decoder_ngram_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   288:         decoder_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   294:         decoder_ngram_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   300:         cross_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   308:         encoder_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   313:         encoder_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   339:         return self.cross_attentions
   357:         past_key_values (`List[torch.FloatTensor]`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
   363:         decoder_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   368:         decoder_ngram_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   374:         decoder_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   380:         decoder_ngram_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   386:         cross_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   394:         encoder_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   399:         encoder_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   426:         return self.cross_attentions
   443:         past_key_values (`List[torch.FloatTensor]`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
   449:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   454:         ngram_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   460:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   466:         ngram_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   472:         cross_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   497:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` is provided):
   505:         past_key_values (`List[torch.FloatTensor]`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
   511:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   516:         ngram_hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   522:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   528:         ngram_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   534:         cross_attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   589:         return shifted_input_ids
   630:         return super().forward(position_ids), position_ids
   633:         return super().forward(position_ids)
   665:         return tensor.view(bsz, seq_len, self.num_attn_heads, self.head_dim).transpose(1, 2).contiguous()
   763:         return attn_output, attn_weights_reshaped, past_key_value
   787:         return hidden_states
   822:         return tensor.view(batch_size, seq_len, self.num_attn_heads, self.head_dim).transpose(1, 2).contiguous()
  1003:         return attn_output, main_attn_probs, predict_attn_probs, past_key_value
  1048:         return main_relative_pos_embeddings
  1107:         return predict_relative_pos_embeddings
  1151:         return outputs
  1236:         return outputs
  1269:         return self.word_embeddings
  1275:     @replace_return_docstrings(output_type=BaseModelOutput, config_class=_CONFIG_FOR_DOC)
  1284:         return_dict: Optional[bool] = None,
  1287:         Returns:
  1297:         >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
  1307:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1367:         if not return_dict:
  1368:             return tuple(v for v in [hidden_states, encoder_hidden_states, all_attentions] if v is not None)
  1369:         return BaseModelOutput(
  1411:         return self.word_embeddings
  1417:     @replace_return_docstrings(output_type=XLMProphetNetDecoderModelOutput, config_class=_CONFIG_FOR_DOC)
  1431:         return_dict: Optional[bool] = None,
  1453:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
  1459:         Returns:
  1469:         >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
  1479:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1631:         # split last_hidden_state for return
  1635:         if not return_dict:
  1636:             return tuple(
  1650:         return XLMProphetNetDecoderModelOutput(
  1681:         return main_relative_buckets, predict_relative_buckets
  1705:         return extended_attention_mask.to(hidden_states.dtype)
  1740:         return extended_predict_attention_mask.to(hidden_states.dtype)
  1769:         return self.word_embeddings
  1782:         return self.encoder
  1785:         return self.decoder
  1788:     @replace_return_docstrings(output_type=XLMProphetNetSeq2SeqModelOutput, config_class=_CONFIG_FOR_DOC)
  1805:         return_dict: Optional[bool] = None,
  1808:         Returns:
  1819:         ...     "Studies have been shown that owning a dog is good for you", return_tensors="pt"
  1821:         >>> decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
  1832:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1842:                 return_dict=return_dict,
  1858:             return_dict=return_dict,
  1861:         if not return_dict:

PythonVenv\Lib\site-packages\transformers\models\xlm_prophetnet\tokenization_xlm_prophetnet.py:
   40:     return vocab
  174:         return os.path.isfile(self.vocab_file) if self.vocab_file else False
  179:         return state
  214:         Returns:
  219:             return super().get_special_tokens_mask(
  224:             return ([0] * len(token_ids_0)) + [1]
  225:         return ([0] * len(token_ids_0)) + [1] + ([0] * len(token_ids_1)) + [1]
  232:         does not make use of token type ids, therefore a list of zeros is returned.
  240:         Returns:
  248:             return len(token_ids_0 + sep) * [0]
  249:         return len(token_ids_0 + sep + sep + token_ids_1 + sep) * [0]
  253:         return len(self.sp_model) + self.fairseq_offset
  258:         return vocab
  261:         return self.sp_model.encode(text, out_type=str)
  266:             return self.fairseq_tokens_to_ids[token]
  269:         # Need to return unknown token if the SP model returned 0
  270:         return spm_id + self.fairseq_offset if spm_id else self.unk_token_id
  275:             return self.fairseq_ids_to_tokens[index]
  276:         return self.sp_model.IdToPiece(index - self.fairseq_offset)
  281:         return out_string
  286:             return
  298:         return (out_vocab_file,)
  316:         Returns:
  321:             return token_ids_0 + [self.sep_token_id]
  323:         return token_ids_0 + sep + token_ids_1 + sep

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta\configuration_xlm_roberta.py:
   77:             Whether or not the model should return the last key/values attentions (not used by all models). Only
  148:         return OrderedDict(

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta\modeling_flax_xlm_roberta.py:
    65:     Returns: jnp.ndarray
    77:     return incremental_indices.astype("i4") + padding_idx
   136:         return_dict (`bool`, *optional*):
   137:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   182:         return hidden_states
   221:         return hidden_states.reshape(hidden_states.shape[:2] + (self.config.num_attention_heads, self.head_dim))
   224:         return hidden_states.reshape(hidden_states.shape[:2] + (self.config.hidden_size,))
   257:         return key, value, attention_mask
   354:         return outputs
   375:         return hidden_states
   418:         return outputs
   437:         return hidden_states
   458:         return hidden_states
   516:         return outputs
   549:         return_dict: bool = True,
   591:         if not return_dict:
   592:             return tuple(v for v in outputs if v is not None)
   594:         return FlaxBaseModelOutputWithPastAndCrossAttentions(
   626:         return_dict: bool = True,
   628:         return self.layer(
   638:             return_dict=return_dict,
   657:         return nn.tanh(cls_hidden_state)
   693:         return hidden_states
   726:         return hidden_states
   785:                 return_dict=False,
   789:                 rngs, input_ids, attention_mask, token_type_ids, position_ids, head_mask, return_dict=False
   800:             return freeze(unflatten_dict(params))
   802:             return random_params
   820:             jax.random.PRNGKey(0), input_ids, attention_mask, position_ids, return_dict=False, init_cache=True
   822:         return unfreeze(init_variables["cache"])
   839:         return_dict: Optional[bool] = None,
   846:         return_dict = return_dict if return_dict is not None else self.config.return_dict
   890:                 return_dict=return_dict,
   896:             if past_key_values is not None and return_dict:
   899:                 return outputs
   900:             elif past_key_values is not None and not return_dict:
   915:                 return_dict=return_dict,
   919:         return outputs
   951:         return_dict: bool = True,
   974:             return_dict=return_dict,
   979:         if not return_dict:
   980:             # if pooled is None, don't return it
   982:                 return (hidden_states,) + outputs[1:]
   983:             return (hidden_states, pooled) + outputs[1:]
   985:         return FlaxBaseModelOutputWithPoolingAndCrossAttentions(
  1030:         return_dict: bool = True,
  1042:             return_dict=return_dict,
  1054:         if not return_dict:
  1055:             return (logits,) + outputs[1:]
  1057:         return FlaxMaskedLMOutput(
  1103:         return_dict: bool = True,
  1115:             return_dict=return_dict,
  1121:         if not return_dict:
  1122:             return (logits,) + outputs[1:]
  1124:         return FlaxSequenceClassifierOutput(
  1175:         return_dict: bool = True,
  1193:             return_dict=return_dict,
  1202:         if not return_dict:
  1203:             return (reshaped_logits,) + outputs[2:]
  1205:         return FlaxMultipleChoiceModelOutput(
  1265:         return_dict: bool = True,
  1277:             return_dict=return_dict,
  1284:         if not return_dict:
  1285:             return (logits,) + outputs[1:]
  1287:         return FlaxTokenClassifierOutput(
  1338:         return_dict: bool = True,
  1350:             return_dict=return_dict,
  1360:         if not return_dict:
  1361:             return (start_logits, end_logits) + outputs[1:]
  1363:         return FlaxQuestionAnsweringModelOutput(
  1418:         return_dict: bool = True,
  1433:             return_dict=return_dict,
  1445:         if not return_dict:
  1446:             return (logits,) + outputs[1:]
  1448:         return FlaxCausalLMOutputWithCrossAttentions(
  1482:         return {
  1491:         return model_kwargs

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta\modeling_tf_xlm_roberta.py:
   142:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   146:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   149:         return_dict (`bool`, *optional*):
   150:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple. This argument can be used in
   198:             return
   211:         Returns: tf.Tensor
   216:         return incremental_indices + self.padding_idx
   230:         Returns:
   261:         return final_embeddings
   283:         return pooled_output
   287:             return
   329:         return tf.transpose(tensor, perm=[0, 2, 1, 3])
   410:         return outputs
   414:             return
   444:         return hidden_states
   448:             return
   496:         return outputs
   500:             return
   529:         return hidden_states
   533:             return
   557:         return hidden_states
   561:             return
   651:         # if decoder, return the attn key/values as the last output
   655:         return outputs
   659:             return
   693:         return_dict: bool,
   731:         if not return_dict:
   732:             return tuple(
   736:         return TFBaseModelOutputWithPastAndCrossAttentions(
   746:             return
   769:         self.return_dict = config.use_return_dict
   777:         return self.embeddings
   808:         return_dict: Optional[bool] = None,
   929:             return_dict=return_dict,
   936:         if not return_dict:
   937:             return (
   942:         return TFBaseModelOutputWithPoolingAndCrossAttentions(
   953:             return
  1008:         return_dict: Optional[bool] = None,
  1028:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
  1044:             return_dict=return_dict,
  1048:         return outputs
  1052:             return
  1082:             return
  1092:         return self.decoder
  1099:         return {"bias": self.bias}
  1117:         return hidden_states
  1133:         return self.lm_head
  1137:         return self.name + "/" + self.lm_head.name
  1159:         return_dict: Optional[bool] = None,
  1178:             return_dict=return_dict,
  1187:         if not return_dict:
  1189:             return ((loss,) + output) if loss is not None else output
  1191:         return TFMaskedLMOutput(
  1200:             return
  1229:         return self.lm_head
  1233:         return self.name + "/" + self.lm_head.name
  1246:         return {"input_ids": input_ids, "attention_mask": attention_mask, "past_key_values": past_key_values}
  1269:         return_dict: Optional[bool] = None,
  1290:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
  1309:             return_dict=return_dict,
  1323:         if not return_dict:
  1325:             return ((loss,) + output) if loss is not None else output
  1327:         return TFCausalLMOutputWithCrossAttentions(
  1338:             return
  1375:         return x
  1379:             return
  1427:         return_dict: Optional[bool] = None,
  1446:             return_dict=return_dict,
  1454:         if not return_dict:
  1456:             return ((loss,) + output) if loss is not None else output
  1458:         return TFSequenceClassifierOutput(
  1467:             return
  1519:         return_dict: Optional[bool] = None,
  1549:             return_dict=return_dict,
  1559:         if not return_dict:
  1561:             return ((loss,) + output) if loss is not None else output
  1563:         return TFMultipleChoiceModelOutput(
  1572:             return
  1628:         return_dict: Optional[bool] = None,
  1645:             return_dict=return_dict,
  1655:         if not return_dict:
  1657:             return ((loss,) + output) if loss is not None else output
  1659:         return TFTokenClassifierOutput(
  1668:             return
  1719:         return_dict: Optional[bool] = None,
  1743:             return_dict=return_dict,
  1759:         if not return_dict:
  1761:             return ((loss,) + output) if loss is not None else output
  1763:         return TFQuestionAnsweringModelOutput(
  1773:             return

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta\modeling_xlm_roberta.py:
    44:     replace_return_docstrings,
   125:         return embeddings
   134:         Returns: torch.Tensor
   142:         return position_ids.unsqueeze(0).expand(input_shape)
   176:         return x.permute(0, 2, 1, 3)
   277:         return outputs
   292:         return hidden_states
   312:             return
   349:         return outputs
   365:         return hidden_states
   380:         return hidden_states
   458:         # if decoder, return the attn key/values as the last output
   462:         return outputs
   467:         return layer_output
   489:         return_dict: Optional[bool] = True,
   543:         if not return_dict:
   544:             return tuple(
   555:         return BaseModelOutputWithPastAndCrossAttentions(
   577:         return pooled_output
   666:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   669:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   671:         return_dict (`bool`, *optional*):
   672:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   711:         return self.embeddings.word_embeddings
   745:         return_dict: Optional[bool] = None,
   764:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   771:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   844:             return_dict=return_dict,
   849:         if not return_dict:
   850:             return (sequence_output, pooled_output) + encoder_outputs[1:]
   852:         return BaseModelOutputWithPoolingAndCrossAttentions(
   883:         return self.lm_head.decoder
   889:     @replace_return_docstrings(output_type=CausalLMOutputWithCrossAttentions, config_class=_CONFIG_FOR_DOC)
   905:         return_dict: Optional[bool] = None,
   929:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   932:         Returns:
   945:         >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
   950:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   967:             return_dict=return_dict,
   983:         if not return_dict:
   985:             return ((lm_loss,) + output) if lm_loss is not None else output
   987:         return CausalLMOutputWithCrossAttentions(
  1015:         return {"input_ids": input_ids, "attention_mask": attention_mask, "past_key_values": past_key_values}
  1023:         return reordered_past
  1050:         return self.lm_head.decoder
  1077:         return_dict: Optional[bool] = None,
  1087:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1100:             return_dict=return_dict,
  1112:         if not return_dict:
  1114:             return ((masked_lm_loss,) + output) if masked_lm_loss is not None else output
  1116:         return MaskedLMOutput(
  1145:         return x
  1195:         return_dict: Optional[bool] = None,
  1203:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1214:             return_dict=return_dict,
  1244:         if not return_dict:
  1246:             return ((loss,) + output) if loss is not None else output
  1248:         return SequenceClassifierOutput(
  1294:         return_dict: Optional[bool] = None,
  1302:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1324:             return_dict=return_dict,
  1339:         if not return_dict:
  1341:             return ((loss,) + output) if loss is not None else output
  1343:         return MultipleChoiceModelOutput(
  1393:         return_dict: Optional[bool] = None,
  1399:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1410:             return_dict=return_dict,
  1425:         if not return_dict:
  1427:             return ((loss,) + output) if loss is not None else output
  1429:         return TokenClassifierOutput(
  1457:         return x
  1499:         return_dict: Optional[bool] = None,
  1511:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1522:             return_dict=return_dict,
  1549:         if not return_dict:
  1551:             return ((total_loss,) + output) if total_loss is not None else output
  1553:         return QuestionAnsweringModelOutput(
  1571:     Returns: torch.Tensor
  1576:     return incremental_indices.long() + padding_idx

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta\tokenization_xlm_roberta_fast.py:
  126:         return os.path.isfile(self.vocab_file) if self.vocab_file else False
  144:         Returns:
  149:             return [self.cls_token_id] + token_ids_0 + [self.sep_token_id]
  152:         return cls + token_ids_0 + sep + sep + token_ids_1 + sep
  159:         not make use of token type ids, therefore a list of zeros is returned.
  167:         Returns:
  176:             return len(cls + token_ids_0 + sep) * [0]
  177:         return len(cls + token_ids_0 + sep + sep + token_ids_1 + sep) * [0]
  188:             return
  196:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta\tokenization_xlm_roberta.py:
  158:         return state
  186:         Returns:
  191:             return [self.cls_token_id] + token_ids_0 + [self.sep_token_id]
  194:         return cls + token_ids_0 + sep + sep + token_ids_1 + sep
  211:         Returns:
  216:             return super().get_special_tokens_mask(
  221:             return [1] + ([0] * len(token_ids_0)) + [1]
  222:         return [1] + ([0] * len(token_ids_0)) + [1, 1] + ([0] * len(token_ids_1)) + [1]
  229:         not make use of token type ids, therefore a list of zeros is returned.
  237:         Returns:
  246:             return len(cls + token_ids_0 + sep) * [0]
  247:         return len(cls + token_ids_0 + sep + sep + token_ids_1 + sep) * [0]
  251:         return len(self.sp_model) + self.fairseq_offset + 1  # Add the <mask> token
  256:         return vocab
  260:         return self.sp_model.encode(text, out_type=str)
  265:             return self.fairseq_tokens_to_ids[token]
  268:         # Need to return unknown token if the SP model returned 0
  269:         return spm_id + self.fairseq_offset if spm_id else self.unk_token_id
  274:             return self.fairseq_ids_to_tokens[index]
  275:         return self.sp_model.IdToPiece(index - self.fairseq_offset)
  280:         return out_string
  285:             return
  297:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta_xl\configuration_xlm_roberta_xl.py:
   75:             Whether or not the model should return the last key/values attentions (not used by all models). Only
  145:         return OrderedDict(

PythonVenv\Lib\site-packages\transformers\models\xlm_roberta_xl\modeling_xlm_roberta_xl.py:
    43:     replace_return_docstrings,
   121:         return embeddings
   131:         Returns: torch.Tensor
   139:         return position_ids.unsqueeze(0).expand(input_shape)
   173:         return x.permute(0, 2, 1, 3)
   274:         return outputs
   287:         return hidden_states
   300:             return
   338:         return outputs
   354:         return hidden_states
   365:         return hidden_states
   443:         # if decoder, return the attn key/values as the last output
   447:         return outputs
   453:         return layer_output
   475:         return_dict=True,
   530:         if not return_dict:
   531:             return tuple(
   542:         return BaseModelOutputWithPastAndCrossAttentions(
   564:         return pooled_output
   639:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   642:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   644:         return_dict (`bool`, *optional*):
   645:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   678:         return self.embeddings.word_embeddings
   712:         return_dict: Optional[bool] = None,
   731:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   738:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   811:             return_dict=return_dict,
   816:         if not return_dict:
   817:             return (sequence_output, pooled_output) + encoder_outputs[1:]
   819:         return BaseModelOutputWithPoolingAndCrossAttentions(
   848:         return self.lm_head.decoder
   855:     @replace_return_docstrings(output_type=CausalLMOutputWithCrossAttentions, config_class=_CONFIG_FOR_DOC)
   871:         return_dict: Optional[bool] = None,
   893:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   896:         Returns:
   908:         >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
   913:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   930:             return_dict=return_dict,
   944:         if not return_dict:
   946:             return ((lm_loss,) + output) if lm_loss is not None else output
   948:         return CausalLMOutputWithCrossAttentions(
   976:         return {"input_ids": input_ids, "attention_mask": attention_mask, "past_key_values": past_key_values}
   984:         return reordered_past
  1008:         return self.lm_head.decoder
  1034:         return_dict: Optional[bool] = None,
  1044:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1057:             return_dict=return_dict,
  1067:         if not return_dict:
  1069:             return ((masked_lm_loss,) + output) if masked_lm_loss is not None else output
  1071:         return MaskedLMOutput(
  1099:         return x
  1145:         return_dict: Optional[bool] = None,
  1153:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1164:             return_dict=return_dict,
  1192:         if not return_dict:
  1194:             return ((loss,) + output) if loss is not None else output
  1196:         return SequenceClassifierOutput(
  1240:         return_dict: Optional[bool] = None,
  1248:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1270:             return_dict=return_dict,
  1283:         if not return_dict:
  1285:             return ((loss,) + output) if loss is not None else output
  1287:         return MultipleChoiceModelOutput(
  1333:         return_dict: Optional[bool] = None,
  1339:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1350:             return_dict=return_dict,
  1372:         if not return_dict:
  1374:             return ((loss,) + output) if loss is not None else output
  1376:         return TokenClassifierOutput(
  1403:         return x
  1441:         return_dict: Optional[bool] = None,
  1453:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1464:             return_dict=return_dict,
  1491:         if not return_dict:
  1493:             return ((total_loss,) + output) if total_loss is not None else output
  1495:         return QuestionAnsweringModelOutput(
  1513:     Returns: torch.Tensor
  1518:     return incremental_indices.long() + padding_idx

PythonVenv\Lib\site-packages\transformers\models\xlnet\configuration_xlnet.py:
  230:         return -1

PythonVenv\Lib\site-packages\transformers\models\xlnet\modeling_tf_xlnet.py:
    53:     replace_return_docstrings,
   116:             return
   135:         return x
   177:             return attn_vec, attn_prob
   179:         return attn_vec
   192:         return output
   331:         return outputs
   359:         return output
   363:             return
   417:         return outputs
   421:             return
   444:         return self.input_embeddings
   451:         return {"bias": self.bias}
   460:         return hidden_states
   473:         self.return_dict = config.return_dict
   496:         return self.word_embedding
   509:             return
   549:         return ret
   558:             # and returns all of the past and current hidden states.
   561:             # If `use_mems` is active and `mem_len` is defined, the model returns the last `mem_len` hidden
   570:         return tf.stop_gradient(new_mem)
   581:         return pos_emb
   621:         return pos_emb
   638:         return_dict: Optional[bool] = None,
   821:         if not return_dict:
   822:             return tuple(v for v in [output, new_mems, hidden_states, attentions] if v is not None)
   824:         return TFXLNetModelOutput(
   854:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   859:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   879:         loss (`tf.Tensor` of shape *(1,)*, *optional*, returned when `labels` is provided)
   890:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   895:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   916:         loss (`tf.Tensor` of shape `(1,)`, *optional*, returned when `label` is provided):
   924:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   929:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   950:         loss (`tf.Tensor` of shape `(1,)`, *optional*, returned when `labels` is provided) :
   958:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   963:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   984:         loss (`tf.Tensor` of shape *(1,)*, *optional*, returned when `labels` is provided):
   994:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   999:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
  1020:         loss (`tf.Tensor` of shape `(1,)`, *optional*, returned when `labels` is provided):
  1030:         hidden_states (`tuple(tf.Tensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
  1035:         attentions (`tuple(tf.Tensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
  1156:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
  1159:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
  1161:         return_dict (`bool`, *optional*):
  1162:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
  1196:         return_dict: Optional[bool] = None,
  1212:             return_dict=return_dict,
  1216:         return outputs
  1220:             return
  1242:         return self.lm_loss
  1246:         return self.name + "/" + self.lm_loss.name
  1285:         return inputs
  1289:     @replace_return_docstrings(output_type=TFXLNetLMHeadModelOutput, config_class=_CONFIG_FOR_DOC)
  1304:         return_dict: Optional[bool] = None,
  1313:         Return:
  1363:             return_dict=return_dict,
  1373:         if not return_dict:
  1375:             return ((loss,) + output) if loss is not None else output
  1377:         return TFXLNetLMHeadModelOutput(
  1387:             return
  1439:         return_dict: Optional[bool] = None,
  1462:             return_dict=return_dict,
  1472:         if not return_dict:
  1474:             return ((loss,) + output) if loss is not None else output
  1476:         return TFXLNetForSequenceClassificationOutput(
  1486:             return
  1540:         return_dict: Optional[bool] = None,
  1579:             return_dict=return_dict,
  1588:         if not return_dict:
  1590:             return ((loss,) + output) if loss is not None else output
  1592:         return TFXLNetForMultipleChoiceOutput(
  1602:             return
  1654:         return_dict: Optional[bool] = None,
  1676:             return_dict=return_dict,
  1683:         if not return_dict:
  1685:             return ((loss,) + output) if loss is not None else output
  1687:         return TFXLNetForTokenClassificationOutput(
  1697:             return
  1744:         return_dict: Optional[bool] = None,
  1772:             return_dict=return_dict,
  1788:         if not return_dict:
  1790:             return ((loss,) + output) if loss is not None else output
  1792:         return TFXLNetForQuestionAnsweringSimpleOutput(
  1803:             return

PythonVenv\Lib\site-packages\transformers\models\xlnet\modeling_xlnet.py:
    36:     replace_return_docstrings,
   127:     return tf_to_pt_map
   194:     return model
   240:         return x
   255:         return x
   305:             return attn_vec, torch.einsum("bnij->ijbn", attn_prob)
   307:         return attn_vec
   319:         return output
   454:         return outputs
   477:         return output
   523:         return outputs
   527:         return output_x
   587:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   592:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   612:         loss (`torch.FloatTensor` of shape *(1,)*, *optional*, returned when `labels` is provided)
   623:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   628:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   649:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `label` is provided):
   657:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   662:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   683:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` is provided) :
   691:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   696:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   717:         loss (`torch.FloatTensor` of shape *(1,)*, *optional*, returned when `labels` is provided):
   727:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   732:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   753:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` is provided):
   763:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   768:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   790:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned if both `start_positions` and `end_positions` are provided):
   793:         start_top_log_probs (`torch.FloatTensor` of shape `(batch_size, config.start_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   795:         start_top_index (`torch.LongTensor` of shape `(batch_size, config.start_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   797:         end_top_log_probs (`torch.FloatTensor` of shape `(batch_size, config.start_n_top * config.end_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   800:         end_top_index (`torch.LongTensor` of shape `(batch_size, config.start_n_top * config.end_n_top)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   802:         cls_logits (`torch.FloatTensor` of shape `(batch_size,)`, *optional*, returned if `start_positions` or `end_positions` is not provided):
   808:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
   813:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   911:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   914:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   916:         return_dict (`bool`, *optional*):
   917:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   947:         return self.word_embedding
   981:         return mask
   990:             # and returns all of the past and current hidden states.
   993:             # If `use_mems` is active and `mem_len` is defined, the model returns the last `mem_len` hidden
  1002:         return new_mem.detach()
  1013:         return pos_emb
  1051:         return pos_emb
  1073:         return_dict: Optional[bool] = None,
  1080:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1274:         if not return_dict:
  1275:             return tuple(v for v in [output, new_mems, hidden_states, attentions] if v is not None)
  1277:         return XLNetModelOutput(
  1303:         return self.lm_loss
  1348:         return inputs
  1351:     @replace_return_docstrings(output_type=XLNetLMHeadModelOutput, config_class=_CONFIG_FOR_DOC)
  1367:         return_dict: Optional[bool] = None,
  1382:         Return:
  1438:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1453:             return_dict=return_dict,
  1465:         if not return_dict:
  1467:             return ((loss,) + output) if loss is not None else output
  1469:         return XLNetLMHeadModelOutput(
  1484:         return [layer_past.index_select(1, beam_idx.to(layer_past.device)) for layer_past in mems]
  1528:         return_dict: Optional[bool] = None,
  1537:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1552:             return_dict=return_dict,
  1583:         if not return_dict:
  1585:             return ((loss,) + output) if loss is not None else output
  1587:         return XLNetForSequenceClassificationOutput(
  1635:         return_dict: Optional[bool] = None,
  1643:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1658:             return_dict=return_dict,
  1670:         if not return_dict:
  1672:             return ((loss,) + output) if loss is not None else output
  1674:         return XLNetForTokenClassificationOutput(
  1722:         return_dict: Optional[bool] = None,
  1731:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1758:             return_dict=return_dict,
  1773:         if not return_dict:
  1775:             return ((loss,) + output) if loss is not None else output
  1777:         return XLNetForMultipleChoiceOutput(
  1826:         return_dict: Optional[bool] = None,
  1839:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1854:             return_dict=return_dict,
  1882:         if not return_dict:
  1884:             return ((total_loss,) + output) if total_loss is not None else output
  1886:         return XLNetForQuestionAnsweringSimpleOutput(
  1918:     @replace_return_docstrings(output_type=XLNetForQuestionAnsweringOutput, config_class=_CONFIG_FOR_DOC)
  1938:         return_dict: Optional[bool] = None,
  1959:         Returns:
  1979:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1994:             return_dict=return_dict,
  2025:             if not return_dict:
  2026:                 return (total_loss,) + transformer_outputs[1:]
  2028:                 return XLNetForQuestionAnsweringOutput(
  2067:             if not return_dict:
  2069:                 return outputs + transformer_outputs[1:]
  2071:                 return XLNetForQuestionAnsweringOutput(

PythonVenv\Lib\site-packages\transformers\models\xlnet\tokenization_xlnet_fast.py:
  158:         return os.path.isfile(self.vocab_file) if self.vocab_file else False
  176:         Returns:
  182:             return token_ids_0 + sep + cls
  183:         return token_ids_0 + sep + token_ids_1 + sep + cls
  197:         If `token_ids_1` is `None`, this method only returns the first portion of the mask (0s).
  205:         Returns:
  212:             return len(token_ids_0 + sep) * [0] + cls_segment_id
  213:         return len(token_ids_0 + sep) * [0] + len(token_ids_1 + sep) * [1] + cls_segment_id
  224:             return
  232:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\xlnet\tokenization_xlnet.py:
  170:         return len(self.sp_model)
  175:         return vocab
  180:         return state
  205:         return outputs
  225:         return new_pieces
  229:         return self.sp_model.PieceToId(token)
  233:         return self.sp_model.IdToPiece(index)
  238:         return out_string
  281:             return clean_text
  283:             return text
  301:         Returns:
  307:             return token_ids_0 + sep + cls
  308:         return token_ids_0 + sep + token_ids_1 + sep + cls
  325:         Returns:
  330:             return super().get_special_tokens_mask(
  335:             return ([0] * len(token_ids_0)) + [1] + ([0] * len(token_ids_1)) + [1, 1]
  336:         return ([0] * len(token_ids_0)) + [1, 1]
  350:         If `token_ids_1` is `None`, this method only returns the first portion of the mask (0s).
  358:         Returns:
  365:             return len(token_ids_0 + sep) * [0] + cls_segment_id
  366:         return len(token_ids_0 + sep) * [0] + len(token_ids_1 + sep) * [1] + cls_segment_id
  371:             return
  383:         return (out_vocab_file,)

PythonVenv\Lib\site-packages\transformers\models\xmod\configuration_xmod.py:
   76:             Whether or not the model should return the last key/values attentions (not used by all models). Only
  176:         return OrderedDict(

PythonVenv\Lib\site-packages\transformers\models\xmod\modeling_xmod.py:
   115:         return embeddings
   124:         Returns: torch.Tensor
   132:         return position_ids.unsqueeze(0).expand(input_shape)
   166:         return x.permute(0, 2, 1, 3)
   267:         return outputs
   282:         return hidden_states
   296:             return
   338:         return outputs
   354:         return hidden_states
   372:         return hidden_states
   396:         return hidden_states
   400:         lang_ids, lang_lengths = torch.unique_consecutive(lang_ids, return_counts=True)
   422:         return hidden_states
   510:         # if decoder, return the attn key/values as the last output
   514:         return outputs
   517:         return self.intermediate(attention_output)
   542:         return_dict: Optional[bool] = True,
   600:         if not return_dict:
   601:             return tuple(
   612:         return BaseModelOutputWithPastAndCrossAttentions(
   634:         return pooled_output
   753:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   756:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   758:         return_dict (`bool`, *optional*):
   759:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   798:         return self.embeddings.word_embeddings
   829:         return_dict: Optional[bool] = None,
   849:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
   856:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   937:             return_dict=return_dict,
   942:         if not return_dict:
   943:             return (sequence_output, pooled_output) + encoder_outputs[1:]
   945:         return BaseModelOutputWithPoolingAndCrossAttentions(
   977:         return self.lm_head.decoder
  1000:         return_dict: Optional[bool] = None,
  1024:             If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see
  1027:         Returns: `transformers.modeling_outputs.CausalLMOutputWithCrossAttentions` or `tuple(torch.FloatTensor)`
  1041:         >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
  1046:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1064:             return_dict=return_dict,
  1078:         if not return_dict:
  1080:             return ((lm_loss,) + output) if lm_loss is not None else output
  1082:         return CausalLMOutputWithCrossAttentions(
  1111:         return {"input_ids": input_ids, "attention_mask": attention_mask, "past_key_values": past_key_values}
  1120:         return reordered_past
  1148:         return self.lm_head.decoder
  1169:         return_dict: Optional[bool] = None,
  1179:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1193:             return_dict=return_dict,
  1203:         if not return_dict:
  1205:             return ((masked_lm_loss,) + output) if masked_lm_loss is not None else output
  1207:         return MaskedLMOutput(
  1236:         return x
  1280:         return_dict: Optional[bool] = None,
  1288:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1300:             return_dict=return_dict,
  1328:         if not return_dict:
  1330:             return ((loss,) + output) if loss is not None else output
  1332:         return SequenceClassifierOutput(
  1372:         return_dict: Optional[bool] = None,
  1380:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1404:             return_dict=return_dict,
  1417:         if not return_dict:
  1419:             return ((loss,) + output) if loss is not None else output
  1421:         return MultipleChoiceModelOutput(
  1465:         return_dict: Optional[bool] = None,
  1471:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1483:             return_dict=return_dict,
  1496:         if not return_dict:
  1498:             return ((loss,) + output) if loss is not None else output
  1500:         return TokenClassifierOutput(
  1528:         return x
  1564:         return_dict: Optional[bool] = None,
  1576:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1588:             return_dict=return_dict,
  1615:         if not return_dict:
  1617:             return ((total_loss,) + output) if total_loss is not None else output
  1619:         return QuestionAnsweringModelOutput(
  1637:     Returns: torch.Tensor
  1642:     return incremental_indices.long() + padding_idx

PythonVenv\Lib\site-packages\transformers\models\yolos\configuration_yolos.py:
  163:         return OrderedDict(
  171:         return 1e-4
  175:         return 12

PythonVenv\Lib\site-packages\transformers\models\yolos\convert_yolos_to_pytorch.py:
   67:     return config
  123:     return name
  147:     return orig_state_dict
  154:     return im
  178:     encoding = image_processor(images=prepare_img(), return_tensors="pt")

PythonVenv\Lib\site-packages\transformers\models\yolos\feature_extraction_yolos.py:
  33:     return _rgb_to_id(x)

PythonVenv\Lib\site-packages\transformers\models\yolos\image_processing_yolos.py:
   101:     return (max_height, max_width)
   133:     return (height, width)
   145:     is a tuple or list, the output image size is returned as is. If the desired output size is an integer, the output
   160:         return size
   162:     return get_size_with_aspect_ratio(image_size, size, max_size)
   168:     Returns a function that converts a numpy array to the framework of the input array.
   174:         return np.array
   178:         return tf.convert_to_tensor
   182:         return torch.tensor
   186:         return jnp.array
   196:         return arr.squeeze()
   199:         return arr.squeeze(axis=axis)
   201:         return arr
   216:     return norm_annotation
   222:     Return the maximum value across all indices of an iterable of values.
   224:     return [max(values_i) for values_i in zip(*values)]
   243:     return mask
   278:     return masks
   285:     return_segmentation_masks: bool = False,
   334:     if return_segmentation_masks:
   339:     return new_target
   350:     Returns:
   354:         return np.zeros((0, 4))
   374:     return np.stack([x_min, y_min, x_max, y_max], 1)
   382:     return_masks: bool = True,
   403:         if return_masks:
   416:     return new_target
   442:     return seg_img
   452:     return area
   461:     return scores, labels
   481:             The target size of the image, as returned by the preprocessing `resize` step.
   513:     return new_annotation
   525:     Returns:
   536:     return list(runs)
   547:     Returns:
   558:     return run_length_encodings
   564:     Binarize the given masks using `object_mask_threshold`, it returns the associated values of `masks`, `scores` and
   578:     Returns:
   587:     return masks[to_keep], scores[to_keep], labels[to_keep]
   606:     return mask_exists, mask_k
   667:     return segmentation, segments
   723:         if "pad_and_return_pixel_mask" in kwargs:
   724:             do_pad = kwargs.pop("pad_and_return_pixel_mask")
   757:             "return_segmentation_masks",
   770:             "return_tensors",
   786:         if "pad_and_return_pixel_mask" in kwargs:
   787:             image_processor_dict["pad_and_return_pixel_mask"] = kwargs.pop("pad_and_return_pixel_mask")
   788:         return super().from_dict(image_processor_dict, **kwargs)
   796:         return_segmentation_masks: bool = None,
   806:             return_segmentation_masks = False if return_segmentation_masks is None else return_segmentation_masks
   808:                 image, target, return_segmentation_masks, input_data_format=input_data_format
   811:             return_segmentation_masks = True if return_segmentation_masks is None else return_segmentation_masks
   816:                 return_masks=return_segmentation_masks,
   821:         return target
   874:         return image
   888:         return resize_annotation(annotation, orig_size=orig_size, target_size=size, resample=resample)
   917:         return rescale(image, rescale_factor, data_format=data_format, input_data_format=input_data_format)
   925:         return normalize_annotation(annotation, image_size=image_size)
   969:         return new_annotation
  1003:         return padded_image, annotation
  1010:         return_pixel_mask: bool = False,
  1011:         return_tensors: Optional[Union[str, TensorType]] = None,
  1018:         in the batch and optionally returns their corresponding pixel mask.
  1028:             return_pixel_mask (`bool`, *optional*, defaults to `True`):
  1029:                 Whether to return a pixel mask.
  1030:             return_tensors (`str` or `TensorType`, *optional*):
  1031:                 The type of tensors to return. Can be one of:
  1032:                     - Unset: Return a list of `np.ndarray`.
  1033:                     - `TensorType.TENSORFLOW` or `'tf'`: Return a batch of type `tf.Tensor`.
  1034:                     - `TensorType.PYTORCH` or `'pt'`: Return a batch of type `torch.Tensor`.
  1035:                     - `TensorType.NUMPY` or `'np'`: Return a batch of type `np.ndarray`.
  1036:                     - `TensorType.JAX` or `'jax'`: Return a batch of type `jax.numpy.ndarray`.
  1066:         if return_pixel_mask:
  1073:         encoded_inputs = BatchFeature(data=data, tensor_type=return_tensors)
  1077:                 BatchFeature(annotation, tensor_type=return_tensors) for annotation in padded_annotations
  1080:         return encoded_inputs
  1086:         return_segmentation_masks: bool = None,
  1099:         return_tensors: Optional[Union[TensorType, str]] = None,
  1122:             return_segmentation_masks (`bool`, *optional*, defaults to self.return_segmentation_masks):
  1123:                 Whether to return segmentation masks.
  1151:             return_tensors (`str` or `TensorType`, *optional*, defaults to self.return_tensors):
  1152:                 Type of tensors to return. If `None`, will return the list of images.
  1162:         if "pad_and_return_pixel_mask" in kwargs:
  1164:                 "The `pad_and_return_pixel_mask` argument is deprecated and will be removed in v4.33, "
  1167:             do_pad = kwargs.pop("pad_and_return_pixel_mask")
  1256:                     return_segmentation_masks=return_segmentation_masks,
  1304:             # Pads images and returns their mask: {'pixel_values': ..., 'pixel_mask': ...}
  1308:                 return_pixel_mask=False,
  1312:                 return_tensors=return_tensors,
  1319:             encoded_inputs = BatchFeature(data={"pixel_values": images}, tensor_type=return_tensors)
  1322:                     BatchFeature(annotation, tensor_type=return_tensors) for annotation in annotations
  1325:         return encoded_inputs
  1341:         Returns:
  1368:         return results
  1386:         Returns:
  1422:         return results

PythonVenv\Lib\site-packages\transformers\models\yolos\modeling_yolos.py:
    40:     replace_return_docstrings,
    72:         loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` are provided)):
    86:             Optional, only returned when auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)
    91:         hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
    95:         attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
   151:         return embeddings
   180:         return scale_pos_embed
   213:         return scale_pos_embed
   246:         return embeddings
   272:         return x.permute(0, 2, 1, 3)
   307:         return outputs
   339:         return context_layer, None
   358:         return hidden_states
   371:             return
   398:         return outputs
   422:         return hidden_states
   438:         return hidden_states
   484:         return outputs
   520:         return_dict: bool = True,
   556:         if not return_dict:
   557:             return tuple(v for v in [hidden_states, all_hidden_states, all_self_attentions] if v is not None)
   558:         return BaseModelOutput(
   615:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   618:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   620:         return_dict (`bool`, *optional*):
   621:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   644:         return self.embeddings.patch_embeddings
   671:         return_dict: Optional[bool] = None,
   677:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   698:             return_dict=return_dict,
   704:         if not return_dict:
   706:             return head_outputs + encoder_outputs[1:]
   708:         return BaseModelOutputWithPooling(
   728:         return pooled_output
   762:         return [{"logits": a, "pred_boxes": b} for a, b in zip(outputs_class[:-1], outputs_coord[:-1])]
   765:     @replace_return_docstrings(output_type=YolosObjectDetectionOutput, config_class=_CONFIG_FOR_DOC)
   772:         return_dict: Optional[bool] = None,
   782:         Returns:
   798:         >>> inputs = image_processor(images=image, return_tensors="pt")
   819:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   826:             return_dict=return_dict,
   858:                 intermediate = outputs.intermediate_hidden_states if return_dict else outputs[4]
   875:         if not return_dict:
   880:             return ((loss, loss_dict) + output) if loss is not None else output
   882:         return YolosObjectDetectionOutput(
   911:     return loss.sum() / num_boxes
   930:     Returns:
   943:     return loss.mean(1).sum() / num_boxes
  1002:         return losses
  1018:         return losses
  1042:         return losses
  1075:         return losses
  1081:         return batch_idx, source_idx
  1087:         return batch_idx, target_idx
  1098:         return loss_map[loss](outputs, targets, indices, num_boxes)
  1143:         return losses
  1165:         return x
  1211:         Returns:
  1244:         return [(torch.as_tensor(i, dtype=torch.int64), torch.as_tensor(j, dtype=torch.int64)) for i, j in indices]
  1251:         return t if t.dtype in (torch.float32, torch.float64) else t.float()
  1253:         return t if t.dtype in (torch.int32, torch.int64) else t.int()
  1266:     Returns:
  1270:     return (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])
  1287:     return iou, union
  1295:     Returns:
  1312:     return iou - (area - union) / area
  1322:     return maxes
  1338:         return NestedTensor(cast_tensor, cast_mask)
  1341:         return self.tensors, self.mask
  1344:         return str(self.tensors)
  1362:     return NestedTensor(tensor, mask)

PythonVenv\Lib\site-packages\transformers\models\yoso\convert_yoso_pytorch_to_pytorch.py:
  59:     return orig_key
  74:     return orig_state_dict

PythonVenv\Lib\site-packages\transformers\models\yoso\modeling_yoso.py:
    64:         return [src_folder / file for file in files]
    80:         return out
    84:         return input_tensors
    92:         return out
    94:         return nn.functional.normalize(input_tensors, p=2, dim=-1)
   113:     return query_hash.int(), query_hash.int()
   128:         return cumulation_value
   144:         return None, None, grad_query, grad_key, grad_value, None
   184:         return cumulation_value
   233:         return None, None, grad_query, grad_key, grad_value, None
   294:         return embeddings
   352:         return layer.permute(0, 2, 1, 3)
   435:         return outputs
   450:         return hidden_states
   462:             return
   482:         return outputs
   498:         return hidden_states
   513:         return hidden_states
   537:         return outputs
   542:         return layer_output
   559:         return_dict=True,
   585:         if not return_dict:
   586:             return tuple(v for v in [hidden_states, all_hidden_states, all_self_attentions] if v is not None)
   587:         return BaseModelOutputWithCrossAttentions(
   609:         return hidden_states
   633:         return hidden_states
   644:         return prediction_scores
   725:             Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
   728:             Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
   730:         return_dict (`bool`, *optional*):
   731:             Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
   751:         return self.embeddings.word_embeddings
   780:         return_dict: Optional[bool] = None,
   786:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   831:             return_dict=return_dict,
   835:         if not return_dict:
   836:             return (sequence_output,) + encoder_outputs[1:]
   838:         return BaseModelOutputWithCrossAttentions(
   860:         return self.cls.predictions.decoder
   883:         return_dict: Optional[bool] = None,
   891:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   902:             return_dict=return_dict,
   913:         if not return_dict:
   915:             return ((masked_lm_loss,) + output) if masked_lm_loss is not None else output
   917:         return MaskedLMOutput(
   943:         return x
   978:         return_dict: Optional[bool] = None,
   986:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
   997:             return_dict=return_dict,
  1025:         if not return_dict:
  1027:             return ((loss,) + output) if loss is not None else output
  1029:         return SequenceClassifierOutput(
  1070:         return_dict: Optional[bool] = None,
  1078:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1100:             return_dict=return_dict,
  1116:         if not return_dict:
  1118:             return ((loss,) + output) if loss is not None else output
  1120:         return MultipleChoiceModelOutput(
  1162:         return_dict: Optional[bool] = None,
  1168:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1179:             return_dict=return_dict,
  1201:         if not return_dict:
  1203:             return ((loss,) + output) if loss is not None else output
  1205:         return TokenClassifierOutput(
  1249:         return_dict: Optional[bool] = None,
  1261:         return_dict = return_dict if return_dict is not None else self.config.use_return_dict
  1272:             return_dict=return_dict,
  1299:         if not return_dict:
  1301:             return ((total_loss,) + output) if total_loss is not None else output
  1303:         return QuestionAnsweringModelOutput(

PythonVenv\Lib\site-packages\transformers\onnx\config.py:
  135:         Returns:
  138:         return cls(config, task=task)
  146:         Returns:
  156:         Returns:
  160:         return copy.deepcopy(common_outputs)
  167:         Returns:
  171:             return {"use_cache": False}
  173:         return None
  180:         Returns:
  184:         return OnnxConfig.default_fixed_batch
  191:         Returns:
  194:         return OnnxConfig.default_fixed_sequence
  201:         Returns:
  204:         return OnnxConfig.default_fixed_num_choices
  211:         Returns:
  214:         return DEFAULT_ONNX_OPSET
  221:         Returns:
  224:         return 1e-5
  231:         Returns:
  237:             return version.parse(get_torch_version()) >= self.torch_onnx_minimum_version
  239:             return False
  249:         Returns:
  253:         return (
  265:         return images
  278:         return audio_data
  325:         Returns:
  371:                 return dict(tokenized_input.convert_to_tensors(tensor_type=framework))
  372:             return dict(preprocessor(dummy_input, return_tensors=framework))
  382:             return dict(preprocessor(images=dummy_input, return_tensors=framework))
  387:             return dict(preprocessor(images=dummy_input, return_tensors=framework))
  394:             return dict(preprocessor(dummy_input, return_tensors=framework))
  409:         Returns:
  412:         return reference_model_inputs
  434:         Returns:
  440:         return {f"{name}.{idx}": item for idx, item in enumerate(chain.from_iterable(field))}
  462:         Returns:
  465:         return cls(config, task=task, use_past=True)
  473:         return common_outputs
  478:             return {"use_cache": self.use_past}
  480:         return None
  493:         return self._config.num_layers
  506:         return self._config.num_attention_heads
  548:         return common_inputs
  587:         return flattened_output
  606:         return common_outputs
  622:         return num_layers
  638:         return num_attention_heads
  707:         return common_inputs

PythonVenv\Lib\site-packages\transformers\onnx\convert.py:
  108:     Returns:
  130:             model.config.return_dict = True
  182:     return matched_inputs, onnx_outputs
  208:     Returns:
  227:     model.config.return_dict = True
  248:     return matched_inputs, onnx_outputs
  278:     Returns:
  312:         return export_pytorch(preprocessor, model, config, opset, output, tokenizer=tokenizer, device=device)
  314:         return export_tensorflow(preprocessor, model, config, opset, output, tokenizer=tokenizer)
  445:     :param model_inputs: :param config_inputs: :return:
  460:     return is_ok, ordered_inputs

PythonVenv\Lib\site-packages\transformers\onnx\features.py:
   65:     Returns:
   82:     return mapping
  569:         Returns:
  580:         return FeaturesManager._SUPPORTED_MODEL_TYPE[model_type]
  584:         return feature.replace("-with-past", "")
  612:         Returns:
  626:         return task_to_automodel[task]
  644:         Returns:
  649:             return framework
  676:         return framework
  694:         Returns:
  709:         return model
  722:         Returns:
  734:         return model.config.model_type, FeaturesManager._SUPPORTED_MODEL_TYPE[model_type][feature]
  746:         Returns:
  749:         return FeaturesManager._SUPPORTED_MODEL_TYPE[model_type][feature]

PythonVenv\Lib\site-packages\transformers\onnx\utils.py:
   32:         Returns:
   35:         return sizeof(self.value)
   46:     Returns:
   54:     return dimension
   65:     Returns:
   68:     return num_parameters * dtype.size
   78:     Returns:
   80:             If a processor is found, it is returned. Otherwise, if a tokenizer or a feature extractor exists, it is
   81:             returned. If both a tokenizer and a feature extractor exist, an error is raised. The function returns
   88:         return AutoProcessor.from_pretrained(model_name)
  105:             return None
  107:             return tokenizer
  109:             return feature_extractor

PythonVenv\Lib\site-packages\transformers\pipelines\audio_classification.py:
   63:     return audio
  126:                 The number of top labels that will be returned by the pipeline. If the provided number is `None` or
  130:         Return:
  136:         return super().__call__(inputs, **kwargs)
  145:         return {}, {}, postprocess_params
  198:             inputs, sampling_rate=self.feature_extractor.sampling_rate, return_tensors="pt"
  200:         return processed
  204:         return model_outputs
  215:         return labels

PythonVenv\Lib\site-packages\transformers\pipelines\feature_extraction.py:
  12:         return_tensors (`bool`, *optional*):
  13:             If `True`, returns a tensor according to the specified framework, otherwise returns a list.""",
  26:     >>> result = extractor("This is a simple test.", return_tensors=True)
  40:     def _sanitize_parameters(self, truncation=None, tokenize_kwargs=None, return_tensors=None, **kwargs):
  54:         if return_tensors is not None:
  55:             postprocess_params["return_tensors"] = return_tensors
  57:         return preprocess_params, {}, postprocess_params
  60:         model_inputs = self.tokenizer(inputs, return_tensors=self.framework, **tokenize_kwargs)
  61:         return model_inputs
  65:         return model_outputs
  67:     def postprocess(self, model_outputs, return_tensors=False):
  69:         if return_tensors:
  70:             return model_outputs[0]
  72:             return model_outputs[0].tolist()
  74:             return model_outputs[0].numpy().tolist()
  83:         Return:
  86:         return super().__call__(*args, **kwargs)

PythonVenv\Lib\site-packages\transformers\quantizers\auto.py:
   87:         return target_cls.from_dict(quantization_config_dict)
  100:         return quantization_config
  132:         return target_cls(quantization_config, **kwargs)
  137:         return cls.from_config(quantization_config)
  169:         return quantization_config

PythonVenv\Lib\site-packages\transformers\quantizers\base.py:
   76:         return torch_dtype
   88:         return device_map
  100:         return torch_dtype
  110:         return missing_keys
  114:         returns dtypes for modules that are not quantized - used for the computation of the device_map in case
  125:         return {
  133:         return max_memory
  148:         return False
  164:         If no explicit check are needed, simply return nothing.
  166:         return
  182:         return self._process_model_before_weight_loading(model, **kwargs)
  195:         return self._process_model_after_weight_loading(model, **kwargs)
  207:         return model

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_aqlm.py:
  68:         return torch_dtype
  83:         return model
  89:             return True
  94:             return False
  98:         return True

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_awq.py:
   75:         return torch_dtype
  114:             return False
  118:             return False
  120:         return True
  126:         return version.parse(importlib.metadata.version("autoawq")) >= version.parse(MIN_AWQ_VERSION_FOR_PEFT)

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_bnb_4bit.py:
  106:             return CustomDtype.INT4
  128:             return True
  132:             return True
  134:             return False
  165:             return
  224:         return max_memory
  238:         return torch_dtype
  249:         return device_map
  297:         return model
  308:             return False
  310:         return True
  314:         return True
  322:         return model

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_bnb_8bit.py:
  104:         return max_memory
  117:         return torch_dtype
  127:         return device_map
  132:         return torch.int8
  153:             return True
  154:         return False
  222:         return model
  277:             return False
  279:         return True
  283:         return version.parse(importlib.metadata.version("bitsandbytes")) >= version.parse("0.37.0")
  291:         return model

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_eetq.py:
   93:         return torch_dtype
  111:                 return False
  115:                 return True
  116:         return False
  139:         return model
  166:         return True
  170:         return True

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_gptq.py:
  69:         return torch_dtype
  90:         return True
  94:         return True

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_hqq.py:
   42:     return parent
  104:         return isinstance(module, torch.nn.Linear) and (tensor_name == "weight")
  171:             return out
  174:         return hqq_layer
  192:         return model
  196:         return False
  200:         return True

PythonVenv\Lib\site-packages\transformers\quantizers\quantizer_quanto.py:
   75:         return device_map
   81:         return torch_dtype
   96:         return [k for k in missing_keys if k not in not_missing_keys]
  118:                     return False
  124:             return not module.frozen
  126:             return False
  130:         return max_memory
  162:             return target_dtype
  192:         return model
  196:         return False
  200:         return False

PythonVenv\Lib\site-packages\transformers\quantizers\quantizers_utils.py:
  26:     return module, tensor_name

PythonVenv\Lib\site-packages\transformers\sagemaker\training_args_sm.py:
   39:             return False
   41:         return False
   49:             return False
   51:         return False
   53:     return importlib.util.find_spec("smdistributed") is not None
  121:         return device
  126:             return smp.dp_size()
  128:         return super().world_size
  132:         return not is_sagemaker_model_parallel_available()
  136:         return False

PythonVenv\Lib\site-packages\transformers\utils\__init__.py:
  31:     replace_return_docstrings,
  41:     can_return_loss,

PythonVenv\Lib\site-packages\transformers\utils\backbone_utils.py:
   87:         - `out_indices` and `out_features` set: input `out_indices` and `out_features` are returned.
  101:     return out_features, out_indices
  132:     return output_features, output_indices
  190:         return self._out_features
  203:         return self._out_indices
  218:         return {stage: self.num_features[i] for i, stage in enumerate(self.stage_names)}
  222:         return [self.out_feature_channels[name] for name in self.out_features]
  227:         return self(*args, **filtered_kwargs)
  234:         return_dict: Optional[bool] = None,
  246:         return output
  256:         return self._out_features
  269:         return self._out_indices
  288:         return output
  295:     If the config is from the backbone model itself, then we return a backbone model with randomly initialized
  326:         return AutoBackbone.from_config(config=config, **backbone_kwargs)
  350:     return backbone

PythonVenv\Lib\site-packages\transformers\utils\doc.py:
    26:         return fn
    28:     return docstring_decorator
    48:         return fn
    50:     return docstring_decorator
    56:         return fn
    58:     return docstring_decorator
    61: PT_RETURN_INTRODUCTION = r"""
    62:     Returns:
    64:         `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`) comprising various
    70: TF_RETURN_INTRODUCTION = r"""
    71:     Returns:
    73:         `return_dict=False` is passed or when `config.return_dict=False`) comprising various elements depending on the
    80:     """Returns the indentation in the first line of t"""
    82:     return "" if search is None else search.groups()[0]
   108:     return "\n".join(blocks)
   113:     Prepares the return part of the docstring using `output_type`.
   131:     # Add the return introduction
   133:     intro = TF_RETURN_INTRODUCTION if output_type.__name__.startswith("TF") else PT_RETURN_INTRODUCTION
   151:     return result
   176:     ...     "HuggingFace is a company based in Paris and New York", add_special_tokens=False, return_tensors="pt"
   210:     >>> inputs = tokenizer(question, text, return_tensors="pt")
   242:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
   270:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
   300:     >>> inputs = tokenizer("The capital of France is {mask}.", return_tensors="pt")
   312:     >>> labels = tokenizer("The capital of France is Paris.", return_tensors="pt")["input_ids"]
   332:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
   354:     >>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors="pt", padding=True)
   373:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
   396:     >>> inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
   422:     >>> inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
   432:     >>> inputs["labels"] = processor(text=dataset[0]["text"], return_tensors="pt").input_ids
   457:     >>> inputs = feature_extractor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
   493:     >>> inputs = feature_extractor(dataset[0]["audio"]["array"], return_tensors="pt", sampling_rate=sampling_rate)
   523:     ...     [d["array"] for d in dataset[:2]["audio"]], sampling_rate=sampling_rate, return_tensors="pt", padding=True
   555:     >>> inputs = image_processor(image, return_tensors="pt")
   580:     >>> inputs = image_processor(image, return_tensors="pt")
   622:     ...     "HuggingFace is a company based in Paris and New York", add_special_tokens=False, return_tensors="tf"
   656:     >>> inputs = tokenizer(question, text, return_tensors="tf")
   689:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="tf")
   720:     >>> inputs = tokenizer("The capital of France is {mask}.", return_tensors="tf")
   733:     >>> labels = tokenizer("The capital of France is Paris.", return_tensors="tf")["input_ids"]
   753:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="tf")
   774:     >>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors="tf", padding=True)
   793:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="tf")
   814:     >>> inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="tf")
   839:     >>> inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="tf")
   850:     >>> inputs["labels"] = processor(text=dataset[0]["text"], return_tensors="tf").input_ids
   872:     >>> inputs = image_processor(image, return_tensors="tf")
   895:     >>> inputs = image_processor(image, return_tensors="tf")
   929:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="jax")
   946:     >>> inputs = tokenizer(question, text, return_tensors="jax")
   963:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="jax")
   979:     >>> inputs = tokenizer("The capital of France is {mask}.", return_tensors="jax")
   995:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="jax")
  1015:     >>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors="jax", padding=True)
  1031:     >>> inputs = tokenizer("Hello, my dog is cute", return_tensors="np")
  1061:     return docstring
  1157:         return fn
  1159:     return docstring_decorator
  1162: def replace_return_docstrings(output_type=None, config_class=None):
  1167:         while i < len(lines) and re.search(r"^\s*Returns?:\s*$", lines[i]) is None:
  1175:                 f"The function {fn} should have an empty 'Return:' or 'Returns:' in its docstring as placeholder, "
  1179:         return fn
  1181:     return docstring_decorator
  1185:     """Returns a copy of a function f."""
  1190:     return g

PythonVenv\Lib\site-packages\transformers\utils\fx.py:
   119:     return model_class_names
   205:     return torch.empty(*input.shape, self.weight.shape[-1], device="meta", dtype=self.weight.dtype)
   211:     return torch.empty(*input.shape, weight.shape[-1], device="meta", dtype=weight.dtype)
   215:     return input
   219:     return input
   223:     return torch.empty(input.shape[:-1] + (self.out_features,), device="meta")
   227:     return x
   231:     return x
   237:     return x
   241:     # torch.where returns the broadcasted tensor of condition, x, and y,
   243:     return condition.to(device="meta") + x.to(device="meta") + y.to(device="meta")
   249:     return input
   270:     return torch.empty((end - start) // step, dtype=dtype, device="meta")
   282:     return torch.full(*args, **kwargs_without_device, device="meta")
   296:     return torch.empty(final_shape, device="meta")
   308:     return torch.empty(shape, device="meta")
   313:         return torch.empty_like(other, device="meta")
   315:         return torch.empty_like(input, device="meta")
   322:     return torch.empty(shape, device="meta")
   326:     return torch_add(input, other, out=out)
   330:     return torch_mul(self, other)
   365:         return torch.tensor(0.0, device="meta")
   366:     return torch.empty(*shape, device="meta")
   374:     return torch.empty(batch_size, n, p, device="meta")
   380:     return torch_bmm(batch1, batch2)
   384:     return torch_baddbmm(self, batch1, batch2, beta=beta, alpha=alpha, out=out)
   390:     return torch.einsum(equation, *concrete_operands).to("meta")
   397:     return torch.empty(shape, device="meta")
   417:     return torch.empty(*shape, device="meta")
   423:     return torch.empty(*shape, device="meta")
   427:     return torch_index_select(self, dim, index)
   433:     return torch.empty(*shape, device="meta")
   437:     return torch_gather(self, dim, index)
   441:     return input
   445:     return input
   449:     return self
   467:     return torch.empty(shape, device="meta")
   488:     return torch.empty(shape, device="meta")
   505:     return torch.empty(shape, device="meta")
   509:     return torch_squeeze(self, dim)
   517:     return torch.empty(shape, device="meta")
   521:     return torch_unsqueeze(self, dim)
   527:         return output.to("meta")
   529:         return tuple(map(output, lambda x: x.to("meta")))
   536:     return torch.empty(shape, device="meta")
   544:     return torch.empty((*query.shape[:-2], target_length, head_dim), device="meta")
   552:     return torch.empty(shape, device="meta")
   560:     return torch.empty(shape, device="meta")
   568:     return torch.empty(shape, device="meta")
   577:             return concrete
   578:         return t
   586:         return operator.getitem(torch.empty_like(a, device="cpu"), b).to("meta")
   587:     return operator.getitem(a, b)
   652:         return self.tracer.create_proxy("call_method", "size", (self,), {})
   658:         return MetaDeviceAttribute(self, "device")
   662:             return len(self._metadata)
   663:         return super().__len__()
   667:             return self._metadata
   668:         return super().__bool__()
   672:             return self.__getattribute__(k)
   675:         return HFAttribute(self, k)
   678:         return self.tracer.create_proxy("call_function", operator.setitem, (self, indices, values), {})
   682:             return key in self._metadata
   683:         return super().__contains__(key)
   702:         return self._node
   705:         return self.tracer.create_proxy("call_method", self.attr, (self.root,) + args, kwargs)
   724:         return self.tracer._CLASSES_TO_PATCH[self._orig_cache_cls]
   735:             return function(*args, **kwargs)
   756:             return tracer.create_proxy(op_type, target, args, kwargs, proxy_factory_fn=proxy_factory_fn)
   758:             return function(*args, **kwargs)
   760:     return wrapper
   792:         return cls
   800:     return wrapper, target
   804:     """Returns the underlying metadata for HFProxies, and behaves like the identity for the others."""
   806:         return "meta"
   810:         return v._metadata
   811:     return v
   821:         return cache_proxy
   823:     return cache_proxy_factory_fn
   856:     return value
  1053:         return inputs_dict
  1060:             return rv
  1122:         return rv
  1127:             return attr_val
  1143:                         return parameter_proxy_cache[n]
  1144:                 return None
  1151:                     return maybe_parameter_proxy
  1158:                     return maybe_buffer_proxy
  1160:             return attr_val
  1164:         return self._module_getattr(attr, attr_val, parameter_proxy_cache)
  1168:             return forward(*args, **kwargs)
  1170:         return super().call_module(m, forward, args, kwargs)
  1173:         return HFProxy(node, self)
  1220:         Traces `root` and returns the corresponding FX `torch.fx.Graph` representation. `root` can either be a
  1239:         Returns:
  1292:                 return value.to("meta")
  1293:             return value
  1333:             # Without this, return type annotation "Tuple" is causing code execution failure.
  1337:         return self.graph
  1344:         return any(isinstance(attr, Proxy) for attr in mod.__dict__.values())
  1353:             return ""
  1368:         return path
  1373:         a submodule named `foo`, which has a submodule named `bar`, passing `bar` into this function will return the
  1380:             return super().path_of_module(mod)
  1384:                 return path
  1388:         return (not self._stateless_mod_instanciation_depends_on_proxies(m)) and super().is_leaf_module(
  1395:         This is what happens when ** is called on a proxy. This should return an iterator if ** is supposed to work in
  1400:             return attribute._metadata
  1401:         return attribute
  1415:     return {p.name: p.default for p in sig.parameters.values() if p.name not in input_names}
  1419:     return model.__class__.__name__ in _SUPPORTED_MODELS
  1449:     Returns:
  1492:     return traced

PythonVenv\Lib\site-packages\transformers\utils\generic.py:
   53:             return self
   61:         return cached
   73:         return 1
   75:         return 0
   86:         return "pt"
   88:         return "tf"
   90:         return "jax"
   92:         return "np"
   94:         return "mlx"
   99:     Returns an (ordered since we are in Python 3.7+) dictionary framework to test function, which places the framework
  115:     return {f: framework_to_test[f] for f in frameworks}
  127:             return True
  131:         return True
  137:             return True
  139:     return False
  143:     return isinstance(x, np.ndarray)
  150:     return _is_numpy(x)
  156:     return isinstance(x, torch.Tensor)
  163:     return False if not is_torch_available() else _is_torch(x)
  169:     return isinstance(x, torch.device)
  176:     return False if not is_torch_available() else _is_torch_device(x)
  186:             return False
  187:     return isinstance(x, torch.dtype)
  194:     return False if not is_torch_available() else _is_torch_dtype(x)
  200:     return isinstance(x, tf.Tensor)
  207:     return False if not is_tf_available() else _is_tensorflow(x)
  215:         return tf.is_symbolic_tensor(x)
  216:     return type(x) == tf.Tensor
  224:     return False if not is_tf_available() else _is_tf_symbolic_tensor(x)
  230:     return isinstance(x, jnp.ndarray)
  237:     return False if not is_flax_available() else _is_jax(x)
  243:     return isinstance(x, mx.array)
  250:     return False if not is_mlx_available() else _is_mlx(x)
  266:         return {k: to_py_obj(v) for k, v in obj.items()}
  268:         return [to_py_obj(o) for o in obj]
  274:             return framework_to_py_obj[framework](obj)
  278:         return obj.tolist()
  280:         return obj
  296:         return {k: to_numpy(v) for k, v in obj.items()}
  298:         return np.array(obj)
  304:             return framework_to_numpy[framework](obj)
  306:     return obj
  349:         # issubclass() would return True for issubclass(ModelOutput, ModelOutput) when False is needed
  430:             return inner_dict[k]
  432:             return self.to_tuple()[k]
  448:             return super().__reduce__()
  451:         return callable, args, *remaining
  457:         return tuple(self[k] for k in self.keys())
  464:         return list(output.values()), list(output.keys())
  471:         return output_type(**dict(zip(context, values)))
  513:     Possible values for the `return_tensors` argument in [`PreTrainedTokenizerBase.__call__`]. Useful for
  542: def can_return_loss(model_class):
  544:     Check if a given model can return loss.
  558:         if p == "return_loss" and signature.parameters[p].default is True:
  559:             return True
  561:     return False
  581:         return [p for p in signature.parameters if "label" in p or p in ("start_positions", "end_positions")]
  583:         return [p for p in signature.parameters if "label" in p]
  597:     return dict(_flatten_dict(d, parent_key, delimiter))
  615:         return np.transpose(array, axes=axes)
  617:         return array.T if axes is None else array.permute(*axes)
  621:         return tf.transpose(array, perm=axes)
  625:         return jnp.transpose(array, axes=axes)
  636:         return np.reshape(array, newshape)
  638:         return array.reshape(*newshape)
  642:         return tf.reshape(array, newshape)
  646:         return jnp.reshape(array, newshape)
  657:         return np.squeeze(array, axis=axis)
  659:         return array.squeeze() if axis is None else array.squeeze(dim=axis)
  663:         return tf.squeeze(array, axis=axis)
  667:         return jnp.squeeze(array, axis=axis)
  678:         return np.expand_dims(array, axis)
  680:         return array.unsqueeze(dim=axis)
  684:         return tf.expand_dims(array, axis=axis)
  688:         return jnp.expand_dims(array, axis=axis)
  698:         return np.size(array)
  700:         return array.numel()
  704:         return tf.size(array)
  706:         return array.size
  721:     return auto_map
  733:             return "tf"
  735:             return "pt"
  737:             return "flax"

PythonVenv\Lib\site-packages\transformers\utils\hp_naming.py:
   33:             return ""
   38:             return info["short_word"][word]
   54:                 return s
   67:         return short_word
   84:                 return shortname
   86:         return param_name
   97:             return
  135:         return "_".join(name)
  162:         return parameters

PythonVenv\Lib\site-packages\transformers\utils\hub.py:
    81:     return _is_offline_mode
   149: def _get_cache_file_to_return(
   155:         return resolved_file
   156:     return None
   161:     return parsed.scheme in ("http", "https")
   170:     Returns a list of tuples representing model binaries that are cached locally. Each tuple has shape `(model_url,
   178:     Returns:
   186:         return []
   200:     return cached_models
   226:     return sagemaker_object
   239:         return ua + "; telemetry/off"
   249:     return ua
   257:         return commit_hash
   261:         return None
   263:     return commit_hash if REGEX_COMMIT_HASH.match(commit_hash) else None
   329:     Returns:
   330:         `Optional[str]`: Returns the resolved file (to the cache folder if downloaded from a repo).
   350:     #     _raise_exceptions_for_gated_repo: if False, do not raise an exception for gated repo error but return
   352:     #     _raise_exceptions_for_missing_entries: if False, do not raise an exception for missing entries but return
   354:     #     _raise_exceptions_for_connection_errors: if False, do not raise an exception for connection errors but return
   375:                 return None
   376:         return resolved_file
   384:         # If the file is cached under that commit hash, we return it directly.
   390:                 return resolved_file
   392:                 return None
   414:         resolved_file = _get_cache_file_to_return(path_or_repo_id, full_filename, cache_dir, revision)
   416:             return resolved_file
   435:         resolved_file = _get_cache_file_to_return(path_or_repo_id, full_filename, cache_dir, revision)
   441:             return resolved_file
   450:             return None
   458:         resolved_file = _get_cache_file_to_return(path_or_repo_id, full_filename, cache_dir, revision)
   460:             return resolved_file
   466:     return resolved_file
   471: #       there is a connection error, `cached_repo` will return None while `get_file_from_repo` will raise an error.
   528:     Returns:
   529:         `Optional[str]`: Returns the resolved file (to the cache folder if downloaded from a repo) or `None` if the
   551:     return cached_file(
   579:     Returns:
   592:     return tmp_file
   609:     this repo, but will return False for regular connection errors.
   624:         return os.path.isfile(os.path.join(path_or_repo, filename))
   632:         return True
   650:         # We return false for EntryNotFoundError (logical) as well as any connection error.
   651:         return False
   692:         return url.repo_id
   696:         Returns the list of files with their last modification timestamp.
   698:         return {f: os.path.getmtime(os.path.join(working_dir, f)) for f in os.listdir(working_dir)}
   760:         return create_commit(
   896:             return self._upload_modified_files(
   919:         return
   948:         size (`int` or `str`): The size to convert. Will be directly returned if an `int`.
   957:         return size
   959:         return int(size[:-3]) * (2**30)
   961:         return int(size[:-3]) * (2**20)
   963:         return int(size[:-3]) * (2**10)
   966:         return int_size // 8 if size.endswith("b") else int_size
   969:         return int_size // 8 if size.endswith("b") else int_size
   972:         return int_size // 8 if size.endswith("b") else int_size
   996:     - returns the list of paths to all the shards, as well as some metadata.
  1027:         return shard_filenames, sharded_metadata
  1069:     return cached_filenames, sharded_metadata
  1077:     Returns a list for all files cached with appropriate metadata.
  1084:         return []
  1098:     return cached_files
  1107:         return None
  1110:     return {"repo": cache_repo, "revision": revision, "filename": filename}
  1147:     return model_card
  1241:         return all(job.done() for job in self.jobs)

PythonVenv\Lib\site-packages\transformers\utils\import_utils.py:
    41: def _is_package_available(pkg_name: str, return_version: bool = False) -> Union[Tuple[bool, str], bool]:
    68:     if return_version:
    69:         return package_exists, package_version
    71:         return package_exists
    95: _accelerate_available, _accelerate_version = _is_package_available("accelerate", return_version=True)
   123: _ipex_available, _ipex_version = _is_package_available("intel_extension_for_pytorch", return_version=True)
   165: _sudachipy_available, _sudachipy_version = _is_package_available("sudachipy", return_version=True)
   181:     _torch_available, _torch_version = _is_package_available("torch", return_version=True)
   260:     _flax_available, _flax_version = _is_package_available("flax", return_version=True)
   262:         _jax_available, _jax_version = _is_package_available("jax", return_version=True)
   281:     _torch_xla_available, _torch_xla_version = _is_package_available("torch_xla", return_version=True)
   287:     return _kenlm_available
   291:     return _cv2_available
   295:     return _torch_available
   299:     return _hqq_available
   303:     return _pygments_available
   307:     return _torch_version
   312:         return False
   314:         return False
   320:     return version.parse(_torch_version) >= version.parse("2.1.1")
   324:     return _torchvision_available
   328:     return _galore_torch_available
   332:     return _pyctcdecode_available
   336:     return _librosa_available
   340:     return _essentia_available
   344:     return _pretty_midi_available
   351:         return torch.cuda.is_available()
   353:         return False
   361:             return False
   363:             return _is_package_available("mamba_ssm")
   364:     return False
   372:             return False
   373:         return _is_package_available("causal_conv1d")
   374:     return False
   382:             return torch.backends.mps.is_available() and torch.backends.mps.is_built()
   383:     return False
   388:         return False
   392:     return torch.cuda.is_available() and torch.cuda.is_bf16_supported()
   397:         return False
   405:         return False
   407:     return True
   418:     return is_torch_bf16_gpu_available()
   424:         return False
   441:         # most backends should return `RuntimeError` however this is not guaranteed.
   442:         return False
   444:     return True
   450:         return False
   455:         return is_torch_bf16_gpu_available()
   462:         # most backends should return `RuntimeError` however this is not guaranteed.
   463:         return False
   465:     return True
   470:         return False
   475:         return False
   477:         return False
   479:         return False
   481:         return False
   483:     return True
   487:     return _torch_fx_available
   491:     return _peft_available
   495:     return _bs4_available
   499:     return _tf_available
   503:     return _coloredlogs_available
   507:     return _tf2onnx_available
   511:     return _onnx_available
   515:     return _openai_available
   519:     return _flax_available
   523:     return _ftfy_available
   527:     return _g2p_en_available
   540:         return False
   548:                 return True
   550:                 return False
   551:         return True
   552:     return False
   564:         return False
   569:         return torch_xla.runtime.device_type() in ["GPU", "CUDA"]
   571:         return torch_xla.runtime.device_type() == "TPU"
   573:     return True
   579:         return is_torch_xla_available()
   580:     return False
   587:         return False
   596:             return torch.npu.is_available()
   598:             return False
   599:     return hasattr(torch, "npu") and torch.npu.is_available()
   606:         return False
   619:             return torch.mlu.is_available()
   621:             return False
   622:     return hasattr(torch, "mlu") and torch.mlu.is_available()
   627:         return False
   631:         return True
   633:         return False
   638:         return False
   644:     return hasattr(torch, "compile")
   649:         return False
   653:         return dynamo.is_compiling()
   655:         return False
   660:         return False
   661:     return importlib.util.find_spec("torch_tensorrt.fx") is not None
   665:     return _datasets_available
   669:     return _detectron2_available
   673:     return _rjieba_available
   677:     return _psutil_available
   681:     return _py3nvml_available
   685:     return _sacremoses_available
   689:     return _apex_available
   693:     return _aqlm_available
   697:     return _av_available
   702:     Code comes from *torch.utils.cpp_extension.is_ninja_available()*. Returns `True` if the
   708:         return False
   710:         return True
   715:         return str(version.parse(full_version).major) + "." + str(version.parse(full_version).minor)
   718:         return False
   727:         return False
   728:     return True
   735:         return False
   744:             return torch.xpu.is_available()
   746:             return False
   747:     return hasattr(torch, "xpu") and torch.xpu.is_available()
   752:         return False
   758:     return _bitsandbytes_available and torch.cuda.is_available()
   763:         return False
   766:         return False
   772:         return False
   775:         return version.parse(importlib.metadata.version("flash_attn")) >= version.parse("2.1.0")
   778:         return version.parse(importlib.metadata.version("flash_attn")) >= version.parse("2.0.4")
   780:         return False
   785:         return False
   787:     return version.parse(importlib.metadata.version("flash_attn")) >= version.parse("2.1.0")
   791:     return _torchdistx_available
   795:     return _faiss_available
   799:     return _scipy_available
   803:     return _sklearn_available
   807:     return _sentencepiece_available
   811:     return _is_seqio_available
   815:     return _is_gguf_available
   820:         return False
   821:     return importlib.util.find_spec("google.protobuf") is not None
   825:     return _accelerate_available and version.parse(_accelerate_version) >= version.parse(min_version)
   829:     return is_torch_available() and version.parse(_torch_version) >= version.parse(min_version)
   833:     return _optimum_available
   837:     return _auto_awq_available
   841:     return _quanto_available
   845:     return _auto_gptq_available
   849:     return _eetq_available
   853:     return _levenshtein_available
   857:     return _optimum_available and _is_package_available("optimum.neuron")
   861:     return _safetensors_available
   865:     return _tokenizers_available
   878:                 return False
   880:     return _pil_available
   884:     return _pytesseract_available
   888:     return _pytest_available
   892:     return _spacy_available
   896:     return is_tf_available() and _tensorflow_text_available
   900:     return is_tensorflow_text_available() and _keras_nlp_available
   916:         return importlib.util.find_spec("IPython") is not None
   918:         return False
   922:     return _pytorch_quantization_available
   926:     return _tensorflow_probability_available
   930:     return _pandas_available
   940:             return False
   942:         return False
   944:     return _smdistributed_available
   954:             return False
   956:         return False
   964:             return False
   966:         return False
   968:     return _smdistributed_available
   972:     return "SAGEMAKER_JOB_NAME" in os.environ
   976:     return _soundfile_available
   980:     return _timm_available
   984:     return _natten_available
   988:     return _nltk_available
   992:     return _torchaudio_available
   997:     return _torchaudio_available
  1001:     return _phonemizer_available
  1012:             return fn(*args, **kwargs)
  1014:     return wrapper
  1018:     return _is_ccl_available
  1022:     return _decord_available
  1026:     return _sudachipy_available
  1030:     return _sudachipy_version
  1035:         return False
  1039:     return version.parse(_sudachipy_version) >= version.parse("0.6.8")
  1043:     return (importlib.util.find_spec("rhoknp") is not None) and (shutil.which("jumanpp") is not None)
  1047:     return importlib.util.find_spec("pyximport") is not None
  1051:     return _jieba_available
  1055:     return _jinja_available
  1059:     return _mlx_available
  1468:     Metaclass for the dummy objects. Any class inheriting from it will return the ImportError generated by
  1474:             return super().__getattribute__(key)
  1482:         return isinstance(x, torch.fx.Proxy)
  1483:     return False
  1517:         return result
  1521:             return self._objects[name]
  1531:         return value
  1535:             return importlib.import_module("." + module_name, self.__name__)
  1543:         return (self.__class__, (self._name, self.__file__, self._import_structure))
  1557:     Returns:
  1566:     return module

PythonVenv\Lib\site-packages\transformers\utils\logging.py:
   59:     If TRANSFORMERS_VERBOSITY env var is set to one of the valid choices return that as the new default level. If it is
   65:             return log_levels[env_level_str]
   71:     return _default_log_level
   75:     return __name__.split(".")[0]
   79:     return logging.getLogger(_get_library_name())
   88:             return
  113:             return
  122:     return log_levels
  150:     Return a logger with the specified name.
  159:     return logging.getLogger(name)
  164:     Return the current level for the ü§ó Transformers's root logger as an int.
  166:     Returns:
  182:     return _get_library_root_logger().getEffectiveLevel()
  206:     return set_verbosity(INFO)
  211:     return set_verbosity(WARNING)
  216:     return set_verbosity(DEBUG)
  221:     return set_verbosity(ERROR)
  313:         return
  342:         return iter(self._iterator)
  345:         """Return empty function."""
  348:             return
  350:         return empty_fn
  353:         return self
  356:         return
  362:             return tqdm_lib.tqdm(*args, **kwargs)
  364:             return EmptyTqdm(*args, **kwargs)
  369:             return tqdm_lib.tqdm.set_lock(*args, **kwargs)
  373:             return tqdm_lib.tqdm.get_lock()
  380:     """Return a boolean indicating whether tqdm progress bars are enabled."""
  382:     return bool(_tqdm_active)

PythonVenv\Lib\site-packages\transformers\utils\model_parallel_utils.py:
  51:     """Returns a dictionary of layers distributed evenly across all devices."""
  56:     return dict(zip(devices, layers_list))

PythonVenv\Lib\site-packages\transformers\utils\notebook.py:
   30:     return f"{h}:{m:02d}:{s:02d}" if h != 0 else f"{m:02d}:{s:02d}"
   35:     return f"""
   58:     return html_code
  143:             return
  193:             return
  264:         Add a child progress bar displayed under the table of metrics. The child progress bar is returned (so it can be
  273:         return self.child_bar
  314:             return

PythonVenv\Lib\site-packages\transformers\utils\peft_utils.py:
   42:     Simply checks if the model stored on the Hub or locally is an adapter model or not, return the path of the adapter
   82:         return None
  105:     return adapter_cached_filename

PythonVenv\Lib\site-packages\transformers\utils\quantization_config.py:
   56:             return AWQLinearVersion.GEMM
   58:             return AWQLinearVersion.GEMV
   60:             return AWQLinearVersion.EXLLAMA
   79:     def from_dict(cls, config_dict, return_unused_kwargs=False, **kwargs):
   86:             return_unused_kwargs (`bool`,*optional*, defaults to `False`):
   87:                 Whether or not to return a list of unused keyword arguments. Used for `from_pretrained` method in
   92:         Returns:
  106:         if return_unused_kwargs:
  107:             return config, kwargs
  109:             return config
  130:         Serializes this instance to a Python dictionary. Returns:
  133:         return copy.deepcopy(self.__dict__)
  141:         return f"{self.__class__.__name__} {self.to_json_string()}"
  152:         Returns:
  159:         return json.dumps(config_dict, indent=2, sort_keys=True) + "\n"
  164:         returning all the unused kwargs.
  170:         Returns:
  181:         return unused_kwargs
  262:         Serializes this instance to a Python dictionary. Returns:
  265:         return self.quant_config
  269:         return f"{self.__class__.__name__} {json.dumps(config_dict, indent=2, sort_keys=True)}\n"
  275:         Returns:
  290:         return serializable_config_dict
  399:         return self._load_in_4bit
  412:         return self._load_in_8bit
  462:         Returns `True` if the model is quantizable, `False` otherwise.
  464:         return self.load_in_8bit or self.load_in_4bit
  468:         This method returns the quantization method used for the model. If the model is not quantizable, it returns
  472:             return "llm_int8"
  474:             return "fp4"
  476:             return "nf4"
  478:             return None
  482:         Serializes this instance to a Python dictionary. Returns:
  491:         return output
  495:         return f"{self.__class__.__name__} {json.dumps(config_dict, indent=2, sort_keys=True)}\n"
  502:         Returns:
  517:         return serializable_config_dict
  637:         return loading_attibutes_dict
  711:         return config_dict
  720:         return quant_dict
  734:         return config
  905:         return loading_attibutes_dict

PythonVenv\Lib\site-packages\transformers\utils\versions.py:
   98:         return
  117:     return require_version(requirement, hint)

PythonVenv\Lib\site-packages\transformers-4.41.2.dist-info\METADATA:
  622: >>> inputs = tokenizer("Hello world!", return_tensors="pt")
  633: >>> inputs = tokenizer("Hello world!", return_tensors="tf")

PythonVenv\Lib\site-packages\translate\main.py:
   24:         return ''
   29:     return config_parser.get(default_section, option)
   34:         return
   48:         return
  174:         return translation
  180:     return translation

PythonVenv\Lib\site-packages\translate\translate.py:
  42:             return text
  45:         return ' '.join(self.provider.get_translation(text_wraped) for text_wraped in text_list)

PythonVenv\Lib\site-packages\translate\providers\base.py:
  24:         return NotImplemented('Please Implement this method')

PythonVenv\Lib\site-packages\translate\providers\deepl.py:
  40:         return json.loads(response.text)
  48:         return data["translations"][0]["text"]

PythonVenv\Lib\site-packages\translate\providers\libre.py:
  32:             return self.api.translate(text, from_lang, self.to_lang)

PythonVenv\Lib\site-packages\translate\providers\microsoft.py:
  41:         return json.loads(response.text)
  49:         return data[0]["translations"][0]["text"]

PythonVenv\Lib\site-packages\translate\providers\mymemory_translated.py:
  39:         return response.json()
  46:             return translation
  50:             return next_best_match['translation']

PythonVenv\Lib\site-packages\typer\_completion_classes.py:
   29:         return {
   45:         return args, incomplete
   50:         # return f"{item.type},{item.value}"
   51:         return f"{item.value}"
   57:         return "\n".join(out)
   65:         return {
   80:         return args, incomplete
   84:             return (
   93:         # return f"{item.type}\n{item.value}\n{item.help if item.help else '_'}"
   95:             return f'"{escape(item.value)}":"{escape(item.help)}"'
   97:             return f'"{escape(item.value)}"'
  105:             return f"_arguments '*: :(({args_str}))'"
  107:             return "_files"
  115:         return {
  130:         return args, incomplete
  136:         #     return f"{item.type},{item.value}\t{item.help}"
  138:         # return f"{item.type},{item.value}
  141:             return f"{item.value}\t{formatted_help}"
  143:             return f"{item.value}"
  152:                 return "\n".join(show_args)
  160:         return ""  # pragma: no cover
  168:         return {
  179:         return args, incomplete
  182:         return f"{item.value}:::{item.help or ' '}"

PythonVenv\Lib\site-packages\typer\_completion_shared.py:
   30:     return 0
   88:     return (
  121:     return completion_path
  149:     return path_obj
  160:     return path_obj
  179:     if result.returncode != 0:  # pragma: no cover
  181:         raise click.exceptions.Exit(result.returncode)
  203:     return path_obj
  222:         return shell, installed_path
  227:         return shell, installed_path
  232:         return shell, installed_path
  237:         return shell, installed_path

PythonVenv\Lib\site-packages\typer\_typing.py:
   67:         return type_._eval_type(globalns, localns)
   72:         return type_._evaluate(globalns, localns)
   79:         return cast(Any, type_)._evaluate(globalns, localns, set())
   85:     # so it already returns the full annotation
   91:         return get_type_hints(obj, globalns, localns, include_extras=True)
  107: # Annotated[...] is implemented by returning an instance of one of these classes, depending on
  116:             return cast(
  119:         return getattr(t, "__origin__", None)
  132:             return cast(Type[Any], Annotated)  # mypy complains about _SpecialForm
  133:         return _typing_get_origin(tp) or getattr(tp, "__origin__", None)
  148:             return t.__args__ + t.__metadata__
  149:         return getattr(t, "__args__", ())
  161:             return t.__args__ + t.__metadata__
  166:             return res
  167:         return getattr(t, "__args__", ())
  180:             return (Any,) * tp._nparams
  181:         return ()
  195:             return tp.__args__ + tp.__metadata__
  197:         return (
  211:         return tp
  230:             return tp
  236:             return _AnnotatedAlias(convert_generics(args[0]), args[1:])
  247:             return tp
  249:             return TypingGenericAlias(origin, converted)
  252:             return _UnionGenericAlias(origin, converted)
  258:             return tp
  264:         return tp is Union
  273:         return tp is Union or tp is types.UnionType  # noqa: E721
  362:         return type_ in NONE_TYPES
  373:                 return True
  374:         return False
  381:                 return True
  382:         return False
  394:         return f'Union[{", ".join(map(display_as_type, get_args(v)))}]'
  398:         return str(v).replace("typing.", "")
  401:         return v.__name__
  404:         return str(v).replace("typing.", "")
  444:     return annotations
  448:     return type_ is Callable or get_origin(type_) is Callable
  454:         return Literal is not None and get_origin(type_) is Literal
  457:         return get_args(type_)
  462:         return (
  469:         return type_.__values__
  479:         return (type_,)
  482:     return tuple(x for value in values for x in all_literal_values(value))
  492:     return lenient_issubclass(type_, tuple) and hasattr(type_, "_fields")
  502:     return lenient_issubclass(type_, dict) and hasattr(type_, "__total__")
  512:     return isinstance(type_, test_type.__class__) and hasattr(type_, "__supertype__")  # type: ignore
  518:     return type_
  523:         return False
  525:     return v.__class__ == ClassVar.__class__ and (
  532:         return True
  539:         return True
  541:     return False
  603:     Tries to get the class of a Type[T] annotation. Returns True if Type is used
  604:     without brackets. Otherwise returns None.
  612:                 return True
  613:             return get_args(type_)[0]
  616:     return None
  621:     Return all the types that are allowed by type `tp`
  626:         return get_sub_types(get_args(tp)[0])
  628:         return [x for t in get_args(tp) for x in get_sub_types(t)]
  630:         return [tp]

PythonVenv\Lib\site-packages\typer\cli.py:
   57:         return super().list_commands(ctx)
   61:         return super().get_command(ctx, name)
   65:         return super().invoke(ctx)
   79:         return obj
   88:         return sub_app
   97:                 return obj
  102:             return obj
  109:             return sub_app
  116:             return sub_app
  117:     return None
  136:     return obj
  154:         return
  262:     return docs
  299:     return app()

PythonVenv\Lib\site-packages\typer\completion.py:
   32:     return install_param, show_param
   37:         return value  # pragma: no cover
   49:         return value  # pragma: no cover
  122:         return 1
  136:         return 1
  142:         return 0
  146:         return 0
  149:     return 1

PythonVenv\Lib\site-packages\typer\core.py:
   49:         return "", opt
   51:         return opt[:2], opt[2:]
   52:     return first, opt[1:]
   90:             return out
  141:     return default_string
  159:     return default_value
  195:                     return rv
  200:                 # chained commands which all returned `None` -- so it's not
  228:             # in non-standalone mode, return the exit code
  231:             # would return its result
  234:             # `ctx.exit(1)` and to `return 1`, the caller won't be able to
  236:             return e.exit_code
  309:         return _get_default_string(
  319:         return _extract_default_help_str(self, ctx=ctx)
  325:             return None
  365:         return name, help
  371:             return self.metavar
  380:         return var
  460:         return _get_default_string(
  470:         return _extract_default_help_str(self, ctx=ctx)
  477:             return None
  492:             return rv
  555:         return ("; " if any_prefix_is_slash else " / ").join(rv), help
  592:         return
  661:         return _main(
  673:             return super().format_help(ctx, formatter)
  674:         return rich_utils.rich_format_help(
  723:         return _main(
  735:             return super().format_help(ctx, formatter)
  736:         return rich_utils.rich_format_help(

PythonVenv\Lib\site-packages\typer\main.py:
    66:         return
    80:         return
   102:     return
   109:     return click_install_param, click_show_param
   211:             return f
   213:         return decorator
   254:             return f
   256:         return decorator
   309:             return get_command(self)(*args, **kwargs)
   335:     return group
   352:         return click_command
   370:         return click_command
   379:         return get_command_name(typer_info.callback.__name__)
   385:                 return get_command_name(registered_callback.callback.__name__)
   387:             return get_command_name(typer_info.typer_instance.info.callback.__name__)
   388:     return None
   394:         return inspect.cleandoc(typer_info.help or "")
   399:             return inspect.cleandoc(callback_help or "")
   406:             return inspect.cleandoc(instance_help or "")
   413:             return doc
   420:                 return doc
   429:                 return doc
   433:     return typer_info.help.value
   471:     return TyperInfo(**values)
   536:     return group
   540:     return name.lower().replace("_", "-")
   559:     return params, convertors, context_param_name
   604:     return command
   613:     return convertor
   618:         return Path(value)
   619:     return None
   630:                 return enum(key)
   632:     return convertor
   640:             return None
   641:         return [convertor(v) if convertor else v for v in value]
   643:     return internal_convertor
   655:             return None
   656:         return tuple(
   661:     return internal_convertor
   674:         return None
   692:         return callback(**use_params)
   695:     return wrapper
   702:         return parameter_info.click_type
   705:         return click.types.FuncParamType(parameter_info.parser)
   708:         return click.STRING
   717:             return click.IntRange(min=min_, max=max_, clamp=parameter_info.clamp)
   719:             return click.INT
   722:             return click.FloatRange(
   728:             return click.FLOAT
   730:         return click.BOOL
   732:         return click.UUID
   734:         return click.DateTime(formats=parameter_info.formats)
   741:         return click.Path(
   752:         return click.File(
   760:         return click.File(
   768:         return click.File(
   776:         return click.File(
   784:         return click.Choice(
   794:     return isinstance(cls, type) and issubclass(cls, class_or_tuple)
   887:         return (
   928:         return (
   956:     raise AssertionError("A click.Parameter should be returned")  # pragma: no cover
   965:         return None
  1005:         return callback(**use_params)
  1008:     return wrapper
  1015:         return None
  1058:         return callback(**use_params)
  1061:     return wrapper

PythonVenv\Lib\site-packages\typer\models.py:
  67:         return bool(self.value)
  82:     return DefaultPlaceholder(value)  # type: ignore

PythonVenv\Lib\site-packages\typer\params.py:
  199:     return OptionInfo(
  420:     return ArgumentInfo(

PythonVenv\Lib\site-packages\typer\rich_utils.py:
  127:     return Console(
  150:     """Take a string, remove indentations, and return styled text.
  152:     By default, return the text as a Rich Text with the request style.
  163:         return Markdown(text, style=style)
  165:         return highlighter(Text.from_markup(text, style=style))
  167:         return highlighter(Text(text, style=style))
  178:     Returns the prose help text for a command or group, rendered either as a
  235:     Returns the prose help text for an option or argument, rendered either
  311:     return Columns(items)
  324:     Returns the first paragraph of help text for a command, rendered either as a
  334:     return _make_rich_rext(

PythonVenv\Lib\site-packages\typer\testing.py:
  21:         return super().invoke(

PythonVenv\Lib\site-packages\typer\utils.py:
   17:         return "`Option`"
   19:         return "`Argument`"
   21:     return f"`{param_type.__name__}`"  # pragma: no cover
   34:         return (
   64:         return msg
   74:         return (
   90:         return (
  100:         return base_annotation, []
  102:     return base_annotation, [
  177:             # - a factory function (returning a default value.)
  192:     return params

PythonVenv\Lib\site-packages\unidecode\__init__.py:
   14: A standard string object will be returned. If you need bytes, use:
   55:     Note that if 'preserve' is used the returned string might not be
   64:         return string
   66:     return _unidecode(string, errors, replace_str)
   77:     return _unidecode(string, errors, replace_str)
   86:         return str(char)
   90:         return None
  108:             return None
  113:         return table[position]
  115:         return None
  138:     return ''.join(retval)

PythonVenv\Lib\site-packages\Unidecode-1.3.8.dist-info\METADATA:
   79: containing non-ASCII characters, and returns a string that can be safely
   98: that if ``'preserve'`` is used the string returned by ``unidecode()`` will not
  140: return True::
  222: I've upgraded Unidecode and now some URLs on my website return 404 Not Found.

PythonVenv\Lib\site-packages\urllib3\__init__.py:
   81:     Returns the handler after adding it.
   91:     return handler
  178:         the redirect response will be returned.
  193:     return _DEFAULT_POOL.request(

PythonVenv\Lib\site-packages\urllib3\_base_connection.py:
  117:             This returns False if no proxy is in use. Used to determine whether

PythonVenv\Lib\site-packages\urllib3\_collections.py:
   49:         return potential
   53:         return typing.cast(typing.Mapping[str, str], potential)
   58:         return typing.cast(typing.Iterable[typing.Tuple[str, str]], potential)
   60:         return typing.cast("HasGettableStringKeys", potential)
   62:         return None
  100:             return item
  136:             return len(self._container)
  138:     def __iter__(self) -> typing.NoReturn:
  155:             return set(self._container.keys())
  193:         return len(list(self._headers.iteritems()))
  196:         return self._headers.iteritems()
  202:                 return self._headers._has_value_for_header(passed_key, passed_val)
  203:         return False
  261:         return ", ".join(val[1:])
  268:             return key.lower() in self._container
  269:         return False
  272:         return super().setdefault(key, default)
  277:             return False
  281:         return {k.lower(): v for k, v in self.itermerged()} == {
  286:         return not self.__eq__(other)
  289:         return len(self._container)
  381:         """Returns a list of all the values for the named field. Returns an
  388:                 return []
  390:             return default
  394:             return vals[1:]
  412:         return self
  423:         return f"{type(self).__name__}({dict(self.itermerged())})"
  433:         return clone
  449:         return HTTPHeaderDictItemView(self)
  453:             return potential_value in self._container[header_name.lower()][1:]
  454:         return False
  461:             return NotImplemented
  463:         return self
  470:             return NotImplemented
  473:         return result
  480:             return NotImplemented
  483:         return result

PythonVenv\Lib\site-packages\urllib3\_request_methods.py:
  136:             return self.request_encode_url(
  144:             return self.request_encode_body(
  183:         return self.urlopen(method, url, **extra_kw)
  279:         return self.urlopen(method, url, **extra_kw)

PythonVenv\Lib\site-packages\urllib3\connection.py:
  180:         return self._dns_host.rstrip(".")
  195:         :return: New socket connection.
  221:         return sock
  256:         return self.sock is None
  261:             return False
  262:         return not wait_for_read(self.sock, timeout=0.0)
  266:         return self._has_connected_to_proxy
  271:         Return True if a forwarding proxy is configured, else return False
  273:         return bool(self.proxy) and self._tunnel_host is None
  306:         return super().putrequest(
  446:         If the HTTPConnection is in the correct state, returns an instance of HTTPResponse or of whatever object is returned by the response_class variable.
  448:         If a request has not been sent or if a previous response has not be handled, ResponseNotReady is raised. If the HTTP response indicates that the connection should be closed, then it will be closed before the response is returned. When the connection is closed, the underlying socket is closed.
  493:         return response
  719:         return sock_and_verified.socket  # type: ignore[return-value]
  847:         return _WrappedAndVerifiedSocket(
  905:     return new_err
  909:     return f"python-urllib3/{__version__}"
  926:     """Returns the URL from a given connection. This is mainly used for testing and logging."""
  930:     return Url(scheme=scheme, host=conn.host, port=conn.port, path=path).url

PythonVenv\Lib\site-packages\urllib3\connectionpool.py:
    96:         return f"{type(self).__name__}(host={self.host!r}, port={self.port!r})"
    99:         return self
   108:         # Return False to re-raise any potential exceptions
   109:         return False
   241:         Return a fresh :class:`HTTPConnection`.
   257:         return conn
   261:         Get a connection. Will return a pooled connection if one is available.
   264:         fresh connection is returned.
   295:         return conn or self._new_conn()
   302:             Connection object for the current host and port as returned by
   314:                 return  # Everything is dandy, done.
   350:         """Helper that always returns a :class:`urllib3.util.Timeout`"""
   352:             return self.timeout.clone()
   355:             return timeout.clone()
   359:             return Timeout.from_float(timeout)
   429:             the redirect response will be returned.
   455:             Enforce content length checking. Body returned by server must match
   524:             # In Python 3 socket.py will catch EAGAIN and return None when you
   562:         return response
   569:             return
   582:             return True
   596:         return (scheme, host, port) == (self.scheme, self.host, self.port)
   660:             the redirect response will be returned.
   697:             ``r.release_conn()`` on the response ``r`` to return the connection
   736:         # returning/raising/recursing. Update this variable if necessary, and
   877:             return self.urlopen(
   911:                 return response
   916:             return self.urlopen(
   943:                 return response
   948:             return self.urlopen(
   966:         return response
  1052:         Return a fresh :class:`urllib3.connection.HTTPConnection`.
  1073:         return self.ConnectionCls(
  1116:     Given a url, return an :class:`.ConnectionPool` instance of its host.
  1138:         return HTTPSConnectionPool(host, port=port, **kw)  # type: ignore[arg-type]
  1140:         return HTTPConnectionPool(host, port=port, **kw)  # type: ignore[arg-type]
  1168:     return host
  1174:     """Returns the URL from a given connection pool. This is mainly used for testing and logging."""
  1175:     return Url(scheme=pool.scheme, host=pool.host, port=pool.port, path=path).url

PythonVenv\Lib\site-packages\urllib3\exceptions.py:
   40:         return self.__class__, (None, None)
   52:         return self.__class__, (None, self.url, None)
  155:         return self.conn
  243:     (have an fp attribute which returns raw chunks) for read_chunked().
  263:         return "IncompleteRead(%i bytes read, %i more expected)" % (
  279:         return "InvalidChunkLength(got length %r, %i bytes read)" % (

PythonVenv\Lib\site-packages\urllib3\fields.py:
   27:         return mimetypes.guess_type(filename)[0] or default
   28:     return default
   44:     :returns:
   71:             return result
   76:     return value
   97:     :returns:
  114:     return f'{name}="{value}"'
  132:     return format_multipart_header_param(name, value)
  150:     return format_multipart_header_param(name, value)
  242:         return request_param
  258:         return self.header_formatter(name, value)
  289:         return "; ".join(parts)
  308:         return "\r\n".join(lines)

PythonVenv\Lib\site-packages\urllib3\filepost.py:
  26:     return binascii.hexlify(os.urandom(16)).decode()
  89:     return body.getvalue(), content_type

PythonVenv\Lib\site-packages\urllib3\http2.py:
   31:     manager, which returns the protected object.
   40:         return self._obj
   66:         return _LockedObject(h2.connection.H2Connection(config=config))
  118:             return
  159:         return HTTP2Response(
  208:         return self._data
  211:         return None

PythonVenv\Lib\site-packages\urllib3\poolmanager.py:
  115:     :return: A namedtuple that can be used as a connection pool key.
  148:     return key_class(**context)
  218:         return self
  227:         # Return False to re-raise any potential exceptions
  228:         return False
  266:         return pool_cls(host, port, **request_context)
  304:         return self.connection_from_context(request_context)
  329:         return self.connection_from_pool_key(pool_key, request_context=request_context)
  346:                 return pool
  355:         return pool
  371:         return self.connection_from_host(
  381:         This does not modify self.connection_pool_kw and returns a new dict.
  395:         return base_pool_kwargs
  404:             return False
  406:         return not connection_requires_http_tunnel(
  448:             return response
  482:             return response
  490:         return self.urlopen(method, redirect_location, **kw)
  597:             return super().connection_from_host(
  601:         return super().connection_from_host(
  620:         return headers_
  634:         return super().urlopen(method, url, redirect=redirect, **kw)
  638:     return ProxyManager(proxy_url=url, **kw)

PythonVenv\Lib\site-packages\urllib3\response.py:
    87:             return data
    90:             return self._obj.decompress(data)
    98:             return decompressed
   103:                 return self.decompress(self._data)
   108:         return self._obj.flush()
   125:             return bytes(ret)
   135:                     return bytes(ret)
   139:                 return bytes(ret)
   144:         return self._obj.flush()
   162:                 return self._obj.flush()  # type: ignore[no-any-return]
   163:             return b""
   174:                 return b""
   180:             return b"".join(data_parts)
   186:             return ret  # type: ignore[no-any-return]
   202:         return self._decoders[0].flush()
   207:         return data
   212:         return MultiDecoder(mode)
   217:         return GzipDecoder()
   220:         return BrotliDecoder()
   223:         return ZstdDecoder()
   225:     return DeflateDecoder()
   231:     To return decoded data in read() and still follow the BufferedIOBase API, we need a
   232:     buffer to always return the correct amount of bytes.
   250:         return self._size
   258:             return b""
   284:         return ret.getvalue()
   290:             return b""
   298:         return result
   353:         :returns: Truthy redirect location string if we got a redirect status
   358:             return self.headers.get("location")
   359:         return False
   376:         return _json.loads(data)
   392:         return self._retries
   468:             return data
   484:         return data
   492:             return self._decoder.decompress(b"") + self._decoder.flush()
   493:         return b""
   499:             return 0
   502:             return len(temp)
   512:         return self.headers
   521:         return self.headers.get(name, default)
   525:         return self.headers
   528:         return self.url
   560:         Enforce content length checking. Body returned by server must match
   617:         # Used to return the correct amount of bytes for partial read()s
   626:             return None
   646:             return self._body  # type: ignore[return-value]
   649:             return self.read(cache_content=True)
   651:         return None  # type: ignore[return-value]
   655:         return self._connection
   658:         return is_fp_closed(self._fp)
   663:         the amount of content returned by :meth:``urllib3.response.HTTPResponse.read``
   666:         return self._fp_bytes_read
   687:                 return None
   712:         # In some cases, httplib returns a status of "_UNKNOWN"
   722:         return length
   786:             # return the connection back to the pool.
   820:                 return self._fp.read1(c_int_max)
   840:             return buffer.getvalue()
   842:             return self._fp.read1(amt) if amt is not None else self._fp.read1()
   845:             return self._fp.read(amt) if amt is not None else self._fp.read()
   857:             return None  # type: ignore[return-value]
   865:                 # Close the connection when no data is returned
   897:         return data
   919:             If True, will save the returned data such that the same result is
   920:             returned despite of the state of the underlying file object. This
   933:                 return self._decoded_buffer.get(amt)
   940:             return data
   954:                 return data
   968:         return data
   998:                     return self._decoded_buffer.get_all()
   999:                 return self._decoded_buffer.get(amt)
  1001:             return b""
  1003:         # FIXME, this method's type doesn't say returning None is possible
  1006:             return data
  1018:             return self._decoded_buffer.get_all()
  1019:         return self._decoded_buffer.get(amt)
  1030:             How much of the content to read. The generator will return up to
  1031:             much data per iteration, but may return less. This is particularly
  1033:             never be returned.
  1050:         return True
  1065:             return io.IOBase.closed.__get__(self)  # type: ignore[no-any-return]
  1067:             return True
  1069:             return self._fp.isclosed()
  1071:             return self._fp.closed
  1073:             return True
  1079:             return self._fp.fileno()
  1092:             return self._fp.flush()
  1098:         the fp attribute. If it is present we assume it returns raw chunks as
  1101:         return hasattr(self._fp, "fp")
  1107:             return None
  1122:         returned_chunk = None
  1125:             returned_chunk = chunk
  1131:             returned_chunk = value
  1136:             returned_chunk = value
  1138:             returned_chunk = self._fp._safe_read(self.chunk_left)  # type: ignore[union-attr]
  1141:         return returned_chunk  # type: ignore[no-any-return]
  1169:                 "It should have have an fp attribute which returns raw chunks."
  1176:                 return None
  1179:             # then return immediately.
  1181:                 return None
  1218:         Returns the URL that was the source of this response.
  1220:         will return the final redirect location.
  1222:         return self._request_url

PythonVenv\Lib\site-packages\urllib3\contrib\pyopenssl.py:
  195:     If the name cannot be idna-encoded then we return None signalling that
  211:                     return prefix.encode("ascii") + idna.encode(name)
  212:             return idna.encode(name)
  214:             return None
  218:         return name
  222:         return None
  223:     return encoded_name.decode("utf-8")
  237:         # No such extension, return the empty list.
  238:         return []
  253:         return []
  255:     # We want to return dNSName and iPAddress fields. We need to cast the IPs
  271:     return names
  290:         return self.socket.fileno()
  304:                 return b""
  307:         except OpenSSL.SSL.ZeroReturnError:
  309:                 return b""
  316:                 return self.recv(*args, **kwargs)
  322:             return data  # type: ignore[no-any-return]
  326:             return self.connection.recv_into(*args, **kwargs)  # type: ignore[no-any-return]
  329:                 return 0
  332:         except OpenSSL.SSL.ZeroReturnError:
  334:                 return 0
  341:                 return self.recv_into(*args, **kwargs)
  348:         return self.socket.settimeout(timeout)
  353:                 return self.connection.send(data)  # type: ignore[no-any-return]
  380:             return self.connection.close()  # type: ignore[no-any-return]
  382:             return
  390:             return x509  # type: ignore[no-any-return]
  393:             return OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_ASN1, x509)  # type: ignore[no-any-return]
  395:         return {
  401:         return self.connection.get_protocol_version_name()  # type: ignore[no-any-return]
  424:         return self._options
  433:         return _openssl_to_stdlib_verify[self._ctx.get_verify_mode()]
  482:         return self._ctx.set_alpn_protos(protocols)  # type: ignore[no-any-return]
  513:         return WrappedSocket(cnx, sock)
  524:         return self._minimum_version
  533:         return self._maximum_version
  546:     return_code: int,
  548:     return err_no == 0

PythonVenv\Lib\site-packages\urllib3\contrib\socks.py:
  156:         return conn

PythonVenv\Lib\site-packages\urllib3\contrib\emscripten\connection.py:
  126:             return EmscriptenHttpResponseWrapper(
  144:         return self._closed
  149:         return True
  154:         This returns False if no proxy is in use. Used to determine whether
  157:         return False

PythonVenv\Lib\site-packages\urllib3\contrib\emscripten\emscripten_fetch_worker.js:
  16:     return;
  28:           // read everything - clear connection and return
  33:           // return from event handler
  34:           return;
  62:     return;
  71:       // return the headers first via textencoder

PythonVenv\Lib\site-packages\urllib3\contrib\emscripten\fetch.py:
   18: request into a buffer and then returning it. it shows a warning in the javascript console in this case.
   21: control is returned to javascript. Call `await wait_for_streaming_ready()` to wait for streaming fetch.
   89:     return to_js(dict_val, dict_converter=js.Object.fromEntries)
  118:         return self._is_closed
  123:         return self.is_closed()
  139:         return True
  142:         return False
  145:         return False
  178:                 # EOF, free the buffers and return zero
  182:                 return 0
  191:         return ret_length
  262:             return EmscriptenResponse(
  293:     return hasattr(js, "window") and hasattr(js, "self") and js.self == js.window
  297:     return hasattr(js, "crossOriginIsolated") and js.crossOriginIsolated
  301:     return (
  310:     return hasattr(js, "Worker") and hasattr(js, "Blob")
  326:         return _fetcher.send(request)
  329:         return None
  393:         return EmscriptenResponse(
  408:         return _fetcher.streaming_ready
  410:         return None  # no fetcher, return None to signify that
  416:         return True
  418:         return False

PythonVenv\Lib\site-packages\urllib3\contrib\emscripten\response.py:
   56:         return self._url
   64:         return self._connection
   68:         return self._retries
   84:             How much of the content to read. The generator will return up to
   85:             much data per iteration, but may return less. This is particularly
   87:             never be returned.
  136:         return length
  149:             return b""
  169:                 return typing.cast(bytes, data)
  181:                 return typing.cast(bytes, data)
  197:             return None
  208:             return self._body
  210:             return self.read(cache_content=True)
  223:         return _json.loads(data)
  271:                 # return the connection back to the pool.

PythonVenv\Lib\site-packages\urllib3\util\connection.py:
   17:     Returns True if the connection is dropped and should be closed.
   20:     return not conn.is_connected
   33:     """Connect to *address* and return the socket object.
   36:     port)``) and return the socket object.  Passing the optional
   39:     global default timeout setting returned by :func:`socket.getdefaulttimeout`
   52:     # The original create_connection function always returns all records.
   76:             return sock
   90:         raise OSError("getaddrinfo returns an empty list")
   97:         return
  111:     return family
  115:     """Returns True if the system can bind an IPv6 address."""
  120:         # has_ipv6 returns true if cPython was compiled with IPv6 support.
  134:     return has_ipv6

PythonVenv\Lib\site-packages\urllib3\util\proxy.py:
  17:     Returns True if the connection requires an HTTP CONNECT through the proxy.
  28:         return False
  32:         return False
  40:         return False
  43:     return True

PythonVenv\Lib\site-packages\urllib3\util\request.py:
  131:     return headers
  151:     return pos
  256:     return ChunksAndContentLength(chunks=chunks, content_length=content_length)

PythonVenv\Lib\site-packages\urllib3\util\response.py:
   20:         return obj.isclosed()  # type: ignore[no-any-return, attr-defined]
   26:         return obj.closed  # type: ignore[no-any-return, attr-defined]
   33:         return obj.fp is None  # type: ignore[attr-defined]
  101:     return method_str.upper() == "HEAD"

PythonVenv\Lib\site-packages\urllib3\util\retry.py:
  159:         exhausted, to raise a MaxRetryError, or to return a response with a
  163:         whether we should raise an exception, or return a response,
  177:         indicating a redirect is returned before firing off the redirected
  264:         return type(self)(**params)  # type: ignore[arg-type]
  278:             return retries
  283:         return new_retries
  297:             return 0
  302:         return float(max(0, min(self.backoff_max, backoff_value)))
  319:         return seconds
  327:             return None
  329:         return self.parse_retry_after(retry_after)
  335:             return True
  337:         return False
  342:             return
  351:         this method will return immediately.
  357:                 return
  367:         return isinstance(err, ConnectTimeoutError)
  373:         return isinstance(err, (ReadTimeoutError, ProtocolError))
  380:             return False
  381:         return True
  389:         whether the returned status code is on the list of status codes to
  393:             return False
  396:             return True
  398:         return bool(
  420:             return False
  422:         return min(retry_counts) < 0
  433:         """Return a new Retry object with incremented retry counters.
  436:             return a response.
  441:         :return: A new ``Retry`` object.
  519:         return new_retry
  522:         return (

PythonVenv\Lib\site-packages\urllib3\util\ssl_.py:
   32:     """Return True for CPython 3.8.9+, 3.9.3+ or 3.10+ and PyPy 7.3.8+ where
   44:         return pypy_version_info >= (7, 3, 8)  # type: ignore[operator]
   48:         return (
   54:         return False
   73:     return is_openssl and (
  189:         return CERT_REQUIRED
  195:         return res  # type: ignore[no-any-return]
  197:     return candidate  # type: ignore[return-value]
  205:         return PROTOCOL_TLS
  211:         return typing.cast(int, res)
  213:     return candidate
  247:     :returns:
  351:     return context
  466:     return ssl_sock
  474:     :return: True if the hostname is an IP address, False otherwise.
  479:     return bool(_IPV4_RE.match(hostname) or _BRACELESS_IPV6_ADDRZ_RE.match(hostname))
  488:                 return True
  490:     return False
  507:         return SSLTransport(sock, ssl_context, server_hostname)
  509:     return ssl_context.wrap_socket(sock, server_hostname=server_hostname)

PythonVenv\Lib\site-packages\urllib3\util\ssl_match_hostname.py:
   33:         return False
   53:         return bool(dn.lower() == hostname.lower())
   77:     return pat.match(hostname)
   92:     return bool(ip.packed == host_ip.packed)
  100:     """Verify that *cert* (in decoded format as returned by
  105:     returns nothing.
  134:                 return
  138:                 return
  148:                         return

PythonVenv\Lib\site-packages\urllib3\util\ssltransport.py:
   18: _ReturnValue = typing.TypeVar("_ReturnValue")
   74:         return self
   80:         return self.socket.fileno()
   83:         return self._wrap_ssl_read(len, buffer)
   88:         return self._wrap_ssl_read(buflen)
  100:         return self.read(nbytes, buffer)
  115:         return self._ssl_io_loop(self.sslobj.write, data)
  154:             return raw
  164:             return buffer
  167:         return text
  186:         return self.sslobj.getpeercert(binary_form)  # type: ignore[return-value]
  189:         return self.sslobj.version()
  192:         return self.sslobj.cipher()
  195:         return self.sslobj.selected_alpn_protocol()
  198:         return self.sslobj.selected_npn_protocol()
  201:         return self.sslobj.shared_ciphers()
  204:         return self.sslobj.compression()
  210:         return self.socket.gettimeout()
  217:             return self._ssl_io_loop(self.sslobj.read, len, buffer)
  220:                 return 0  # eof, return 0.
  246:         func: typing.Callable[..., _ReturnValue],
  249:     ) -> _ReturnValue:
  280:         return typing.cast(_ReturnValue, ret)

PythonVenv\Lib\site-packages\urllib3\util\timeout.py:
   88:         Many factors can affect the total amount of time for urllib3 to return
   98:         not the total amount of time for the request to return a complete
  121:         return f"{type(self).__name__}(connect={self._connect!r}, read={self._read!r}, total={self.total!r})"
  128:         return getdefaulttimeout() if timeout is _DEFAULT_TIMEOUT else timeout
  137:         :return: The validated and casted version of the given value.
  142:             return value
  170:         return value
  183:         :return: Timeout object
  186:         return Timeout(read=timeout, connect=timeout)
  194:         :return: a copy of the timeout object
  200:         return Timeout(connect=self._connect, read=self._read, total=self.total)
  211:         return self._start_connect
  216:         :return: Elapsed time in seconds.
  225:         return time.monotonic() - self._start_connect
  234:         :return: Connect timeout.
  238:             return self._connect
  241:             return self.total
  243:         return min(self._connect, self.total)  # type: ignore[type-var]
  257:         :return: Value to use for the read timeout.
  270:                 return self._read
  271:             return max(0, min(self.total - self.get_connect_duration(), self._read))
  273:             return max(0, self.total - self.get_connect_duration())
  275:             return self.resolve_default_timeout(self._read)

PythonVenv\Lib\site-packages\urllib3\util\url.py:
   95:     Data structure for representing an HTTP URL. Used as a return value for
  114:         return super().__new__(cls, scheme, auth, host, port, path, query, fragment)
  119:         return self.host
  129:         return uri
  143:             return netloc
  145:             return f"{userinfo}@{netloc}"
  156:             return None
  158:             return f"{self.host}:{self.port}"
  159:         return self.host
  167:         returned url may not be exactly the same as the url inputted to
  207:         return url
  210:         return self.url
  234:         return component
  250:         # Will return a single character bytestring
  260:     return encoded_component.decode()
  290:     return "/".join(output)
  310:                 # separator as necessary to return a valid RFC 4007 scoped IP.
  321:                     return f"{host[:start].lower()}%{zone_id}{host[end:]}"
  323:                     return host.lower()
  325:                 return to_str(
  329:     return host
  342:             return idna.encode(name.lower(), strict=True, std3_rules=True)
  348:     return name.lower().encode("ascii")
  366:     return encoded_target
  371:     Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
  399:         return Url()
  463:     return Url(

PythonVenv\Lib\site-packages\urllib3\util\util.py:
  11:         return x
  15:         return x.encode(encoding or "utf-8", errors=errors or "strict")
  16:     return x.encode()
  23:         return x
  27:         return x.decode(encoding or "utf-8", errors=errors or "strict")
  28:     return x.decode()
  35: ) -> typing.NoReturn:

PythonVenv\Lib\site-packages\urllib3\util\wait.py:
   54:     return bool(rready or wready or xready)
   77:         return poll_obj.poll(t)
   79:     return bool(do_poll(timeout))
   90:         return False
   92:         return True
  110:     return wait_for_socket(sock, read, write, timeout)
  115:     Returns True if the socket is readable, or False if the timeout expired.
  117:     return wait_for_socket(sock, read=True, timeout=timeout)
  122:     Returns True if the socket is readable, or False if the timeout expired.
  124:     return wait_for_socket(sock, write=True, timeout=timeout)

PythonVenv\Lib\site-packages\urwid\_async_kw_event_loop.py:
   59:         Returns:
   62:         return self._start_task(self._alarm_task, seconds, callback)
   72:         return self._idle_handle
   80:         return self._cancel_scope(handle)
   91:             return False
   92:         return True
  100:         Returns:
  103:         return self._cancel_scope(handle)
  108:         Returns:
  114:         return existed
  190:         Returns:
  193:         return self._start_task(self._watch_task, fd, callback)
  218:             return None
  220:             return exc
  250:         Returns:
  258:         return scope

PythonVenv\Lib\site-packages\urwid\canvas.py:
    63:             return
    80:             return depends
    89:                     return
   100:         Return the cached canvas or None.
   110:             return None
   113:             return None
   117:         return canv
   134:             return
   150:             return
   154:             return
   214:         'render call returns the canvas thanks to some metaclass
   226:         return self._widget_info
   234:         Return the text content of the canvas as a list of strings,
   237:         return [bytes().join([text for (attr, cs, text) in row])
   260:             return
   261:         return c[:2] # trim off data part
   270:             return
   277:             return
   278:         return c
   305:         Return coords shifted by (dx, dy).
   310:         return d
   380:         """Return the number of rows in this canvas."""
   383:         return rows
   386:         """Return the screen column width of this canvas."""
   387:         return self._maxcol
   391:         Return cursor coords shifted by (dx, dy), or None if there
   396:             return x+dx, y+dy
   397:         return None
   402:         Return the canvas content as a list of rows where each row
   446:         Return the differences between other and this canvas.
   448:         If other is the same object as self this will return no
   453:             return [self.cols()]*self.rows()
   454:         return self.content()
   468:         return (cols, rows) of spaces with default attributes.
   503:         return self.size[0]
   506:         return self.size[1]
   524:         Return the differences between other and this canvas.
   527:             return [self.cols()]*self.rows()
   528:         return self.content()
   579:         return rows
   583:             return 0
   586:         return cols
   591:         Return the canvas content as a list of rows where each row
   610:         Return the differences between other and this canvas.
   615:             return
   826:     Return one row, advancing the iterators in sbody.
   841:     return row
   846:     Return a new shard tail that follows this shard body.
   859:     return shard_tail
   915:     Return a list of (done_rows, content_iter, cview) tuples for
   957:     return body
   962:     Return shards with top rows removed.
   993:     return new_shards
   997:     Return the topmost keep_rows rows from shards.
  1020:     return new_shards
  1024:     Return shards with starting from column left and cols total width.
  1053:     return new_shards
  1057:     Return the result of joining shard lists horizontally.
  1085:     return new_shards
  1089:     return cv[:3] + (rows,) + cv[4:]
  1092:     return (cv[0], trim + cv[1], cv[2], cv[3] - trim) + cv[4:]
  1095:     return (cv[0] + trim, cv[1], cv[2] - trim,) + cv[3:]
  1098:     return cv[:2] + (cols,) + cv[3:]
  1104:     """Stack canvases in l vertically and return resulting canvas.
  1140:     return combined_canvas
  1154:     return overlayed_canvas
  1159:     Join canvases in l horizontally. Return result.
  1211:     return joined_canvas
  1226:         """Return an attribute list for the range of text specified."""
  1249:         return o
  1268:                 return
  1272:                 return
  1278:                     return
  1315:     return TextCanvas(t, a, c, maxcol=maxcol)

PythonVenv\Lib\site-packages\urwid\command_map.py:
   84:         return self._command.get(key, None)
   99:         Return a new copy of this CommandMap, likely so we can modify
  104:         return c

PythonVenv\Lib\site-packages\urwid\compat.py:
   37: # B returns a byte string in all supported python versions
  105:             return meta(name, bases, d)
  109:             return meta.__prepare__(name, bases)
  110:     return type.__new__(metaclass, 'temporary_class', (), {})

PythonVenv\Lib\site-packages\urwid\container.py:
    54:         return self.contents[position][0].base_widget
    58:         Return the .focus_position values starting from this container
    68:                 return out
    80:         focus by passing in the value returned from an earlier call to
    93:         Return the .focus values starting from this container
   106:                 return out
   116:         Return an iterable of positions for this container from first
   119:         return iter(xrange(len(self.contents)))
   123:         Return an iterable of positions for this container from last
   126:         return iter(xrange(len(self.contents) - 1, -1, -1))
   139:         return frozenset([FLOW])
   183:         return ml
   199:         return self._cell_width
   212:         return self._contents
   231:         Return a new options tuple for use in a GridFlow's .contents list.
   240:         return (width_type, width_amount)
   253:             return self._set_focus_position(cell)
   254:         return self._set_focus_cell(cell)
   258:         Return the widget in focus, for backwards compatibility.
   264:             return None
   265:         return self.contents[self.focus_position][0]
   273:                 return
   286:         Return the index of the widget in focus or None if this GridFlow is
   291:         return self.contents.focus
   318:             return self._w
   323:         return self._w
   332:             return divider
   377:         return p
   394:             return
   413:         return key
   417:         return self.__super.rows(size, focus=focus)
   421:         return self.__super.render(size, focus)
   426:         return self.__super.get_cursor_coords(size)
   433:         return rval
   439:         return True # at a minimum we adjusted our focus
   442:         """Return pref col from display widget."""
   444:         return self.__super.get_pref_col(size)
   523:         Return a new options tuple for use in this Overlay's .contents mapping.
   531:         return (align_type, align_amount, width_type, width_amount,
   593:         """Return selectable from top_w."""
   594:         return self.top_w.selectable()
   598:         return self.top_w.keypress(self.top_w_size(size,
   605:         return self.top_w
   611:         Return the top widget position (currently always 1).
   613:         return 1
   629:                 return 2
   632:         return OverlayContents()
   635:             return (self.bottom_w, self._DEFAULT_BOTTOM_OPTIONS)
   637:             return (self.top_w, (
   715:         """Return cursor coords from top_w, if any."""
   717:             return None
   725:         return x+left, y+top
   728:         """Return (padding left, right, filler top, bottom)."""
   764:         return left, right, top, bottom
   767:         """Return the size to pass to top_w."""
   770:             return ()
   774:             return (maxcol-left-right,)
   775:         return (maxcol-left-right, maxrow-top-bottom)
   784:             return CompositeCanvas(bottom_c)
   794:         return CanvasOverlay(top_c, bottom_c, left, top)
   800:             return False
   807:             return False
   809:         return self.top_w.mouse_event(
   850:         return self._header
   859:         return self._body
   866:         return self._footer
   894:         Return an indicator which part of the frame is in focus
   899:         :returns: one of 'header', 'footer' or 'body'.
   902:         return self.focus_part
   905:         return {
   922:                 return len(inner_self.keys())
   924:                 return [(k, inner_self[k]) for k in inner_self.keys()]
   926:                 return [inner_self[k] for k in inner_self.keys()]
   942:         return FrameContents()
   949:         return keys
   952:             return (self._body, None)
   954:             return (self._header, None)
   956:             return (self._footer, None)
  1008:         Return None as a placeholder for future options.
  1010:         return None
  1020:         :returns: `(head rows, foot rows),(orig head, orig foot)`
  1039:                 return (0, remaining),(hrows, frows)
  1043:                 return (remaining, frows),(hrows, frows)
  1047:                 return (remaining, 0),(hrows, frows)
  1051:                 return (hrows, remaining),(hrows, frows)
  1057:                 return (0, rless1),(hrows, frows)
  1061:             return (rless1,frows),(hrows, frows)
  1063:         return (hrows, frows),(hrows, frows)
  1109:         return CanvasCombine(combinelist)
  1118:                 return key
  1119:             return self.header.keypress((maxcol,),key)
  1122:                 return key
  1123:             return self.footer.keypress((maxcol,),key)
  1125:             return key
  1131:         if remaining <= 0: return key
  1134:             return key
  1135:         return self.body.keypress( (maxcol, remaining), key )
  1153:                 return False
  1154:             return self.header.mouse_event( (maxcol,), event,
  1163:                 return False
  1164:             return self.footer.mouse_event( (maxcol,), event,
  1174:             return False
  1175:         return self.body.mouse_event( (maxcol, maxrow-htrim-ftrim),
  1179:         """Return the cursor coordinates of the focus widget."""
  1181:             return None
  1183:             return None
  1200:             return None
  1203:         return x, y + row_adjust
  1207:         Return an iterator over the positions in this Frame top to bottom.
  1217:         Return an iterator over the positions in this Frame bottom to top.
  1318:         return ml
  1336:             # return the old item type names
  1342:         return ml
  1359:         return self._contents
  1392:         Return a new options tuple for use in a Pile's :attr:`contents` list.
  1400:             return (PACK, None)
  1403:         return (height_type, height_amount)
  1417:             return self._set_focus_position(item)
  1421:                 return
  1426:         Return the widget in focus, for backwards compatibility.  You may
  1431:             return None
  1432:         return self.contents[self.focus_position][0]
  1449:         Return the index of the widget in focus or None if this Pile is
  1454:         return self.contents.focus
  1473:         """Return the preferred column for the cursor, or None."""
  1475:             return None
  1477:         return self.pref_col
  1481:         Return a size appropriate for passing to self.contents[i][0].render
  1486:             return (maxcol, height)
  1490:             return (maxcol, item_rows[i])
  1492:             return (maxcol,)
  1496:         Return a list of the number of rows used by each widget
  1514:             return l
  1546:         return l
  1569:             return SolidCanvas(" ", size[0], (size[1:]+(0,))[0])
  1576:         return out
  1579:         """Return the cursor coordinates of the focus widget."""
  1581:             return None
  1583:             return None
  1601:             return None
  1608:         return x, y
  1611:         return sum(self.get_item_rows(size, focus))
  1617:             return key
  1628:                 return key
  1645:                 return
  1657:             return
  1660:         return key
  1666:             return
  1687:             return False
  1690:             return False
  1696:                 return False
  1699:         return True
  1714:             return False
  1722:             return False
  1725:         return w.mouse_event(tsize, event, button, col, row-wrow,
  1770:         are calculated as the largest rows() returned from all columns
  1838:         return ml
  1856:             # return the old column type names
  1862:         return ml
  1883:         return ml
  1901:         return PACK in self.column_types
  1911:         return self._contents
  1925:         Return a new options tuple for use in a Pile's .contents list.
  1949:         return (width_type, width_amount, box_widget)
  1969:         Return the focus column index.
  1974:         return self.focus_position
  1985:             return self._set_focus_position(item)
  1989:                 return
  1994:         Return the widget in focus, for backwards compatibility.  You may
  1999:             return None
  2000:         return self.contents[self.focus_position][0]
  2006:         Return the index of the widget in focus or None if this Columns is
  2011:         return self.contents.focus
  2039:         Return a list of column widths.
  2048:             return self._cache_column_widths
  2096:         return widths
  2100:         Render columns and return canvas.
  2138:             return SolidCanvas(" ", size[0], (size[1:]+(1,))[0])
  2143:         return canv
  2146:         """Return the cursor coordinates from the focus widget."""
  2150:             return None
  2152:             return None
  2156:             return None
  2164:             return None
  2168:         return x, y
  2197:             return False
  2211:                 return False
  2215:         return True
  2227:                 return False
  2241:                 return False
  2244:                 return w.mouse_event((end - x, self.rows(size)), event, button,
  2246:             return w.mouse_event((end - x,) + size[1:], event, button,
  2248:         return False
  2251:         """Return the pref col from the column in focus."""
  2256:             return 0
  2273:         return col
  2277:         Return the number of rows required by the columns.
  2290:         return rows
  2300:         if self.focus_position is None: return key
  2304:             return key
  2319:             return key
  2331:             return
  2332:         return key

PythonVenv\Lib\site-packages\urwid\curses_display.py:
   88:             return
  160:             return
  173:             return
  188:             return self._getch_nodelay()
  194:         return self.s.getch()
  206:         return self.s.getch()
  229:                 return None
  230:             return int( (s+0.05)*10 )
  237:         """Return pending input as a list.
  239:         raw_keys -- return raw keycodes as well as translated versions
  241:         This function will immediately return all the input since the
  243:         wait before returning an empty list.  The wait time may be
  246:         If raw_keys is False (default) this function will return a list
  247:         of keys pressed.  If raw_keys is True this function will return
  250:         Examples of keys returned:
  270:         Examples of mouse events returned:
  283:         # return "no key" between "window resize" commands
  306:             return keys, raw
  307:         return keys
  355:         return processed, raw
  417:         return l
  426:         return str
  436:         return self._dbg_instr()
  444:         """Return the terminal dimensions (num columns, num rows)."""
  446:         return cols,rows
  452:             return
  502:                 return
  534:                         return
  592:         text += ["","return values from get_input(): (q exits)", ""]

PythonVenv\Lib\site-packages\urwid\decoration.py:
    52:         return self.__super._repr_words() + [repr(self._original_widget)]
    55:         return self._original_widget
    63:         Return the widget without decorations.  If there is only one
    78:         return w
    83:         return self._original_widget.selectable()
    86:         return self._original_widget.sizing()
   160:         return d
   165:         return dict(self._attr_map)
   190:             return dict(self._focus_map)
   221:         Render wrapped widget and apply attribute. Return canvas.
   229:         return canv
   266:         return d
   274:         return self.attr_map[None]
   290:             return focus_map[None]
   316:         return getattr(self._original_widget, name)
   320:         return self._original_widget.sizing()
   352:         return dict(self.__super._repr_attrs(), height=self.height)
   359:         return set([FLOW])
   363:         Return the predetermined height (behave like a flow widget)
   368:         return self.height
   375:             return None
   376:         return self._original_widget.get_cursor_coords((maxcol, self.height))
   381:             return None
   382:         return self._original_widget.get_pref_col((maxcol, self.height))
   386:         return self._original_widget.keypress((maxcol, self.height), key)
   391:             return True
   392:         return self._original_widget.move_cursor_to_coords((maxcol,
   398:             return False
   399:         return self._original_widget.mouse_event((maxcol, self.height),
   406:         return canv
   412:         return getattr(self.box_widget, name)
   518:             return set([FLOW])
   519:         return self.original_widget.sizing()
   528:         return remove_defaults(attrs, Padding.__init__)
   532:         Return the padding alignment setting.
   534:         return simplify_align(self._align_type, self._align_amount)
   546:         Return the padding width.
   548:         return simplify_width(self._width_type, self._width_amount)
   572:             return canv
   578:         return canv
   581:         """Return the number of columns to pad on the left and right.
   587:             return calculate_left_right_padding(maxcol,
   595:             return calculate_left_right_padding(maxcol,
   599:         return calculate_left_right_padding(maxcol,
   605:         """Return the rows needed for self.original_widget."""
   611:             return prows
   614:             return frows
   615:         return self._original_widget.rows((maxcol-left-right,), focus=focus)
   622:         return self._original_widget.keypress(maxvals, key)
   625:         """Return the (x,y) coordinates of cursor within self._original_widget."""
   627:             return None
   632:             return None
   635:             return None
   637:         return x+left, y
   642:         Returns True if move succeeded, False otherwise.
   645:             return True
   655:         return self._original_widget.move_cursor_to_coords(maxvals, x, y)
   660:             return False
   664:             return False
   666:         return self._original_widget.mouse_event(maxvals, event, button, x-left, y,
   671:         """Return the preferred column from self._original_widget, or None."""
   673:             return None
   679:             return x+left
   680:         return x
   770:         return set([BOX]) # always a box widget
   779:         return remove_defaults(attrs, Filler.__init__)
   787:         """Return selectable from body."""
   788:         return self._original_widget.selectable()
   792:         Return the number of rows to pad on the top and bottom.
   800:             return calculate_top_bottom_filler(maxrow,
   805:         return calculate_top_bottom_filler(maxrow,
   828:             return canv
   830:         return canv
   837:             return self._original_widget.keypress((maxcol,), key)
   840:         return self._original_widget.keypress((maxcol,maxrow-top-bottom), key)
   843:         """Return cursor coords from self.original_widget if any."""
   846:             return None
   855:             return None
   859:         return x, y+top
   862:         """Return pref_col from self.original_widget if any."""
   865:             return None
   874:         return x
   880:             return True
   884:             return False
   887:             return self._original_widget.move_cursor_to_coords((maxcol,),
   889:         return self._original_widget.move_cursor_to_coords(
   896:             return False
   900:             return False
   903:             return self._original_widget.mouse_event((maxcol,),
   905:         return self._original_widget.mouse_event((maxcol, maxrow-top-bottom),
   918:         return False
   920:         return self._original_widget.rows(size, False)
   922:         return self._original_widget.sizing()
   924:         return self._original_widget.pack(size, False)
   927:         return CompositeCanvas(canv)
   935:         return (align, None)
   937:         return align
   948:         return (align_type, align_amount)
   949:     return align_type
   957:         return (width, None)
   959:         return (GIVEN, width)
   961:         return width
   972:         return width_type
   974:         return width_amount
   975:     return (width_type, width_amount)
   983:         return (valign, None)
   986:         return valign
   997:         return (valign_type, valign_amount)
   998:     return valign_type
  1006:         return (height, None)
  1009:         return height
  1011:         return (GIVEN, height)
  1022:         return height_type
  1024:         return height_amount
  1025:     return (height_type, height_amount)
  1031:     Return the amount of filler (or clipping) on the top and
  1091:     return top, bottom
  1097:     Return the amount of padding (or clipping) on the left and
  1162:     return left, right

PythonVenv\Lib\site-packages\urwid\display_common.py:
  153:     Lookup returns (index into values)+1
  168:     return lookup_table
  202:     """Return ths color number for gray number gnum.
  204:     Color cube black and white are returned for 0 and 25 respectively
  212:         return _CUBE_BLACK
  214:         return _CUBE_WHITE_256
  215:     return _GRAY_START_256 + gnum
  219:     """Return ths color number for gray number gnum.
  221:     Color cube black and white are returned for 0 and 9 respectively
  229:         return _CUBE_BLACK
  231:         return _CUBE_WHITE_88
  232:     return _GRAY_START_88 + gnum
  237:     return "#%06x" %(num)
  241:     Return a string description of color number num.
  262:         return 'h%d' % num
  268:         return '#%x%x%x' % (_CUBE_STEPS_256_16[r], _CUBE_STEPS_256_16[g],
  270:     return 'g%d' % _GRAY_STEPS_256_101[num - _GRAY_START_256]
  274:     Return a string description of color number num.
  295:         return 'h%d' % num
  300:         return '#%x%x%x' % (_CUBE_STEPS_88_16[r], _CUBE_STEPS_88_16[g],
  302:     return 'g%d' % _GRAY_STEPS_88_101[num - _GRAY_START_88]
  309:         return (r << 16) + (g << 8) + b
  312:         return None
  315:         return int(h, 16)
  318:         return int(h, 16)
  319:     return None
  323:     Return a color number for the description desc.
  329:     Returns None if desc is invalid.
  342:         return None
  348:                 return None
  349:             return num
  355:                 return None
  362:             return _CUBE_START + (r * _CUBE_SIZE_256 + g) * _CUBE_SIZE_256 + b
  369:                 return None
  375:                 return None
  378:             return None
  380:             return _CUBE_BLACK
  383:             return _CUBE_WHITE_256
  384:         return _GRAY_START_256 + gray
  387:         return None
  393:         return None
  400:     return _color_desc_256(c256)
  405:     Return a color number for the description desc.
  411:     Returns None if desc is invalid.
  427:         return None
  433:                 return None
  434:             return num
  440:                 return None
  447:             return _CUBE_START + (r * _CUBE_SIZE_88 + g) * _CUBE_SIZE_88 + b
  454:                 return None
  460:                 return None
  463:             return None
  465:             return _CUBE_BLACK
  468:             return _CUBE_WHITE_88
  469:         return _GRAY_START_88 + gray
  472:         return None
  562:         Return the maximum colors required for this object.
  564:         Returns 256, 88, 16 or 1.
  567:             return 88
  569:             return 256
  571:             return 2**24
  573:             return 16
  574:         return 1
  579:         Return an executable python representation of the AttrSpec
  586:         return "%s(%s)" % (self.__class__.__name__, args)
  589:         """Return only the color component of the foreground."""
  591:             return 'default'
  593:             return _BASIC_COLORS[self.foreground_number]
  595:             return _color_desc_88(self.foreground_number)
  597:             return _color_desc_true(self.foreground_number)
  598:         return _color_desc_256(self.foreground_number)
  601:         return (self._foreground_color() +
  635:             # _parse_color_*() return None for unrecognised colors
  650:         """Return the background color."""
  652:             return 'default'
  654:             return _BASIC_COLORS[self.background_number]
  656:             return _color_desc_88(self.background_number)
  658:             return _color_desc_true(self.background_number)
  659:         return _color_desc_256(self.background_number)
  686:         Return (fg_red, fg_green, fg_blue, bg_red, bg_green, bg_blue) color
  691:         will be returned as None.
  710:             return vals + (None, None, None)
  713:             return vals + _COLOR_VALUES_88[self.background_number]
  716:             return vals + tuple([int(x, 16) for x in [h[0:2], h[2:4], h[4:6]]])
  718:             return vals + _COLOR_VALUES_256[self.background_number]
  721:         return isinstance(other, AttrSpec) and self._value == other._value
  724:         return not self == other
  739:         This function returns the current settings as a tuple.
  753:             return
  779:         return skeys
  814:         return StoppingContext(self)
  834:             return fn()
  946:                 return False
  950:             return num > 15

PythonVenv\Lib\site-packages\urwid\escape.py:
   71:     return "shift "*(mode&1) + "meta "*((mode&2)//2) + "ctrl "*((mode&4)//4)
  154:             return self.add(root[ord(s[0])], s[1:], result)
  158:             return self.add(d, s[1:], result)
  165:         return result
  170:                 return self.read_mouse_info(keys,
  173:                 return self.read_sgrmouse_info (keys, more_available)
  174:             return (root, keys)
  179:             return None
  181:             return None
  182:         return self.get_recurse(root[keys[0]], keys[1:], more_available)
  188:             return None
  215:         return ( (prefix + "mouse " + action, button, x, y), keys[3:] )
  225:             return None
  239:             return None
  264:         return ( ("mouse " + action, button, x, y), keys[pos_m + 1:] )
  270:         user's terminal.  Returned as ('cursor position', x, y)
  276:             return None
  278:             return None
  286:                     return None
  289:                 return None
  291:                 return None
  296:             return None
  303:                     return None
  304:                 return (("cursor position", x-1, y-1), keys[i:])
  306:                 return None
  308:                 return None
  313:         return None
  379:     returns (list of input, list of remaining key codes).
  384:         return [key], codes[1:]
  386:         return [_keyconv[code]], codes[1:]
  388:         return ["ctrl %s" % chr(ord('a')+code-1)], codes[1:]
  390:         return ["ctrl %s" % chr(ord('A')+code-1)], codes[1:]
  402:                 return [db], codes[2:]
  411:             return ["<%d>"%code], codes[1:]
  418:                     return ["<%d>"%code], codes[1:]
  421:                 return ["<%d>"%code], codes[1:]
  427:             return [s.decode("utf-8")], codes[need_more+1:]
  429:             return ["<%d>"%code], codes[1:]
  433:         return [key], codes[1:]
  435:         return ["<%d>"%code], codes[1:]
  441:         return [result], remaining_codes
  448:             return ['esc'] + run, remaining_codes
  450:             return ['esc']+run, remaining_codes
  451:         return ['meta '+run[0]]+run[1:], remaining_codes
  453:     return ['esc'], codes[1:]
  483:     return ESC+"[%d;%dH" %(y+1, x+1)
  486:     if x < 1: return ""
  487:     return ESC+"[%dC" % x
  490:     if x < 1: return ""
  491:     return ESC+"[%dA" % x
  494:     if x < 1: return ""
  495:     return ESC+"[%dB" % x

PythonVenv\Lib\site-packages\urwid\font.py:
   32:     """return (dictionary of glyphs, utf8 required)"""
   82:     return dout, utf8_required
   87:     Return a list of (font name, font class) tuples.
   89:     return _all_fonts[:]
  109:             return obj
  111:             return obj.decode(encoding, errors)
  121:         return "".join(l)
  125:             return self.char[c][0]
  126:         return 0
  129:         return self.char[c][1]
  133:             return self.canvas[c]
  144:         return canv

PythonVenv\Lib\site-packages\urwid\graphics.py:
    54:         Returns (text, attributes).
    56:         return self.text, self.attrib
    67:         return cols, rows
    97:         return canv
   208:             return " %s " % text
   210:             return ""
   220:         Return the number of screen columns and rows required for
   231:         return size
   380:         Return (bardata, top, hlines)
   385:         This implementation will truncate the bardata list returned
   393:             return bardata[:len(widths)], top, hlines
   395:         return bardata, top, hlines
   409:         Return a list of bar widths, one for each bar in data.
   417:             return [self.bar_width] * min(
   421:             return [1] * maxcol
   431:         return widths
   435:         Return False.
   437:         return False
   440:         return self.satt and get_encoding_mode() == "utf8"
   462:         return disp
   515:             return rout
   537:         return o
   554:                 return (bt1, w1), None, None
   562:                 return (bt1, wmin), l1, l2
   565:                     return (bt2, wmin), l1, l2
   566:                 return (bt1, wmin), l1, l2
   567:             return ((bt2, bt1, 8 - r), wmin), l1, l2
   608:         return [(y // 8, row) for (y, row) in o]
   641:         return canv
   654:     Returns a structure as follows:
   688:                 return
   784:     return rowsets
   822:         Return False.
   824:         return False
   849:             return SolidCanvas(" ", size[0], size[1])
   854:         return c
   860:     Return a list of bar values aliased to integer values of maxrow.
   862:     return [maxrow - int(float(v) * maxrow / top + 0.5) for v in bar]
   893:         ...         return u'Foobar'
   928:         return 1
   932:         Return the progress bar percentage text.
   936:         return str(percent) + " %"
   975:         return c
   998:         Return the size from our pre-rendered canvas.
  1000:         return self._canvas.cols(), self._canvas.rows()
  1004:         Return the pre-rendered canvas.
  1007:         return self._canvas

PythonVenv\Lib\site-packages\urwid\html_fragment.py:
  139:         """Return the next screen size in HtmlGenerator.sizes."""
  141:             raise HtmlGeneratorSimulationError("Ran out of screen sizes to return!")
  142:         return self.sizes.pop(0)
  145:         """Return the next list of keypresses in HtmlGenerator.keys."""
  149:             return (self.keys.pop(0), [])
  150:         return self.keys.pop(0)
  170:         if not s: return ""
  171:         return ('<span style="color:%s;'
  178:         return (html_span(html_fg, html_bg, s[:c_off]) +
  182:         return html_span(html_fg, html_bg, s)
  190:     return text
  200:     sizes -- list of ( columns, rows ) tuples to be returned by each call
  202:     keys -- list of lists of keys to be returned by each call to
  246:     """Return screenshots as a list of HTML fragments."""
  249:     return l

PythonVenv\Lib\site-packages\urwid\lcd_display.py:
   50:         return self.DISPLAY_SIZE
  135:         # Return the center 16 bits, making this CRC match the one‚Äôs
  137:         return ((~newCRC)>>8) & 0xffff
  153:         returns (command/report code, data) or None
  164:                 return command, data
  166:                 return
  179:         Try to read a packet from the start of data, returning
  195:         return (command, data[2:2 + plen], data[4 + plen:])
  224:             return # ignore extra release events
  231:         Return (remaining, key) where remaining is the number of seconds
  236:             return
  238:             return max(0, self.pressed[key] + self.repeat_delay
  247:             return # ignore event that shouldn't have been sent
  251:             return
  323:         return the fd from our serial device so we get called
  326:         return [self._device.fd]
  330:         Return a (next_input_timeout, keys_pressed, raw_keycodes)
  378:         return timeout, input, []
  387:             return

PythonVenv\Lib\site-packages\urwid\listbox.py:
    54:             return self[focus], focus
    56:             return None, None
    67:             return self[position], position
    69:             return None, None
    80:             return self[position], position
    82:             return None, None
   106:         Return self.
   110:         return self
   140:         Return position after start_from.
   144:                 return 0
   146:         return position + 1
   150:         Return position before start_from.
   154:                 return len(self) - 1
   156:         return position - 1
   160:         Optional method for returning an iterable of positions.
   163:             return xrange(len(self) - 1, -1, -1)
   164:         return xrange(len(self))
   208:         Return position after start_from.
   212:                 return 0
   214:         return position + 1
   218:         Return position before start_from.
   222:                 return len(self) - 1
   224:         return position - 1
   228:         Optional method for returning an iterable of positions.
   231:             return xrange(len(self) - 1, -1, -1)
   232:         return xrange(len(self))
   281:         return self._body
   298:         Returns the widgets that would be displayed in
   303:         :returns: (*middle*, *top*, *bottom*) or (``None``, ``None``, ``None``)
   327:             return None,None,None
   425:         # 5. return the interesting bits
   426:         return ((offset_rows - inset_rows, focus_widget,
   433:         Render ListBox and return canvas.
   442:             return SolidCanvas(" ", maxcol, maxrow)
   495:         return final_canvas
   507:             return None
   511:             return None
   516:             return None
   517:         return (x, y)
   554:         Return a `(focus widget, focus position)` tuple, for backwards
   558:         return self._body.get_focus()
   562:         Return the widget in focus according to our :obj:`list walker <ListWalker>`.
   564:         return self._body.get_focus()[0]
   570:         Return the list walker position of the widget in focus. The type
   571:         of value returned depends on the :obj:`list walker <ListWalker>`.
   577:         return pos
   588:         return ListBoxContents()
   594:                 return (getitem(key), None)
   602:                 return self._body.get_focus()[0]
   624:         Return None as a placeholder for future options.
   626:         return None
   640:             return
   659:             return
   666:             return
   676:                 return
   686:             return self._set_focus_first_selectable(
   689:             return self._set_focus_valign_complete(
   698:             return
   714:                 return
   721:                 return
   776:         if widget is None: return
   868:                 return # must either know row or coming_from
   872:             return
   904:         """Return (offset rows, inset rows) for focus widget."""
   917:         return offset_rows, inset_rows
   926:             return
   928:             return
   930:             return
   933:             return
   940:             return
   944:             return
   965:             return key
   971:                 return None
   975:                 return key
   979:             return actual_key(self._keypress_up((maxcol, maxrow)))
   982:             return actual_key(self._keypress_down((maxcol, maxrow)))
   985:             return actual_key(self._keypress_page_up((maxcol, maxrow)))
   988:             return actual_key(self._keypress_page_down((maxcol, maxrow)))
   991:             return actual_key(self._keypress_max_left((maxcol, maxrow)))
   994:             return actual_key(self._keypress_max_right((maxcol, maxrow)))
   996:         return key
  1001:         return True
  1006:         return True
  1013:         if middle is None: return True
  1029:                 return
  1040:                 return True # keypress not handled
  1047:                 return
  1054:                 return
  1057:             return
  1069:                         return # can't do anything
  1079:                 return
  1090:         if middle is None: return True
  1106:                 return
  1118:                 return True # keypress not handled
  1124:                 return
  1133:                 return
  1139:             return
  1151:                         return # can't do anything
  1161:                 return
  1172:         if middle is None: return True
  1275:                 pass #return
  1297:             return
  1301:             return
  1304:             # if we're at the top and have a selectable, return
  1306:                 pass #return
  1325:             return
  1336:             return
  1340:             return
  1345:             return
  1357:         if middle is None: return True
  1477:             return
  1481:             return
  1500:             return
  1512:             return
  1516:             return
  1521:             return
  1536:             return False
  1553:             return False
  1561:             return False
  1563:         return w.mouse_event((maxcol,), event, button, col, row-wrow,
  1569:         Return a list that may contain ``'top'`` and/or ``'bottom'``.
  1571:         i.e. this function will return one of: [], [``'top'``],
  1582:             return ['top','bottom']
  1603:         return l
  1607:         Return an iterator over the positions in this ListBox.
  1618:             return
  1622:             return
  1636:         Return a reversed iterator over the positions in this ListBox.
  1648:             return
  1652:             return

PythonVenv\Lib\site-packages\urwid\main_loop.py:
   174:         return self.event_loop.alarm(sec, cb)
   179:         within the :meth:`run` function. Returns a handle that may be passed to
   190:         return self.event_loop.alarm(tm - time.time(), cb)
   194:         Remove an alarm. Return ``True`` if *handle* was found, ``False``
   197:         return self.event_loop.remove_alarm(handle)
   208:         This method returns a file descriptor attached to the write end of a
   217:         Data may be written to the returned file descriptor with
   222:         If the callback returns ``False`` then the watch will be removed from
   240:         return pipe_wr
   248:         Returns ``True`` if the watch pipe exists, ``False`` otherwise
   253:             return False
   256:             return False
   258:         return True
   265:         Returns a handle that may be passed to :meth:`remove_watch_file`.
   267:         return self.event_loop.watch_file(fd, callback)
   271:         Remove a watch file. Returns ``True`` if the watch file
   274:         return self.event_loop.remove_watch_file(handle)
   294:         >>> w.render_rval = "fake canvas"  # *_rval is used for return values
   356:         return StoppingContext(self)
   380:                 return self._run_screen_event_loop()
   492:         *keys* is a list of input returned from :attr:`screen`'s get_input()
   495:         Returns ``True`` if any key was handled by a widget or the
   523:         return something_handled
   544:         passed to the constructor. That function must return a list of keys to
   546:         defined this implementation will return all the input events.
   549:             return self._input_filter(keys, raw)
   550:         return keys
   561:         The *unhandled_input* function should return ``True`` if it handled
   565:             return self._unhandled_input(input)
   604:         Returns a handle that may be passed to remove_alarm()
   617:         Returns a handle that may be passed to remove_idle()
   627:         Returns True if the alarm exists, False otherwise
   637:         Returns True if the handle was removed.
   647:         Returns True if the input file exists, False otherwise
   667:         Returns a handle that may be passed to remove_watch_file()
   680:         and returns the resulting value.
   686:         return signal.signal(signum, handler)
   705:         Returns a handle that may be passed to remove_alarm()
   713:         return handle
   719:         Returns True if the alarm exists, False otherwise
   724:             return True
   726:             return False
   733:         Returns a handle that may be passed to remove_watch_file()
   739:         return fd
   745:         Returns True if the input file exists, False otherwise
   749:             return True
   750:         return False
   756:         Returns a handle that may be passed to remove_idle()
   760:         return self._idle_handle
   766:         Returns True if the handle was removed.
   771:             return False
   772:         return True
   854:         Returns a handle that may be passed to remove_alarm()
   863:             return False
   866:         return (fd, callback)
   878:             immediately returns None.
   880:             Returns None in all cases (unlike :func:`signal.signal()`).
   901:             return
   909:             return
   913:             return self.GLib.SOURCE_CONTINUE
   922:         Returns True if the alarm exists, False otherwise
   927:             return True
   929:             return False
   936:         Returns a handle that may be passed to remove_watch_file()
   945:             return True
   948:         return fd
   954:         Returns True if the input file exists, False otherwise
   959:             return True
   960:         return False
   966:         Returns a handle that may be passed to remove_enter_idle()
   970:         return self._idle_handle
   974:             return
   982:         return False # ask glib not to call again (or we would be called
   988:         Returns True if the handle was removed.
   993:             return False
   994:         return True
  1023:                 return f(*args,**kargs)
  1031:             return False
  1032:         return wrapper
  1058:             return getattr(self.__poll_obj, name)
  1071:                 return events
  1084:             return events
  1091:             return  # we already patched this instance
  1118:         return handle
  1125:             return False
  1127:             return True
  1136:         return handle
  1141:             return False
  1144:             return True
  1151:         return handle
  1156:         return cb is not None
  1162:                 return func(*args, **kw)
  1168:             return False
  1169:         return wrapper
  1190:         return self._fileno
  1193:         return self.cb()
  1240:         Returns a handle that may be passed to remove_alarm()
  1246:         return handle
  1252:         Returns True if the alarm exists, False otherwise
  1257:             return True
  1259:             return False
  1261:             return False
  1268:         Returns a handle that may be passed to remove_watch_file()
  1277:         return fd
  1283:         Returns True if the input file exists, False otherwise
  1288:             return True
  1289:         return False
  1295:         Returns a handle that may be passed to remove_enter_idle()
  1299:         return self._idle_handle
  1312:             return
  1326:         Returns True if the handle was removed.
  1331:             return False
  1332:         return True
  1340:             return
  1372:             return rval
  1373:         return wrapper
  1400:         Returns a handle that may be passed to remove_alarm()
  1405:         return self._loop.call_later(seconds, callback)
  1411:         Returns True if the alarm exists, False otherwise
  1420:         return existed
  1427:         Returns a handle that may be passed to remove_watch_file()
  1433:         return fd
  1439:         Returns True if the input file exists, False otherwise
  1441:         return self._loop.remove_reader(handle)
  1447:         Returns a handle that may be passed to remove_idle()
  1461:         return mutable_handle
  1467:         Returns True if the handle was removed.
  1470:         return self.remove_alarm(handle[0])
  1531:             return self._rval
  1537:                 return Reflect(self._name+"."+attr, getattr(self, attr+"_rval"))
  1538:             return Reflect(self._name+"."+attr)
  1539:     return Reflect(name)

PythonVenv\Lib\site-packages\urwid\monitored_list.py:
   31:         return rval
   32:     return call_modified_wrapper
   45:         time the list is modified.  Callback's return value is ignored.
   66:         return "%s(%r)" % (self.__class__.__name__, list(self))
  123:         return "%s(%r, focus=%r)" % (
  128:         Return the index of the item "in focus" or None if
  136:             return None
  137:         return self._focus
  163:             return
  212:         return None
  218:         It may also return an integer position to be the new focus after the
  239:         returns focus position for after change is applied
  247:             return focus
  266:         return min(focus, len(self) + num_new_items - num_removed -1)
  303:         return rval
  340:         return rval
  344:             return self.__delitem__(slice(i,j))
  347:             return self.__setitem__(slice(i, j), y)
  371:         return rval
  386:         return rval
  401:         return rval
  417:         return rval
  439:         return rval
  456:         return rval
  466:         return rval
  475:             return
  479:         return rval
  486:             return rval

PythonVenv\Lib\site-packages\urwid\numedit.py:
   47:         Return true for allowed characters.
   49:         return len(ch) == 1 and ch.upper() in self._allowed
   79:         return unhandled
  170:         Return the numeric value of self.edit_text.
  178:             return Decimal(int(self.edit_text, self.base))
  180:         return None
  191:         preserveSignificance -- return value has the same signif. as default
  265:         Return the numeric value of self.edit_text.
  284:             return Decimal(fmt.format(ip=ip, fp=int(fp)))
  286:         return None

PythonVenv\Lib\site-packages\urwid\old_str_util.py:
   82:     """Return the screen column width for unicode ordinal o."""
   85:         return 0
   88:             return wid
   89:     return 1
   93:     Return (ordinal at pos, next position) for UTF-8 encoded text.
   98:         return b1, pos+1
  103:         return error
  107:             return error
  110:             return error
  111:         return o, pos+2
  113:         return error
  117:             return error
  120:             return error
  123:             return error
  124:         return o, pos+3
  126:         return error
  130:             return error
  133:             return error
  136:             return error
  139:             return error
  140:         return o, pos+4
  141:     return error
  147:     return ord(text[i]), i+1
  151:     Return (ordinal at pos, next position) for UTF-8 encoded text.
  160:             return o, p-1
  163:             return error
  171:     return _byte_encoding
  181:     Returns (position, actual_col).
  195:                 return i, sc
  198:         return i, sc
  203:         return end_offs, end_offs-start_offs
  207:     return i, i-start_offs
  211:     Return the screen column width of text between start_offs and end_offs.
  235:         return sc
  236:     # "wide", "narrow" or all printable ASCII, just return the character count
  237:     return end_offs - start_offs
  247:         return get_width(o) == 2
  251:         return get_width(o) == 2
  253:         return within_double_byte(text, offs, offs) == 1
  254:     return False
  258:     Return the position of the character before end_offs.
  262:         return end_offs-1
  268:         return o
  271:         return end_offs-2
  272:     return end_offs-1
  276:     Return the position of the character after start_offs.
  280:         return start_offs+1
  286:         return o
  289:         return start_offs +2
  290:     return start_offs+1
  293:     """Return whether pos is within a double-byte encoded character.
  299:     Return values:
  309:         if pos == line_start: return 0
  313:                 return 2
  314:         return 0
  316:     if v < 0x80: return 0
  325:         return 1
  326:     return 2

PythonVenv\Lib\site-packages\urwid\raw_display.py:
   108:         """Returns the fileno of the input stream, or None if it doesn't have one.  A stream without a fileno can't participate in whatever.
   111:             return self._term_input_file.fileno()
   113:             return None
   195:             return
   210:             return
   212:             return
   214:             return
   222:             return
   257:                 self._dwOriginalOutMode.value | win32.ENABLE_VIRTUAL_TERMINAL_PROCESSING | win32.DISABLE_NEWLINE_AUTO_RETURN)
   280:         return super(Screen, self)._start()
   343:         """Return pending input as a list.
   345:         raw_keys -- return raw keycodes as well as translated versions
   347:         This function will immediately return all the input since the
   349:         wait before returning an empty list.  The wait time may be
   352:         If raw_keys is False (default) this function will return a list
   353:         of keys pressed.  If raw_keys is True this function will return
   356:         Examples of keys returned:
   376:         Examples of mouse events returned:
   414:             return keys, raw
   415:         return keys
   419:         Return a list of integer file descriptors that should be
   428:             return []
   436:         return fd_list
   497:         return wrapper
   501:         Return any currently-available input.  Does not block.
   519:         return codes
   575:             return processed, processed_codes
   584:         return codes
   594:         return codes
   619:         return ready
   629:                 return ord(self._term_input_file.recv(1))
   631:                 return ord(os.read(fd, 1))
   632:         return -1
   642:             return []
   718:         return l
   721:         return self._getch(0)
   725:         """Return the terminal dimensions (num columns, num rows)."""
   745:         return x, y
   752:             return
   773:         # quick return if nothing has changed
   775:             return
   781:             return
   786:             # returns True if the screen is in partial display mode
   788:             return self._rows_used is not None
   803:                 return escape.set_cursor_position(0, 0)
   804:             return (escape.CURSOR_HOME_COL +
   809:                 return escape.set_cursor_position(0, y)
   810:             return escape.move_cursor_down(y - cy)
   814:                 return escape.set_cursor_position(x, y)
   816:                 return ('\b' + escape.CURSOR_HOME_COL +
   819:             return ('\b' + escape.CURSOR_HOME_COL +
   825:                 return False
   827:                 return False
   828:             return True
   832:                 return self._pal_escape[a]
   834:                 return self._attrspec_to_escape(a)
   837:             return self._attrspec_to_escape(
   842:             return isinstance(a, AttrSpec) and (a.standout or a.underline)
   932:             return
   991:         return new_row, z_col-y_col, (y_attr, y_cs, y_text)
  1019:             return fg + bg
  1053:         return escape.ESC + "[0;%s;%s%sm" % (fg, st, bg)
  1078:             return
  1098:             return
  1109:             return aspec.get_rgb_values()[:3]
  1165:                 return

PythonVenv\Lib\site-packages\urwid\signals.py:
   45:         return getattr(obj, name)
   47:     return value
  145:         Returns a key associated by this signal handler, which can be
  185:         return key
  189:         return [weakref.ref(a, callback) for a in (weak_args or [])] + (user_args or [])
  213:             return
  224:                 return self.disconnect_by_key(obj, name, h[0])
  232:         :param key: the key for this signal handler, as returned by
  238:         value returned by connect_signal().
  259:         This function returns True if any of the callbacks returned True.
  266:         return result
  281:                         return False
  295:         return bool(callback(*args_to_pass))

PythonVenv\Lib\site-packages\urwid\split_repr.py:
   32:     Return a helpful description of the object using
   40:     ...         return ["words", "here"]
   42:     ...         return {'attrs': "appear too"}
   47:     ...         return Foo._repr_words(self) + ["too"]
   49:     ...         return dict(Foo._repr_attrs(self), barttr=42)
   60:         return super(self.__class__, self).__repr__()
   62:     return "<%s %s>" % (self.__class__.__name__,
   68:     Return dictionary repr sorted by keys, leave others unchanged
   78:         return "{" + ", ".join([
   81:     return repr(v)
   85:     Return strings and byte strings as they appear in Python 3
   95:             return 'b' + r
   97:             return r[1:]
   98:     return r
  106:     return value.
  110:     Returns d.
  117:     ...         return ["object"]
  120:     ...         return remove_defaults(d, Foo.__init__)
  148:     return d

PythonVenv\Lib\site-packages\urwid\text_layout.py:
   31:         """Return True if align is a supported align mode."""
   32:         return True
   34:         """Return True if wrap is a supported wrap mode."""
   35:         return True
   38:         Return a layout structure for text.
   77:         """Return True if align is 'left', 'center' or 'right'."""
   78:         return align in ('left', 'center', 'right')
   80:         """Return True if wrap is 'any', 'space', 'clip' or 'ellipsis'."""
   81:         return wrap in ('any', 'space', 'clip', 'ellipsis')
   83:         """Return a layout structure for text."""
   86:             return self.align_layout( text, width, segs, wrap, align )
   88:             return [[]]
   92:         Return a minimal maxcol value that would result in the same
   94:         returned by self.layout().
  101:                 return maxcol
  103:         return maxwidth
  119:         return out
  131:         Returns a layout structure without alignment applied.
  170:             return b
  265:         return b
  306:         Return a "sub-segment" list containing segment structures
  309:         A list is returned to handle cases where wide characters
  311:         so two or three segments will be returned.
  316:             return [] # completely gone
  321:             return [ (end-start, self.offs, bytes().ljust(pad_left) +
  333:             return l
  336:             return [(end-start,self.offs)]
  341:     Return the screen column width of one line of a text layout structure.
  352:     return sc
  356:     Return a shifted line from a layout structure to the left or right.
  366:             return [(amount,None)]+segs[1:]
  367:         return segs[1:]
  370:         return [(amount,None)]+segs
  371:     return segs
  376:     Return a trimmed line of a text layout structure.
  393:                 return s.subseg( text, start, end-x )
  405:     return l
  412:     line layout structure.  Returns None if no position found.
  422:                 return s.offs
  423:         return
  431:             return
  433:             return s.offs
  434:         return calc_text_pos( text, s.offs, s.end, s.sc-1)[0]
  443:                     return calc_text_pos( text,
  461:         return closest_pos
  463:     # return the last positions in the segment "closest_pos"
  465:     return calc_text_pos( text, s.offs, s.end, s.sc-1)[0]
  478:         return pos
  486:             if pos is not None: return pos
  490:             if pos is not None: return pos
  491:     return 0
  513:                 return x,y
  516:                 return x,y
  526:         return closest[1]
  527:     return 0,0

PythonVenv\Lib\site-packages\urwid\treetools.py:
   60:         return not self.is_leaf
   69:         return urwid.Padding(widget,
   79:         return self.indent_cols * self.get_node().get_depth()
   84:         return self._innerwidget
   87:         return urwid.Text(self.get_display_text())
   90:         return self._node
   93:         return (self.get_node().get_key() + ": " +
   97:         """Return the next TreeWidget depth first from this one."""
  101:             return firstchild
  115:             return None
  117:             return nextnode.get_widget()
  120:         """Return the previous TreeWidget depth first from this one."""
  129:                 return prevwidget
  131:                 return lastchild
  136:                 return None
  139:             return prevnode.get_widget()
  144:             return key
  153:             return self.__super.keypress(size, key)
  155:             return key
  159:             return False
  164:             return True
  166:         return False
  169:         """Return first child if expanded."""
  171:             return None
  175:                 return firstnode.get_widget()
  177:                 return None
  180:         """Return last child if expanded."""
  182:             return None
  187:                 return None
  191:                 return lastchild
  193:                 return lastdescendant
  213:         """ Return the widget for this node."""
  216:         return self._widget
  219:         return TreeWidget(self)
  226:         return self._depth
  230:             return None
  234:             return parent.get_child_index(key)
  237:         return self._key
  248:         return self._parent
  257:         return self._value
  260:         return self.get_depth() == 0
  264:             return self.get_parent().next_child(self.get_key())
  266:             return None
  270:             return self.get_parent().prev_child(self.get_key())
  272:             return None
  278:         return root
  290:         """Return a possibly ordered list of child keys"""
  293:         return self._child_keys
  301:         """Return the widget for a given key.  Create if necessary."""
  304:         return child.get_widget()
  307:         """Return the child node for a given key.  Create if necessary."""
  310:         return self._children[key]
  329:             return self.get_child_keys().index(key)
  337:         """Return the next child node in index order from the given key."""
  342:             return None
  348:             return self.get_child_node(child_keys[index])
  350:             return None
  353:         """Return the previous child node in index order from the given key."""
  356:             return None
  363:             return self.get_child_node(child_keys[index])
  365:             return None
  368:         """Return the first TreeNode in the directory."""
  370:         return self.get_child_node(child_keys[0])
  373:         """Return the last TreeNode in the directory."""
  375:         return self.get_child_node(child_keys[-1])
  379:         return len(self.get_child_keys())>0
  393:         return widget, self.focus
  403:             return None, None
  405:             return target, target.get_node()
  411:             return None, None
  413:             return target, target.get_node()
  422:         return self.unhandled_input(size, key)
  431:             return input
  451:             return
  462:                 return
  467:         return self.focus_home(size)
  470:         return self.focus_end(size)

PythonVenv\Lib\site-packages\urwid\util.py:
   50:         return locale.getlocale()[1] or ""
   54:             return ""
  109:     Returns 'narrow' for 8-bit encodings, 'wide' for CJK encodings
  112:     return str_util.get_byte_encoding()
  117:     Return (encoded byte string, character set rle).
  149:         return sis0, cout
  171:     return outstr, cout
  182:     Return True if python is able to convert non-ascii unicode strings
  185:     return _target_encoding and _target_encoding != 'ascii'
  199:     Returns (start, end, pad_left, pad_right), where:
  217:     return ( spos, pos, pad_left, pad_right )
  224:     Return ( trimmed text, trimmed attr, trimmed cs ).
  239:     return (bytes().rjust(pad_left) + text[spos:epos] +
  245:     Return the attribute at offset pos.
  249:         return None
  252:             return a
  254:     return None
  258:     """Return a sub segment of an rle list."""
  276:     return l
  281:     Return the number of characters covered by a run length
  290:     return run
  297:     MODIFIES rle parameter contents. Returns None.
  315:     MODIFIES rle parameter contents. Returns None.
  320:         return
  329:     MODIFIES attr parameter contents. Returns None.
  332:         return
  347:     if not rle1 or not rle2: return []
  363:     return l
  375:     return rle1, rle2
  381:     """Return (text string, attribute list) for tagmarkup passed."""
  390:     return text, al
  393:     """Return (text list, attribute list) for tagmarkup passed.
  413:         return rtl, ral
  421:         return _tagmarkup_recurse( element, attr )
  427:     return [tm], [(attr, len(tm))]
  432:     return type(ev) == tuple and len(ev)==4 and ev[0].find("mouse")>=0
  435:     return ev.find("press")>=0
  467:     return num // dem
  479:         return self

PythonVenv\Lib\site-packages\urwid\vterm.py:
   211:                 return str(ALT_DEC_SPECIAL_CHARS[dec_pos])
   214:                 return char
   216:             return char
   299:             return
   358:             return
   374:         return (self.tabstops[div] & (1 << mod)) > 0
   377:         return [self.empty_char(char)] * self.width
   380:         return (self.attrspec, self.charset.current, char)
   385:             return
   448:             return
   549:                 return
   554:             return
   570:             return
   575:             return
   580:             return
   595:         Process startbyte and return the number of bytes following it to get a
   606:         return length
   621:                 return
   627:                     return
   634:                         return
   659:         elif not dc and char == B("\x0d"): # carriage return
   660:             self.carriage_return()
   668:                 self.carriage_return()
   706:         Checks if x/y are within the terminal and returns the corrected version.
   726:         return x, y
   752:     def carriage_return(self):
   757:         Do a carriage return followed by a line feed.
   759:         self.carriage_return()
   841:             return
   996:             return
  1014:         Parse SGI sequence and return an AttrSpec representing the sequence
  1068:                 return 'default'
  1070:                 return _BASIC_COLORS[color]
  1079:             return None
  1081:             return AttrSpec(fg, bg)
  1134:         return attrspec
  1305:         return self.width
  1308:         return self.height
  1322:             return [self.cols()]*self.rows()
  1323:         return self.content()
  1394:         """Return the cursor coordinates for this terminal
  1397:             return None
  1413:         return (x, y)
  1441:             return
  1496:             return
  1519:             return
  1544:         return self.term
  1548:             return
  1553:             return
  1575:                 return
  1582:             return
  1590:             return key
  1595:             return
  1608:                 return
  1614:                 return
  1619:                 return
  1624:                 return key
  1629:                 return
  1638:                 return key
  1655:         # ENTER transmits both a carriage return and linefeed in LF/NL mode.

PythonVenv\Lib\site-packages\urwid\web_display.py:
   121:         return;
   138:         return;
   154:     if( ! conn ){ return;}
   156:         return;
   160:         return;
   167:         return;
   173:         return;
   178:         return;
   198:         return; // keepalive
   203:         return;
   294:     return d;
   299:         return;
   318:         return false;
   324:         return;
   347:             return false;
   353:     return false;
   369:         return;
   377:             return;
   384:     if( ! urwid_id ){ return; }
   385:     if( ! update_method ){ return; } // connection closed
   386:     if( send_queue_in == send_queue_out ){ return; }
   391:         return;
   404:             return;
   407:             return;
   412:         return;
   436:         return;
   441:         return;
   445:         return;
   638:             return util.StoppingContext(self)
   685:         return util.StoppingContext(self)
   692:             return
   713:             return fn()
   731:         if not self.pipe_name: return
   881:         """Return the screen size."""
   882:         return self.screen_size
   885:         """Return pending input as a list."""
   893:             # return on interruptions
   896:                     return [],[]
   897:                 return []
   902:                 return [],[]
   903:             return []
   927:             return l, []
   928:         return l
   939:         return ( code_fg + code_bg + s[:c_off] + "\n" +
   943:         return code_fg + code_bg + s + "\n"
   951:     return text
   956:     Return True if this is a CGI web request.
   958:     return 'REQUEST_METHOD' in os.environ
   963:     or sending the initial html page.  If returns True, then this
   973:         return False
   979:         return True
   983:         return False
   987:         return False
   994:         return True
  1000:             return True
  1012:             return True
  1015:             return True
  1023:         return True
  1031:     return True

PythonVenv\Lib\site-packages\urwid\widget.py:
   134:     Return a function that wraps the cls.render() method
   143:             return canv
   151:         return canv
   154:     return cached_render
   158:     Return a function that wraps the cls.render() method
   159:     and finalizes the canvas that it returns.
   170:         return canv
   173:     return finalize_render
   177:     Return a function that wraps the cls.render() method
   178:     and finalizes the canvas that it returns, but does not
   187:         return canv
   190:     return finalize_render
   194:     Return a function that wraps the cls.rows() method
   195:     and returns rows from the CanvasCache if available.
   203:             return canv.rows()
   205:         return fn(self, size, focus)
   207:     return cached_rows
   217:        The default :meth:`.selectable` method returns this
   223:        The default :meth:`.sizing` method returns this value.
   257:        :returns: A :class:`Canvas` subclass instance containing the
   260:        :class:`Text` widgets return a :class:`TextCanvas` (arbitrary text and
   261:        display attributes), :class:`SolidFill` widgets return a
   263:        the whole surface) and container widgets return a
   267:        If *focus* is ``False``, the returned canvas may not have a cursor
   293:        :returns: The number of rows required for this widget given a number
   325:        :returns: ``None`` if *key* was handled by this widget or
   349:           method is equivalent to having a method that always returns
   369:        :returns: ``True`` if the event was handled by this widget, ``False``
   381:           must be implemented by any widget that may return cursor
   382:           coordinates as part of the canvas that :meth:`render` returns.
   387:        :returns: (*col*, *row*) if this widget has a cursor, ``None`` otherwise
   389:        Return the cursor coordinates (*col*, *row*) of a cursor that will appear
   412:        :returns: a column number or ``'left'`` for the leftmost available
   415:        Return the preferred column for the cursor to be displayed in this
   416:        widget. This value might not be the same as the column returned from
   421:        returned to call :meth:`.move_cursor_to_coords` on the widget becoming
   432:           method is equivalent to having a method that always returns
   442:        :returns: ``True`` if the position was set successfully anywhere on
   465:         :returns: ``True`` if this is a widget that is designed to take the
   469:         This default implementation returns :attr:`._selectable`.
   474:         If this method returns ``True`` then the :meth:`.keypress` method
   477:         Returning ``False`` does not guarantee that this widget will never be in
   482:         return self._selectable
   486:         :returns: A frozenset including one or more of ``'box'``, ``'flow'`` and
   487:                   ``'fixed'``.  Default implementation returns the value of
   490:         The sizing modes returned indicate the modes that may be
   500:         If ``'flow'`` is among the values returned then the other
   505:         If ``'box'`` is among the values returned then the other
   509:         If ``'fixed'`` is among the values returned then the other
   514:         return self._sizing
   520:         :returns: A "packed" size (*maxcol*, *maxrow*) for this widget
   522:         Calculate and return a minimum
   524:         implement this method and return their size when ``()`` is passed as the
   527:         This default implementation returns the *size* passed, or the *maxcol*
   551:                 return size + (self.rows(size, focus),)
   554:         return size
   558:         and returns the one at the base.  This default implementation
   559:         returns self.
   563:         Read-only property returning the child widget in focus for
   565:         always returns ``None``, indicating that this widget has no children.
   583:         return split_repr(self)
   593:         return words + ["widget"]
   596:         return {}
   715:         return self.__super._repr_words() + [
   722:         return attrs
   726:         Return the number of lines that will be rendered.
   734:         return self.top + 1 + self.bottom
   738:         Render the divider as a canvas and return it.
   752:         return canv
   774:         return self.__super._repr_words() + [python3_repr(self.fill_char)]
   778:         Render the Fill as a canvas and return it.
   786:         return SolidCanvas(self.fill_char, maxcol, maxrow)
   848:         return first + [rest]
   854:         return remove_defaults(attrs, Text.__init__)
   882:         :returns: (*text*, *display attributes*)
   898:         return self._text, self._attrib
   901:         Read-only property returning the complete bytes/unicode content
   905:         Read-only property returning the run-length encoded display
   992:         Render contents with wrapping and alignment.  Return canvas.
  1005:         return apply_text_layout(text, attr, trans, maxcol)
  1009:         Return the number of rows the rendered text requires.
  1019:         return len(self.get_line_translation(maxcol))
  1023:         Return layout structure used to map self.text to a canvas.
  1030:                    returned from :meth:`.get_text`
  1035:         return self._cache_translation
  1048:         Return the number of screen columns and rows required for
  1068:                 return size
  1071:             return (cols, len(trans))
  1083:         return (cols, text.count('\n') + 1)
  1122:         This implementation returns True for all printable characters.
  1124:         return is_wide_char(ch,0) or (len(ch)==1 and ord(ch) >= 32)
  1136:         :param multiline: True: 'enter' inserts newline  False: return it
  1142:         :param allow_tab: True: 'tab' inserts 1-8 spaces  False: return it
  1175:         return self.__super._repr_words()[:-1] + [
  1183:         return remove_defaults(attrs, Edit.__init__)
  1187:         Returns ``(text, display attributes)``. See :meth:`Text.get_text`
  1190:         Text returned includes the caption and edit_text, possibly masked.
  1201:             return self._caption + self._edit_text, self._attrib
  1203:             return self._caption + (self._mask * len(self._edit_text)), self._attrib
  1219:             return
  1226:         Return the preferred column for the cursor, or the
  1227:         current cursor x value.  May also return ``'left'`` or ``'right'``
  1258:             return self.get_cursor_coords((maxcol,))[0]
  1260:             return pref_col
  1297:         Read-only property returning the caption for this widget.
  1375:         Return the edit text for this widget.
  1383:         return self._edit_text
  1416:         Return text converted to the same type as self.caption
  1422:             return text
  1424:             return text.encode('ascii') # follow python2's implicit conversion
  1425:         return text.decode('ascii')
  1429:         Return result of insert_text(text) without actually performing the
  1454:         return (result_text, result_pos)
  1458:         Handle editing keystrokes, return others.
  1495:             if p==0: return key
  1500:             if p >= len(self.edit_text): return key
  1517:                 return key
  1522:                 if p == 0: return key
  1532:                     return key
  1547:             return
  1551:             return key
  1556:         Returns True if move succeeded, False otherwise.
  1575:             return False
  1584:         return True
  1599:             return self.move_cursor_to_coords( (maxcol,), x, y )
  1607:         if not self.highlight: return
  1613:         return True
  1618:         Render edit widget and return canvas.  Include cursor when in
  1639:         return canv
  1645:             return trans
  1651:             return ( trans[:y]
  1655:             return ( trans[:y]
  1658:         return trans
  1663:         Return the (*x*, *y*) coordinates of cursor within widget.
  1671:         return self.position_coords(maxcol,self.edit_pos)
  1676:         Return (*x*, *y*) coordinates for an offset into self.edit_text.
  1682:         return x,y
  1690:         Return true for decimal digits.
  1692:         return len(ch)==1 and ch in "0123456789"
  1728:         return unhandled
  1732:         Return the numeric value of self.edit_text.
  1741:             return int(self.edit_text)
  1743:             return 0
  1748:     Return a mixin class that delegates all standard widget methods
  1762:             return CompositeCanvas(canv)
  1775:     return DelegateToWidgetMixin

PythonVenv\Lib\site-packages\urwid\wimp.py:
   74:         return c
   78:         Return the position of the cursor if visible.  This method
   82:             return None
   89:             return None
   90:         return x, y
   97:         return key
  104:         return frozenset([FLOW])
  162:         return self.__super._repr_words() + [
  166:         return dict(self.__super._repr_attrs(),
  189:         Return label text.
  197:         >>> print(cb.label)  #  only text is returned
  200:         return self._label.text
  233:             return
  254:         """Return the state of the checkbox."""
  255:         return self._state
  276:             return key
  321:             return False
  323:         return True
  409:             return
  416:             return
  446:         return frozenset([FLOW])
  494:         return self.__super._repr_words() + [
  512:         Return label text.
  520:         return self._label.text
  541:             return key
  563:             return False
  566:         return True
  577:         Subclass must override this method and return a widget
  585:         Subclass must override this method and have it return a dict, eg:
  606:         return canv
  642:         return self._current_widget.render(size, focus=focus)
  645:         return self._current_widget.get_cursor_coords(size)
  648:         return self._current_widget.get_pref_col(size)
  651:         return self._current_widget.keypress(size, key)
  654:         return self._current_widget.move_cursor_to_coords(size, x, y)
  657:         return self._current_widget.mouse_event(size, event, button, x, y, focus)
  660:         return self._current_widget.pack(size)

PythonVenv\Lib\site-packages\urwid\win32.py:
  11: DISABLE_NEWLINE_AUTO_RETURN = 0x0008

PythonVenv\Lib\site-packages\urwid\tests\test_container.py:
  22:                 return self.ret_rows

PythonVenv\Lib\site-packages\urwid\tests\test_doctests.py:
  25:     return tests

PythonVenv\Lib\site-packages\urwid\tests\test_graphics.py:
  10:         return [bytes().join([tl, t, tr]),

PythonVenv\Lib\site-packages\urwid\tests\test_listbox.py:
  325:         return ret_key,lbox

PythonVenv\Lib\site-packages\urwid\tests\test_vterm.py:
   55:                 return os.read(self.reader, size)
  116:             return [list(reversed(line)) for line in lines if len(line)]
  120:             return B('\n').join(lines).rstrip()
  145:     def test_carriage_return(self):

PythonVenv\Lib\site-packages\urwid\tests\util.py:
  5:         return True
  8:         return key

PythonVenv\Lib\site-packages\uvicorn\_subprocess.py:
  51:     return spawn.Process(target=subprocess_started, kwargs=kwargs)

PythonVenv\Lib\site-packages\uvicorn\config.py:
  119:     return ctx
  126:         return path.is_dir()
  128:         return False
  164:     return list(set(patterns)), directories
  169:         return []
  171:         return [dirs]
  172:     return list(set(dirs))
  347:         return mapping[self.interface]
  351:         return bool(self.ssl_keyfile or self.ssl_certfile)
  355:         return bool(self.reload or self.workers > 1)
  525:         return sock
  529:         return isinstance(self.app, str) and self.reload

PythonVenv\Lib\site-packages\uvicorn\importer.py:
  11:         return import_str
  34:     return instance

PythonVenv\Lib\site-packages\uvicorn\logging.py:
   47:             return str(level_name)  # pragma: no cover
   50:         return func(level_name)
   53:         return True  # pragma: no cover
   65:         return super().formatMessage(recordcopy)
   70:         return sys.stderr.isatty()  # pragma: no cover
   91:                 return status_and_phrase  # pragma: no cover
   94:             return func(status_and_phrase)
   95:         return status_and_phrase
  117:         return super().formatMessage(recordcopy)

PythonVenv\Lib\site-packages\uvicorn\main.py:
  49:         return

PythonVenv\Lib\site-packages\uvicorn\server.py:
   65:         return asyncio.run(self.serve(sockets=sockets))
   86:             return
   98:             return
  105:             return config.http_protocol_class(  # type: ignore[call-arg]
  127:                 return fromshare(sock_data)
  252:             return True
  254:             return self.server_state.total_requests >= self.config.limit_max_requests
  255:         return False
  315:             return

PythonVenv\Lib\site-packages\uvicorn\workers.py:
   78:         # Reset signals so Gunicorn doesn't swallow subprocess return codes
  107:         return asyncio.run(self._serve())

PythonVenv\Lib\site-packages\uvicorn\lifespan\on.py:
   66:             return
   91:                 return
  137:         return await self.receive_queue.get()

PythonVenv\Lib\site-packages\uvicorn\middleware\message_logger.py:
  24:     Return an ASGI message, with any body-type content omitted and replaced
  33:     return new_message
  66:             return message

PythonVenv\Lib\site-packages\uvicorn\middleware\proxy_headers.py:
  34:             return x_forwarded_for_hosts[0]
  38:                 return host
  40:         return None
  70:         return await self.app(scope, receive, send)

PythonVenv\Lib\site-packages\uvicorn\middleware\wsgi.py:
   79:     return environ
  152:                     return

PythonVenv\Lib\site-packages\uvicorn\protocols\utils.py:
  17:             return (str(info[0]), int(info[1])) if isinstance(info, tuple) else None
  21:             return None
  25:         return (str(info[0]), int(info[1]))
  26:     return None
  34:         return (str(info[0]), int(info[1])) if isinstance(info, tuple) else None
  37:         return (str(info[0]), int(info[1]))
  38:     return None
  42:     return bool(transport.get_extra_info("sslcontext"))
  48:         return ""
  49:     return "%s:%d" % client
  56:     return path_with_query_string

PythonVenv\Lib\site-packages\uvicorn\protocols\http\h11_impl.py:
   30:         return http.HTTPStatus(status_code).phrase.encode()
   32:         return b""
  145:             return upgrade
  146:         return None
  155:             return False
  156:         return True
  172:                 return
  213:                     return
  306:             return
  396:             result = await app(  # type: ignore[func-returns-value]
  408:                 msg = "ASGI callable should return None, but returned '%s'."
  412:                 msg = "ASGI callable returned without starting response."
  416:                 msg = "ASGI callable returned without completing response."
  447:             return
  528:             return {"type": "http.disconnect"}
  536:         return message

PythonVenv\Lib\site-packages\uvicorn\protocols\http\httptools_impl.py:
   37:     return b"".join([b"HTTP/1.1 ", str(status_code).encode(), b" ", phrase, b"\r\n"])
  141:             return upgrade
  142:         return None
  146:             return True
  152:         return False
  156:         return self._should_upgrade_to_ws(upgrade)
  167:             return
  242:             return
  290:             return
  298:             return
  307:             return
  399:             result = await app(  # type: ignore[func-returns-value]
  411:                 msg = "ASGI callable should return None, but returned '%s'."
  415:                 msg = "ASGI callable returned without starting response."
  419:                 msg = "ASGI callable returned without completing response."
  447:             return
  557:             return {"type": "http.disconnect"}
  560:         return message

PythonVenv\Lib\site-packages\uvicorn\protocols\websockets\websockets_impl.py:
   54:         return not self.closing
  159:         This hook is called to determine if the websocket should return
  202:         return self.initial_response
  209:         we return whatever subprotocol is sent in the 'accept' message.
  211:         return self.accepted_subprotocol
  232:         to call into. We just wait for close then return, and instead allow
  244:             result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
  259:                 self.logger.error("ASGI callable returned without sending handshake.")
  263:                 self.logger.error("ASGI callable should return None, but returned '%s'.", result)
  367:             return {"type": "websocket.connect"}
  374:             return {"type": "websocket.disconnect", "code": 1006}
  377:             return {"type": "websocket.disconnect", "code": 1005}
  384:                 return {"type": "websocket.disconnect", "code": 1012}
  385:             return {"type": "websocket.disconnect", "code": exc.code}
  388:             return {"type": "websocket.receive", "text": data}
  389:         return {"type": "websocket.receive", "bytes": data}

PythonVenv\Lib\site-packages\uvicorn\protocols\websockets\wsproto_impl.py:
  223:             return  # we cannot send responses anymore
  234:             result = await self.app(self.scope, self.receive, self.send)  # type: ignore[func-returns-value]
  243:                 self.logger.error("ASGI callable returned without completing handshake.")
  247:                 self.logger.error("ASGI callable should return None, but returned '%s'.", result)
  376:         return message

PythonVenv\Lib\site-packages\uvicorn\supervisors\basereload.py:
   68:         return self
   71:         return self.should_restart()
  119:         return f"'{path.relative_to(Path.cwd())}'"
  121:         return f"'{path}'"

PythonVenv\Lib\site-packages\uvicorn\supervisors\multiprocess.py:
   41:             return True
   42:         return False
   63:         return self.real_target(sockets)
   67:             return False
   69:         return self.ping(timeout)
   99:         return self.process.pid
  164:             return  # parent process is exiting, no need to keep subprocess alive
  174:                 return
  219:             return

PythonVenv\Lib\site-packages\uvicorn\supervisors\statreload.py:
  42:                 return [file]
  43:         return None
  47:         return super().restart()

PythonVenv\Lib\site-packages\uvicorn\supervisors\watchfilesreload.py:
  41:                     return True
  45:                         return False
  49:                         return False
  51:                 return True
  52:         return False
  87:             return [p for p in unique_paths if self.watch_filter(p)]
  88:         return None

PythonVenv\Lib\site-packages\uvicorn\supervisors\watchgodreload.py:
   44:             return cached_result
   51:             return False
   55:                 return True
   60:                         return False
   62:                 return True
   64:         return False
   69:             return cached_result
   75:             return False
   95:                 return False
   99:             return True
  104:                 return True
  115:                 return True
  118:         return False
  150:                 return list({Path(c[1]) for c in change})
  152:         return None

PythonVenv\Lib\site-packages\uvicorn-0.30.1.dist-info\METADATA:
  126: WSGI applications are a single, synchronous callable that takes a request and returns a response.

PythonVenv\Lib\site-packages\vine\abstract.py:
  29:                 return True
  30:         return NotImplemented
  34:         # overide to return other so `register` can be used as a decorator
  36:         return other
  47:         return self._p.then(on_success, on_error)
  50:         return self._p.cancel()
  53:         return self._p.throw1(exc)
  56:         return self._p.throw(exc, tb=tb, propagate=propagate)
  60:         return self._p.cancelled
  64:         return self._p.ready
  68:         return self._p.failed

PythonVenv\Lib\site-packages\vine\funtools.py:
   13:     """Return None if p is undefined, otherwise make sure it's a promise."""
   16:             return promise(p)
   17:     return p
   26:         return promise()
   27:     return maybe_promise(p)
   37:     return p
   48:         return p(*args, **kwargs)
   49:     return promise(_replacer)
   56:     return p
   61:     return promise(fun, args, kwargs)
   77:             return filter_(mapping[key])
   80:             return self.request(
   89:     return P
   98:         return callback(ret)
  109:             return args[0].then(p)
  111:             return p(*args, **kwargs)
  113:     return on_call

PythonVenv\Lib\site-packages\vine\promises.py:
   55:                 return self.read_header().then(
   62:                 return callback
   65:                 return self.read(4, callback)
   69:                 return self.read(body_size, callback)
  113:         """Return the callable or a weak reference.
  118:             return fun
  121:             return WeakMethod(fun)
  123:             return ref(fun)
  126:         return ('<{0} --> {1!r}>' if self.fun else '<{0}>').format(
  146:             return
  161:                 return self.throw()
  179:         return retval
  182:         return fun() if self.weak else self.fun
  189:             return callback
  201:                 return callback
  203:         return callback
  240:             return self._lvpending
  241:         return [self._svpending]

PythonVenv\Lib\site-packages\vine\synchronization.py:
  45:             # can only return NotImplemented in the case the

PythonVenv\Lib\site-packages\vine\utils.py:
  12:     return wrapper
  19:     return partial(update_wrapper, wrapped=wrapped,

PythonVenv\Lib\site-packages\visitor\__init__.py:
  38:         :return: The return value of the called visitation function.
  48:             return meth(node)

PythonVenv\Lib\site-packages\visitor-0.1.3.dist-info\METADATA:
  42:             return '"' + s + '"'
  51:             return s
  54:             return self.escape_str(node)
  57:             return str(node)
  60:             return 'true' if node else 'false'
  71:             return s

PythonVenv\Lib\site-packages\watchdog\events.py:
  322:         return self._patterns
  330:         return self._ignore_patterns
  338:         return self._ignore_directories
  347:         return self._case_sensitive
  358:             return
  410:         return self._regexes
  418:         return self._ignore_regexes
  426:         return self._ignore_directories
  435:         return self._case_sensitive
  446:             return
  455:             return
  512:     :returns:
  534:     :returns:

PythonVenv\Lib\site-packages\watchdog\watchmedo.py:
   64:         return text.splitlines()
   84:     return list(name_or_flags), kwargs
  108:         return func
  110:     return decorator
  122:     return list(pathname_spec.split(separator))
  145:     :returns:
  151:         return yaml.safe_load(f.read())
  156:     Parses pattern argument specs and returns a two-tuple of
  163:     return (patterns, ignore_patterns)
  761:     return ["ERROR", "WARNING", "INFO", "DEBUG"][1 + verbosity]
  769:         return 1
  776:         return 1
  782:         return 130
  784:     return 0

PythonVenv\Lib\site-packages\watchdog\observers\api.py:
   61:         return self._path
   66:         return self._is_recursive
   71:         return self._event_filter
   75:         return self.path, self.is_recursive, self.event_filter
   78:         return self.key == watch.key
   81:         return self.key != watch.key
   84:         return hash(self.key)
   92:         return f"<{type(self).__name__}: path={self.path!r}, is_recursive={self.is_recursive}{event_filter_str}>"
  131:         return self._timeout
  138:         return self._watch
  192:         return self._timeout
  206:         return self._event_queue
  274:         """Returns event emitter created by this observer."""
  275:         return self._emitters
  310:         :return:
  326:         return watch
  393:             return

PythonVenv\Lib\site-packages\watchdog\observers\fsevents.py:
  113:             return False
  120:                 return False
  122:         return True
  160:         return in_history or before_start
  164:         """Returns True if the event indicates a change in metadata."""
  165:         return event.is_inode_meta_mod or event.is_xattr_mod or event.is_owner_change
  332:             return os.fsencode(path)
  333:         return path
  345:         return BaseObserver.schedule(self, event_handler, path, recursive)

PythonVenv\Lib\site-packages\watchdog\observers\fsevents2.py:
  136:         Returns a list or one or more events, or None if there are no more
  140:             return None
  141:         return self._queue.get()
  163:             return "Created"
  165:             return "Removed"
  167:             return "Renamed"
  169:             return "Modified"
  171:             return "InodeMetaMod"
  173:             return "XattrMod"
  174:         return "Unknown"
  177:         return (
  199:             return

PythonVenv\Lib\site-packages\watchdog\observers\inotify_buffer.py:
  41:         """Returns a single event or a tuple of from/to events in case of a
  42:         paired move event. If this buffer has been closed, immediately return
  45:         return self._queue.get()
  62:                 return not isinstance(event, tuple) and event.is_moved_from and event.cookie == inotify_event.cookie
  83:         return grouped

PythonVenv\Lib\site-packages\watchdog\observers\inotify_c.py:
  182:         return self._event_mask
  187:         return self._path
  192:         return self._is_recursive
  197:         return self._inotify_fd
  208:         is returned instead.
  211:             return self._moved_from_events[destination_event.cookie].src_path
  213:             return None
  297:             return events
  307:                     return []
  363:         return event_list
  404:         return wd
  422:         Parses an event buffer of ``inotify_event`` structs returned by
  470:         return self._src_path
  474:         return self._wd
  478:         return self._mask
  482:         return self._cookie
  486:         return self._name
  490:         return self._mask & InotifyConstants.IN_MODIFY > 0
  494:         return self._mask & InotifyConstants.IN_CLOSE_WRITE > 0
  498:         return self._mask & InotifyConstants.IN_CLOSE_NOWRITE > 0
  502:         return self._mask & InotifyConstants.IN_OPEN > 0
  506:         return self._mask & InotifyConstants.IN_ACCESS > 0
  510:         return self._mask & InotifyConstants.IN_DELETE > 0
  514:         return self._mask & InotifyConstants.IN_DELETE_SELF > 0
  518:         return self._mask & InotifyConstants.IN_CREATE > 0
  522:         return self._mask & InotifyConstants.IN_MOVED_FROM > 0
  526:         return self._mask & InotifyConstants.IN_MOVED_TO > 0
  530:         return self._mask & InotifyConstants.IN_MOVE > 0
  534:         return self._mask & InotifyConstants.IN_MOVE_SELF > 0
  538:         return self._mask & InotifyConstants.IN_ATTRIB > 0
  542:         return self._mask & InotifyConstants.IN_IGNORED > 0
  549:         return self.is_delete_self or self.is_move_self or self._mask & InotifyConstants.IN_ISDIR > 0
  553:         return self._src_path, self._wd, self._mask, self._cookie, self._name
  556:         return self.key == inotify_event.key
  559:         return self.key != inotify_event.key
  562:         return hash(self.key)
  576:         return "|".join(masks)
  579:         return (

PythonVenv\Lib\site-packages\watchdog\observers\inotify.py:
   47:         The events returned by reading from an inotify file descriptor form
  137:             return
  141:                 return
  144:                 return
  158:                 return
  208:             return path
  209:         return os.fsdecode(path)
  214:             return None
  239:         return event_mask

PythonVenv\Lib\site-packages\watchdog\observers\kqueue.py:
  127:     return os.path.abspath(os.path.normpath(path))
  135:     return kev.fflags & select.KQ_NOTE_DELETE
  141:     return (fflags & select.KQ_NOTE_EXTEND) or (fflags & select.KQ_NOTE_WRITE)
  146:     return kev.fflags & select.KQ_NOTE_ATTRIB
  151:     return kev.fflags & select.KQ_NOTE_RENAME
  181:             return self._kevents
  189:             return list(self._descriptor_for_path.keys())
  193:         Given a file descriptor, returns the kevent descriptor object
  200:         :returns:
  204:             return self._descriptor_for_fd[fd]
  215:             return self._get(path)
  227:             return self._has_path(path)
  275:         """Returns a kevent descriptor for a given path."""
  276:         return self._descriptor_for_path[path]
  281:         return path in self._descriptor_for_path
  341:         return self._fd
  346:         return self._path
  351:         return self._kev
  357:         :returns:
  360:         return self._is_directory
  373:         return (self.path, self.is_directory)
  376:         return self.key == descriptor.key
  379:         return self.key != descriptor.key
  382:         return hash(self.key)
  385:         return f"<{type(self).__name__}: path={self.path!r}, is_directory={self.is_directory}>"
  450:             return stat_info
  530:         Generate events from the kevent list returned from the call to
  573:         return DirModifiedEvent(os.path.dirname(src_path))
  596:             return
  637:         return self._kq.control(self._descriptors.kevents, MAX_EVENTS, timeout)

PythonVenv\Lib\site-packages\watchdog\observers\polling.py:
  84:             return
  88:                 return
  97:                 return

PythonVenv\Lib\site-packages\watchdog\observers\read_directory_changes.py:
  74:         return read_events(self._handle, self.watch.path, self.watch.is_recursive)

PythonVenv\Lib\site-packages\watchdog\observers\winapi.py:
  111:     return args
  119:     return args
  125:     return args
  139:     ctypes.POINTER(ctypes.wintypes.DWORD),  # lpBytesReturned
  300:     return results
  304:     # Comparison of observed path and actual path, returned by
  309:     return buff.value != path
  319:     return buff, event_size
  323:     """Returns a Windows handle to the specified directory path."""
  324:     return CreateFileW(
  337:         CancelIoEx(handle, None)  # force ReadDirectoryChangesW to return
  343:             return
  366:             return [], 0
  370:             return _generate_observed_path_deleted_event()
  374:     return event_buffer.raw, int(nbytes.value)
  384:         return self.action == FILE_ACTION_CREATED
  388:         return self.action == FILE_ACTION_REMOVED
  392:         return self.action == FILE_ACTION_MODIFIED
  396:         return self.action == FILE_ACTION_RENAMED_OLD_NAME
  400:         return self.action == FILE_ACTION_RENAMED_NEW_NAME
  404:         return self.action == FILE_ACTION_REMOVED_SELF
  410:     return [WinAPINativeEvent(action, src_path) for action, src_path in events]

PythonVenv\Lib\site-packages\watchdog\tricks\__init__.py:
   68:         return f"""- {cls.__module__}.{cls.__name__}:
  119:             return
  124:             return
  158:         return self._process_watchers or (self.process is not None and self.process.poll() is None)
  222:                 return
  238:             return
  250:                 return
  284:             return
  293:             return

PythonVenv\Lib\site-packages\watchdog\utils\__init__.py:
   63:         return self._stopped_event
   67:         return not self._stopped_event.is_set()
   97:     """Imports a module given its name and returns a handle to it."""
  102:     return sys.modules[module_name]
  106:     """Loads and returns a class definition provided a dotted path
  131:         return getattr(module, klass_name)
  132:         # Finally create and return an instance of the class
  133:         # return klass(*args, **kwargs)

PythonVenv\Lib\site-packages\watchdog\utils\bricks.py:
   64:                 return self._a
   68:                 return self._b
   71:                 return (self._a, self._b)
   74:                 return self._key() == item._key()
   77:                 return self._key() != item._key()
   80:                 return hash(self._key())
  102:         return item

PythonVenv\Lib\site-packages\watchdog\utils\delayed_queue.py:
  49:         """Remove and return an element from the queue, or this queue has been
  60:                 return None
  71:             # return element if it's still in the queue
  75:                     return head
  78:         """Remove and return the first items for which predicate is True,
  84:                     return elem
  85:         return None

PythonVenv\Lib\site-packages\watchdog\utils\dirsnapshot.py:
   95:                 return directory.inode(full_path)[0]
  100:                 return directory.inode(full_path)
  148:         return self.__repr__()
  155:         return fmt.format(
  170:         return self._files_created
  175:         return self._files_deleted
  180:         return self._files_modified
  190:         return self._files_moved
  197:         return self._dirs_modified
  207:         return self._dirs_moved
  214:         return self._dirs_deleted
  221:         return self._dirs_created
  238:             Use custom stat function that returns a stat structure for path.
  283:             return DirectorySnapshot(
  305:         Use custom stat function that returns a stat structure for path.
  346:                 return
  373:         return set(self._stat_info.keys())
  377:         Returns path for id. None if id is unknown to this snapshot.
  379:         return self._inode_to_path.get(id)
  382:         """Returns an id for path."""
  384:         return (st.st_ino, st.st_dev)
  387:         return S_ISDIR(self._stat_info[path].st_mode)
  390:         return self._stat_info[path].st_mtime
  393:         return self._stat_info[path].st_size
  397:         Returns a stat information object for the specified path from
  408:         return self._stat_info[path]
  414:         :returns:
  417:         return DirectorySnapshotDiff(previous_dirsnap, self)
  420:         return self.__repr__()
  423:         return str(self._stat_info)
  437:         """Mock up method to return the path of the received inode. As the snapshot
  438:         is intended to be empty, it always returns None.
  440:         :returns:
  443:         return None
  447:         """Mock up method to return a set of file/directory paths in the snapshot. As
  448:         the snapshot is intended to be empty, it always returns an empty set.
  450:         :returns:
  453:         return set()

PythonVenv\Lib\site-packages\watchdog\utils\echo.py:
   40:     """Return an item's name."""
   41:     return item.__name__
   46:     return inspect.ismethod(instancemethod) and instancemethod.__self__ is klass
   50:     """Returns True if method is an instance method of klass."""
   51:     return next(
   60:     return name.startswith("__") and not name.endswith("__")
   64:     """Return a method's name.
   66:     This function returns the name the method is accessed by from
   72:     return mname
   76:     """Return a string representing a (name, value) pair.
   82:     return f"{arg}={val!r}"
   88:     Returns a decorated version of the input function which "echoes" calls
  111:         return fn(*v, **k)
  113:     return wrapped
  138:         # In python 3 only class methods are returned here

PythonVenv\Lib\site-packages\watchdog\utils\patterns.py:
  31:     return any(path.match(p) for p in included_patterns) and not any(path.match(p) for p in excluded_patterns)
  50:     :returns:
  78:     :returns:
  86:             return True
  87:     return False

PythonVenv\Lib\site-packages\watchdog\utils\platform.py:
  30:         return PLATFORM_WINDOWS
  32:         return PLATFORM_DARWIN
  34:         return PLATFORM_LINUX
  36:         return PLATFORM_BSD
  38:         return PLATFORM_UNKNOWN
  45:     return __platform__ == PLATFORM_LINUX
  49:     return __platform__ == PLATFORM_BSD
  53:     return __platform__ == PLATFORM_DARWIN
  57:     return __platform__ == PLATFORM_WINDOWS

PythonVenv\Lib\site-packages\watchdog\utils\process_watcher.py:
  21:                 return

PythonVenv\Lib\site-packages\watchdog-4.0.1.dist-info\METADATA:
  370: - [inotify] Return from ``InotifyEmitter.queue_events()`` if not launched when thread is inactive (`#963 <https://github.com/gorakhargosh/watchdog/pull/963>`__)
  418: - [tests] The error message returned by musl libc for error code ``-1`` is now allowed (`#923 <https://github.com/gorakhargosh/watchdog/pull/923>`__)
  463: - [bsd] Fixed returned paths in ``kqueue.py`` and restored the overall results of the test suite. (`#842 <https://github.com/gorakhargosh/watchdog/pull/842>`__)
  579: - [mac] Return byte paths if a byte path was given in ``fsevents`` (`#726 <https://github.com/gorakhargosh/watchdog/pull/726>`__)
  770: - [snapshot] Methods returning internal stats info were replaced by

PythonVenv\Lib\site-packages\watchfiles\_rust_notify.pyi:
  51:         it will group changes and return in no more than `debounce_ms` milliseconds.
  57:             debounce_ms: maximum time in milliseconds to group changes over before returning.
  60:             timeout_ms: maximum time in milliseconds to wait for changes before returning,
  63:             stop_event: event to check on every iteration to see if this function should return early.
  64:                 The event should be an object which has an `is_set()` method which returns a boolean.
  66:         Returns:
  69:         Return values have the following meanings:

PythonVenv\Lib\site-packages\watchfiles\cli.py:
   23:         return path.resolve()
  191:         return import_string(function_path)
  205:         return DefaultFilter(ignore_paths=ignore_paths), 'DefaultFilter'
  207:         return PythonFilter(ignore_paths=ignore_paths), 'PythonFilter'
  211:         return None, '(no filter)'
  215:         return watch_filter_cls(ignore_paths=ignore_paths), watch_filter_cls.__name__
  221:         return watch_filter_cls(), watch_filter_cls.__name__
  224:         return watch_filter, repr(watch_filter_cls)

PythonVenv\Lib\site-packages\watchfiles\filters.py:
   50:         Returns:
   55:             return False
   59:             return False
   61:             return False
   63:             return True
   67:         return f'{self.__class__.__name__}({args})'
  150:         return path.endswith(self.extensions) and super().__call__(change, path)

PythonVenv\Lib\site-packages\watchfiles\main.py:
   31:         return self.name
   93:             this can be anything with an `is_set()` method which returns a bool, e.g. `threading.Event()`.
  132:                     return
  134:                 return
  266:                 return
  286:     return changes
  305:             return 1_000
  307:             return 5_000
  309:         return timeout
  319:         return force_polling
  322:         return env_var.lower() not in {'false', 'disable', 'disabled'}
  324:         return _auto_force_polling()
  336:     return 'microsoft-standard' in uname.release.lower() and uname.system.lower() == 'linux'
  341:         return ignore_permission_denied
  343:     return bool(env_var)

PythonVenv\Lib\site-packages\watchfiles\run.py:
   79:     Returns:
  154:     return reloads
  234:     return reloads
  246:     return shlex.split(cmd, posix=posix)
  282:     return CombinedProcess(process)
  304:     Returns:
  308:         return 'function'
  310:         return 'command'
  312:         return 'function'
  314:         return 'command'
  348:             return self._p.is_alive()
  350:             return self._p.poll() is None
  355:         return self._p.pid  # type: ignore[return-value]
  366:             return self._p.exitcode
  368:             return self._p.returncode
  379:     Stolen approximately from django. Import a dotted module path and return the attribute/class designated by the
  389:         return getattr(module, class_name)
  396:     Return the path to the current TTY, if any.
  401:         return os.ttyname(sys.stdin.fileno())
  404:         return '/dev/tty'
  407:         return None

PythonVenv\Lib\site-packages\wcwidth\unicode_versions.py:
  10:     Return Unicode version levels supported by this module release.
  12:     Any of the version strings returned may be used as keyword argument
  15:     :returns: Supported Unicode version numbers in ascending sorted order.
  18:     return (

PythonVenv\Lib\site-packages\wcwidth\wcwidth.py:
   96:     :returns: 1 if ordinal value ucs is found within lookup table, else 0.
  102:         return 0
  110:             return 1
  112:     return 0
  118:     Given one Unicode character, return its printable length on a terminal.
  123:         is returned by :func:`list_versions`.
  128:     :return: The width, in cells, necessary to display the character of
  129:         Unicode string character, ``wc``.  Returns 0 if the ``wc`` argument has
  133:         character occupies on a graphic terminal (1 or 2) is returned.
  140:     # small optimization: early return of 1 for printable ASCII, this provides
  144:         return 1
  148:         return -1
  154:         return 0
  157:     return 1 + _bisearch(ucs, WIDE_EASTASIAN[_unicode_version])
  162:     Given a unicode string, return its printable length on a terminal.
  165:     :param int n: When ``n`` is None (default), return the length of the entire
  175:     :returns: The width, in cells, needed to display the first ``n`` characters
  176:         of the unicode string ``pwcs``.  Returns ``-1`` for C0 and C1 control
  207:             # early return -1 on C0 and C1 control characters
  208:             return wcw
  215:     return width
  225:     :returns: tuple of digit tuples, ``tuple(int, [...])``.
  228:     return retval
  234:     Return nearest matching supported Unicode version level.
  237:     returned after a warning is emitted.  For example, given supported levels
  239:     is selected and returned:
  253:     :returns: unicode string, or non-unicode ``str`` type for python 2
  256:     # Design note: the choice to return the same type that is given certainly
  264:     _return_str = not _PY3 and isinstance(given_version, str)
  266:     if _return_str:
  277:             'latest' if not _return_str else latest_version.encode())
  282:         return latest_version if not _return_str else latest_version.encode()
  287:         return given_version if not _return_str else given_version.encode()
  289:     # The user's version is not supported by ours. We return the newest unicode
  301:         return latest_version if not _return_str else latest_version.encode()
  303:     # given version is less than any available version, return earliest
  313:                       "than any available unicode version. Returning lowest "
  317:         return earliest_version if not _return_str else earliest_version.encode()
  320:     # and return the tail value, which is the highest level we may support,
  324:     # function will never complete, always returns.
  330:             # at end of list, return latest version
  331:             return latest_version if not _return_str else latest_version.encode()
  337:             return unicode_versions[idx + 1]
  340:         # version, return the current value in index.  Even though it must
  342:         # is, 4.1 is returned for given 4.9.9, where 4.1 and 5.0 are available.
  344:             return unicode_version

PythonVenv\Lib\site-packages\wcwidth-0.2.13.dist-info\METADATA:
   48: functions precisely copy.  *These functions return the number of cells a
   79:    ...    return padding * max(0, (length - wcswidth(text))) + text
  111: Briefly, return values of function ``wcwidth()`` are:
  126: Function ``wcswidth()`` simply returns the sum of all values for each character
  314:     those that previously returned -1 now often (correctly) return 0.

PythonVenv\Lib\site-packages\websockets\__main__.py:
   74:         "\N{CARRIAGE RETURN}"
  113:         return

PythonVenv\Lib\site-packages\websockets\client.py:
  103:         Returns:
  137:         return Request(self.wsuri.resource_name, headers)
  215:         Returns:
  262:         return accepted_extensions
  273:         Returns:
  298:         return subprotocol

PythonVenv\Lib\site-packages\websockets\datastructures.py:
   29:             return repr(self.args[0])
   30:         return super().__str__()
   50:         - if there's exactly one value, it's returned;
   66:     - :meth:`get_all` returns a list of all values for a header;
   67:     - :meth:`raw_items` returns an iterator of ``(name, values)`` pairs.
   80:         return "".join(f"{key}: {value}\r\n" for key, value in self._list) + "\r\n"
   83:         return f"{self.__class__.__name__}({self._list!r})"
   89:         return copy
   93:         return str(self).encode()
   98:         return isinstance(key, str) and key.lower() in self._dict
  101:         return iter(self._dict)
  104:         return len(self._dict)
  111:             return value[0]
  127:             return NotImplemented
  128:         return self._dict == other._dict
  152:         Return the (possibly empty) list of all values for a header.
  158:         return self._dict.get(key.lower(), [])
  162:         Return an iterator of all values as ``(name, value)`` pairs.
  165:         return iter(self._list)

PythonVenv\Lib\site-packages\websockets\exceptions.py:
  105:                 return "no close frame received or sent"
  108:                 return f"sent {self.sent}; no close frame received"
  112:                 return f"received {self.rcvd}; no close frame sent"
  116:                     return f"received {self.rcvd}; then sent {self.sent}"
  118:                     return f"sent {self.sent}; then received {self.rcvd}"
  125:             return frames.CloseCode.ABNORMAL_CLOSURE
  126:         return self.rcvd.code
  131:             return ""
  132:         return self.rcvd.reason
  190:             return f"missing {self.name} header"
  192:             return f"empty {self.name} header"
  194:             return f"invalid {self.name} header: {self.value}"
  245:         return (
  262:         return f"server rejected WebSocket connection: HTTP {self.status_code}"
  282:         return f"duplicate parameter: {self.name}"
  295:         return f"invalid parameter name: {self.name}"
  310:             return f"missing value for parameter {self.name}"
  312:             return f"empty value for parameter {self.name}"
  314:             return f"invalid value for parameter {self.name}: {self.value}"
  319:     Raised to abort the handshake on purpose and return an HTTP response.
  344:         return (
  363:         return f"redirect to {self.uri}"
  388:         return f"{self.uri} isn't a valid URI: {self.msg}"

PythonVenv\Lib\site-packages\websockets\frames.py:
  151:         Return a human-readable representation of a frame.
  194:         return f"{self.opcode.name} {data} [{metadata}]"
  271:         return frame
  330:         return output.getvalue()
  356:     If ``data`` is a :class:`str`, return ``OP_TEXT`` and a :class:`bytes`
  359:     If ``data`` is a bytes-like object, return ``OP_BINARY`` and a bytes-like
  367:         return OP_TEXT, data.encode("utf-8")
  369:         return OP_BINARY, data
  380:     If ``data`` is a :class:`str`, return a :class:`bytes` object encoding
  383:     If ``data`` is a bytes-like object, return a :class:`bytes` object.
  390:         return data.encode("utf-8")
  392:         return bytes(data)
  413:         Return a human-readable representation of a close code and reason.
  427:         return result
  447:             return close
  449:             return cls(CloseCode.NO_STATUS_RCVD, "")
  459:         return struct.pack("!H", self.code) + self.reason.encode("utf-8")

PythonVenv\Lib\site-packages\websockets\headers.py:
   58:     return host
   68:     Return the next character from ``header`` at the given position.
   70:     Return :obj:`None` at the end of ``header``.
   75:     return None if pos == len(header) else header[pos]
   85:     Return the new position.
   87:     The whitespace itself isn't returned because it isn't significant.
   93:     return match.end()
  103:     Return the token value and the new position.
  112:     return match.group(), match.end()
  127:     Return the unquoted value and the new position.
  138:     return _unquote_re.sub(r"\1", match.group()[1:-1]), match.end()
  157:     return '"' + _quote_re.sub(r"\\\1", value) + '"'
  180:     Return a list of items.
  225:     return items
  234:     Return the protocol value and the new position.
  241:     return cast(ConnectionOption, item), pos
  248:     Return a list of HTTP connection options.
  257:     return parse_list(parse_connection_option, header, 0, "Connection")
  271:     Return the protocol value and the new position.
  282:     return cast(UpgradeProtocol, match.group()), match.end()
  289:     Return a list of HTTP protocols.
  298:     return parse_list(parse_upgrade_protocol, header, 0, "Upgrade")
  307:     Return a ``(name, value)`` pair and the new position.
  334:     return (name, value), pos
  343:     Return an ``(extension name, parameters)`` pair, where ``parameters`` is a
  359:     return (cast(ExtensionName, name), parameters), pos
  366:     Return a list of WebSocket extensions and their parameters in this format::
  385:     return parse_list(parse_extension_item, header, 0, "Sec-WebSocket-Extensions")
  400:     return "; ".join(
  417:     return ", ".join(
  431:     Return the subprotocol value and the new position.
  438:     return cast(Subprotocol, item), pos
  445:     Return a list of WebSocket subprotocols.
  451:     return parse_list(parse_subprotocol_item, header, 0, "Sec-WebSocket-Protocol")
  464:     return ", ".join(subprotocols)
  495:     return f"Basic realm={realm}, charset={charset}"
  505:     Return the token value and the new position.
  516:     return match.group(), match.end()
  532:     Return a ``(username, password)`` tuple.
  573:     return username, password
  587:     return "Basic " + basic_credentials

PythonVenv\Lib\site-packages\websockets\http11.py:
   19: # returned by a server. It isn't designed to perform large file transfers.
   28:     return value.decode(errors="backslashreplace")
   74:         return self._exception
   93:         body, it may be read from the data stream after :meth:`parse` returns.
  137:         return cls(path, headers)
  148:         return request
  178:         return self._exception
  273:         return cls(status_code, reason, headers, body)
  286:         return response
  337:     return headers
  346:     CRLF is stripped from the return value.
  364:     return line[:-2]

PythonVenv\Lib\site-packages\websockets\imports.py:
  28:     return getattr(module, name)
  77:             return import_name(name, source, namespace)
  90:             return import_name(name, source, namespace)
  97:         return sorted(namespace_set | aliases_set | deprecated_aliases_set)

PythonVenv\Lib\site-packages\websockets\protocol.py:
   42: """Events that :meth:`~Protocol.events_received` may return."""
  163:         return self._state
  183:             return None
  185:             return CloseCode.ABNORMAL_CLOSURE
  187:             return self.close_rcvd.code
  201:             return None
  203:             return ""
  205:             return self.close_rcvd.reason
  241:         return exc
  268:           it will return ``[b""]``, signaling the end of the stream, or ``[]``.
  269:         - You aren't expected to call :meth:`events_received`; it won't return
  454:         Returns:
  458:         return events
  475:         Returns:
  480:         return writes
  489:         If it returns :obj:`True`, schedule closing the TCP connection after a
  492:         Returns:
  504:         return self.state is CLOSING or self.handshake_exc is not None

PythonVenv\Lib\site-packages\websockets\server.py:
  125:         Returns:
  140:             return self.reject(
  159:             return response
  165:             return self.reject(
  175:             return self.reject(
  198:         return Response(101, "Switching Protocols", headers)
  215:         Returns:
  222:                 then the server must return 400 Bad Request error.
  283:         return (
  296:         Returns:
  313:         return origin
  346:         Returns:
  394:         return response_header_value, accepted_extensions
  403:         Returns:
  419:         return self.select_subprotocol(subprotocols)
  446:                     return "chat"
  451:         Returns:
  464:             return None
  474:                 return subprotocol
  501:         Returns:
  523:         return response

PythonVenv\Lib\site-packages\websockets\speedups.c:
   22:     // websockets.framing.prepare_data() returns only these types.
   41:             return -1;
   54:         return -1;
   57:     return 0;
  192:     return result;
  222:     return PyModule_Create(&speedups_module);

PythonVenv\Lib\site-packages\websockets\streams.py:
   26:         The return value includes the LF character.
   52:         return r
   75:         return r
   97:         return r
  108:                 return False
  110:                 return True

PythonVenv\Lib\site-packages\websockets\uri.py:
   47:         return resource_name
   52:             return None
   54:         return (self.username, self.password)
   68:     Returns:
  108:     return WebSocketURI(secure, host, port, path, query, username, password)

PythonVenv\Lib\site-packages\websockets\utils.py:
  21:     return base64.b64encode(key).decode()
  33:     return base64.b64encode(sha1).decode()
  51:     return (data_int ^ mask_int).to_bytes(len(data), sys.byteorder)

PythonVenv\Lib\site-packages\websockets\version.py:
  61:             return f"{tag}.dev{distance}+{remainder}"
  65:             return importlib.metadata.version("websockets")
  70:         return f"{tag}.dev0+gunknown"
  80:         return tag if commit == "unknown" else commit

PythonVenv\Lib\site-packages\websockets\extensions\base.py:
   34:         Returns:
   50:         Returns:
   70:         Returns:
   90:         Returns:
  123:         Returns:

PythonVenv\Lib\site-packages\websockets\extensions\permessage_deflate.py:
   75:         return (
   95:             return frame
  102:                 return frame
  112:                 return frame
  139:         return dataclasses.replace(frame, data=data)
  148:             return frame
  171:         return dataclasses.replace(frame, data=data)
  195:     return params
  251:     return (
  322:         return _build_parameters(
  337:         Return an extension instance.
  426:         return PerMessageDeflate(
  456:     return extensions
  531:         Return response params and an extension instance.
  620:         return (
  660:     return extensions

PythonVenv\Lib\site-packages\websockets\legacy\async_timeout.py:
   50:         return f
   79:     return Timeout(deadline, loop)
   98:     return Timeout(deadline, loop)
  148:         return self
  157:         return None
  161:         return self
  170:         return None
  175:         return self._state == _State.TIMEOUT
  179:         return self._deadline
  231:             return
  256:         return None

PythonVenv\Lib\site-packages\websockets\legacy\auth.py:
   23:         return False
   25:         return isinstance(username, str) and isinstance(password, str)
   68:         Returns:
   74:             return await self._check_credentials(username, password)
   76:         return False
   84:         Check HTTP Basic Auth and return an HTTP 401 response if needed.
   90:             return (
   99:             return (
  106:             return (
  114:         return await super().process_request(path, request_headers)
  145:             and returns a :class:`bool`. One of ``credentials`` or
  174:                 return False
  175:             return hmac.compare_digest(expected_password, password)
  180:     return functools.partial(

PythonVenv\Lib\site-packages\websockets\legacy\client.py:
  131:         after this coroutine returns.
  150:         return status_code, self.response_headers
  162:         Return the list of accepted extensions.
  223:         return accepted_extensions
  234:         Return the selected subprotocol.
  258:         return subprotocol
  468:         # Backwards compatibility: recv() used to return None on closed connections
  629:         return await self
  643:         return self.__await_impl_timeout__().__await__()
  647:             return await self.__await_impl__()
  672:                 return protocol
  705:     return connect(uri=uri, path=path, unix=True, **kwargs)

PythonVenv\Lib\site-packages\websockets\legacy\framing.py:
   26:         return frames.Frame(
   36:         return str(self.new_frame)
   39:         return self.new_frame.check()
  111:         return cls(
  159:     Returns:
  168:     return close.code, close.reason
  176:     return Close(code, reason).serialize()

PythonVenv\Lib\site-packages\websockets\legacy\handshake.py:
   26:     Returns:
   35:     return key
   50:     Returns:
   55:             Then, the server must return a 400 Bad Request error.
  103:     return s_w_key
  114:         key: Returned by :func:`check_request`.
  132:         key: Returned by :func:`build_request`.

PythonVenv\Lib\site-packages\websockets\legacy\http.py:
   22:     return value.decode(errors="backslashreplace")
   47:     Read an HTTP/1.1 GET request and return ``(path, headers)``.
   56:     body, it may be read from ``stream`` after this coroutine returns.
   91:     return path, headers
   96:     Read an HTTP/1.1 response and return ``(status_code, reason, headers)``.
  103:     body, it may be read from ``stream`` after this coroutine returns.
  143:     return status_code, reason, headers
  183:     return headers
  190:     CRLF is stripped from the return value.
  201:     return line[:-2]

PythonVenv\Lib\site-packages\websockets\legacy\protocol.py:
   322:             return
   338:                 # called.  Without this, _drain_helper() would return
   369:         return self._host
   375:         return self._port
   380:         return self._secure
   400:             return None
   402:             return transport.get_extra_info("sockname")
   420:             return None
   422:             return transport.get_extra_info("peername")
   436:         return self.state is State.OPEN and not self.transfer_data_task.done()
   447:         return self.state is State.CLOSED
   461:             return None
   463:             return CloseCode.ABNORMAL_CLOSURE
   465:             return self.close_rcvd.code
   479:             return None
   481:             return ""
   483:             return self.close_rcvd.reason
   500:             return
   515:         message. The next invocation of :meth:`recv` will return it.
   520:         Returns:
   554:                     return_when=asyncio.FIRST_COMPLETED,
   561:             # exception (or return None if legacy_recv is enabled).
   564:                     return None  # type: ignore
   578:         return message
   664:                 return
   709:                 return
   817:         Canceling :meth:`ping` is discouraged. If :meth:`ping` doesn't return
   821:         Canceling the :class:`~asyncio.Future` returned by :meth:`ping` has no
   829:         Returns:
   867:         return asyncio.shield(pong_waiter)
   877:         Canceling :meth:`pong` is discouraged. If :meth:`pong` doesn't return
   918:         return exc
   936:                 return
  1030:         Return :obj:`None` when the closing handshake is started.
  1037:             return None
  1048:             return frame.data.decode("utf-8") if text else frame.data
  1095:         return ("" if text else b"").join(fragments)
  1103:         Return :obj:`None` if a close frame is encountered before any data frame.
  1125:                 return None
  1158:                 return frame
  1173:         return frame
  1250:             return
  1312:                     return
  1330:                     return
  1348:             return
  1356:             return
  1373:         Return :obj:`True` if the connection is closed and :obj:`False`
  1386:         return self.connection_lost_waiter.done()
  1517:                 return
  1520:                 return
  1523:                 return
  1554:         there's no reason to keep the transport open by returning :obj:`True`.

PythonVenv\Lib\site-packages\websockets\legacy\server.py:
   233:                 return
   271:         after this coroutine returns.
   293:         return path, headers
   327:         Intercept the HTTP request and return an HTTP response if appropriate.
   332:         * to return an HTTP 200 OK response on a given path; then a load
   334:         * to authenticate the request and return an HTTP 401 Unauthorized or an
   351:         Returns:
   356:             headers, and body, to abort the WebSocket handshake and return
   363:                 return await response
   369:                 return response
   370:         return None
   396:         return origin
   409:         Return the Sec-WebSocket-Extensions HTTP response header and the list
   478:         return response_header_value, accepted_extensions
   487:         Return Sec-WebSocket-Protocol HTTP response header, which is the same
   511:         return subprotocol
   536:         Returns:
   544:             return self._select_subprotocol(client_subprotocols, server_subprotocols)
   548:             return None
   549:         return sorted(
   574:         Returns:
   646:         return path
   651:     WebSocket server returned by :func:`serve`.
   790:         # Tell wait_closed() to return.
   799:         When :meth:`wait_closed` returns, all TCP connections are closed and
   800:         all connection handlers have returned.
   808:           closed, it returns.
   821:         return self.server.get_loop()
   828:         return self.server.is_serving()
   851:             # this coroutine doesn't return
   868:         return self.server.sockets
   871:         return self
   940:             taking the request path and headers in arguments and returning
   968:     Returns:
  1026:         # Backwards compatibility: recv() used to return None on closed connections
  1098:         return await self
  1113:         return self.__await_impl__().__await__()
  1118:         return self.ws_server
  1151:     return serve(ws_handler, path=path, unix=True, **kwargs)
  1175:                 return await cast(
  1180:             return _ws_handler
  1182:     return cast(

PythonVenv\Lib\site-packages\websockets\sync\client.py:
  155:     This function returns a :class:`ClientConnection` instance, which you can
  300:     return connection
  328:     return connect(uri=uri, unix=True, path=path, **kwargs)

PythonVenv\Lib\site-packages\websockets\sync\connection.py:
  108:         return self.socket.getsockname()
  121:         return self.socket.getpeername()
  131:         return self.protocol.subprotocol
  136:         return self
  164:             return
  183:         reassemble them, and return the whole message.
  185:         Returns:
  199:             return self.recv_messages.get(timeout)
  218:         Returns:
  313:                 return
  432:         Returns:
  462:             return pong_waiter
  508:                 return
  570:                         # returns above but before send_data() calls send().
  704:                 # Thread.join() returns immediately if timeout is negative.

PythonVenv\Lib\site-packages\websockets\sync\messages.py:
   63:         :meth:`get` returns a single :class:`str` or :class:`bytes`.
   66:         received, then it reassembles the message and returns it. To receive
  117:             return message
  123:         Iterating the return value of :meth:`get_iter` yields a :class:`str` or
  191:         consuming the return value of :meth:`get_iter`.
  216:                 return
  230:                 return
  232:             # Message is complete. Wait until it's fetched to return.
  269:                 return

PythonVenv\Lib\site-packages\websockets\sync\server.py:
  179:     WebSocket server returned by :func:`serve`.
  189:             returned by :meth:`~socket.socket.accept`.
  212:         This method doesn't return. Calling :meth:`shutdown` from another thread
  230:                 # the loop. So we don't need to check the return value of select().
  251:         return self.socket.fileno()
  254:         return self
  359:             Return an HTTP response to force the response or :obj:`None` to
  363:             Return an HTTP response to force the response or :obj:`None` to
  463:                     return select_subprotocol(connection, subprotocols)
  496:             return
  508:     return WebSocketServer(sock, conn_handler, logger)
  530:     return serve(handler, path=path, unix=True, **kwargs)

PythonVenv\Lib\site-packages\websockets\sync\utils.py:
  37:         Returns:
  42:             return None
  46:         return timeout

PythonVenv\Lib\site-packages\werkzeug\__init__.py:
  23:         return importlib.metadata.version("werkzeug")

PythonVenv\Lib\site-packages\werkzeug\_internal.py:
   20:         return "no value"
   23:         return "_missing"
   30:     return s.encode("latin1").decode(errors="replace")
   34:     return s.encode().decode("latin1")
   42:     return env
   54:             return True
   61:     return False
  110:         return dt
  113:         return dt.replace(tzinfo=timezone.utc)
  115:         return dt.astimezone(timezone.utc)
  117:     return dt
  160:             return self
  165:             return self.default  # type: ignore
  171:                 return self.load_func(value)
  173:                 return self.default  # type: ignore
  175:         return value  # type: ignore
  193:         return f"<{type(self).__name__} {self.name}>"
  211:     return int(value)

PythonVenv\Lib\site-packages\werkzeug\_reloader.py:
   68:     """Find paths for the stat reloader to watch. Returns imported
  116:     return paths
  140:     return _find_common_roots(dirs)
  166:     return rv
  170:     """Determine how the script was executed, and return the args needed
  176:         return [sys.executable, *sys.orig_argv[1:]]
  225:     return rv
  246:         return self
  278:                 return exit_code
  294:         return super().__enter__()
  326:                     return
  362:         return super().__enter__()
  417:         return
  422:         return

PythonVenv\Lib\site-packages\werkzeug\exceptions.py:
   18:             return view(request)
   20:             return e
   39:             return view(request)
   41:             return not_found(request)
   43:             return e
   94:         return HTTP_STATUS_CODES.get(self.code, "Unknown Error")  # type: ignore
  108:         return f"<p>{description}</p>"
  116:         return (
  130:         return [("Content-Type", "text/html; charset=utf-8")]
  138:         it's returned directly.
  143:         :return: a :class:`Response` object or a subclass thereof.
  148:             return self.response
  152:         return WSGIResponse(self.get_body(environ, scope), self.code, headers)
  164:         return response(environ, start_response)
  168:         return f"{code} {self.name}: {self.description}"
  172:         return f"<{type(self).__name__} '{code}: {self.name}'>"
  211:             return (
  216:         return self._description
  322:         return headers
  386:         return headers
  392:     Raise if the server can't return any content conforming to the
  479:     The status code one should return if the data submitted exceeded a given
  503:     The status code returned if the server is unable to handle the media type
  546:         return headers
  564:     The server should return this if it is a teapot and someone attempted
  664:         return headers
  755:     If you do proxying in your application you should return this status code
  769:     Status code you should return if a service is temporarily
  791:     Status code you should return if a connection to an upstream server
  854:     ) -> t.NoReturn:
  866: def abort(status: int | Response, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:

PythonVenv\Lib\site-packages\werkzeug\formparser.py:
   62:         return t.cast(t.IO[bytes], SpooledTemporaryFile(max_size=max_size, mode="rb+"))
   64:         return t.cast(t.IO[bytes], TemporaryFile("rb+"))
   66:     return BytesIO()
   79:     """Parse the form data in the environ and return it as tuple in the form
   85:     mimetype is unknown the input stream is wrapped and returned as first
   91:     :param stream_factory: An optional callable that returns a new read and
  108:     :return: A tuple in the form ``(stream, form, files)``.
  123:     return FormDataParser(
  140:     :param stream_factory: An optional callable that returns a new read and
  198:         :return: A tuple in the form ``(stream, form, files)``.
  203:         return self.parse(
  225:         :return: A tuple in the form ``(stream, form, files)``.
  236:             return stream, self.cls(), self.cls()
  242:             return parse_func(stream, mimetype, content_length, options)
  247:         return stream, self.cls(), self.cls()
  268:         return stream, form, files
  293:         return stream, self.cls(items), self.cls()
  319:     def fail(self, message: str) -> te.NoReturn:
  333:                 return ct_charset
  335:         return "utf-8"
  353:         return container
  408:         return self.cls(fields), self.cls(files)

PythonVenv\Lib\site-packages\werkzeug\http.py:
   141:     characters, it will be returned unchanged. If the header contains ``"`` or ``\\``
   163:         return '""'
   169:             return value_str
   172:     return f'"{value_str}"'
   188:         return value.replace("\\\\", "\\").replace('\\"', '"')
   190:     return value
   236:     return "; ".join(segments)
   284:     return ", ".join(items)
   297:     return "; ".join(f"{key} {value}" for key, value in header.items())
   324:     return result
   394:     return result
   461:     :return: ``(value, options)``, where ``options`` is a dict
   485:         return "", {}
   493:         return value, {}
   548:     return value, options
   569:     Returns an :class:`.Accept` instance, which can sort and inspect items based on
   575:     :return: An instance of ``cls``.
   584:         return cls(None)
   613:     return cls(result)
   645:        :class:`~werkzeug.datastructures.RequestCacheControl` is returned.
   651:     :param cls: the class for the returned object.  By default
   653:     :return: a `cls` object.
   659:         return cls((), on_update)
   661:     return cls(parse_dict_header(value), on_update)
   695:     :param cls: the class for the returned object.  By default
   697:     :return: a `cls` object.
   703:         return cls((), on_update)
   715:     return cls(items, on_update)
   722:     """Parse a set-like header and return a
   727:     The return value is an object that treats the items case-insensitively
   744:     :return: a :class:`~werkzeug.datastructures.HeaderSet`
   747:         return ds.HeaderSet(None, on_update)
   748:     return ds.HeaderSet(parse_list_header(value), on_update)
   752:     """Parses an if-range header which can be an etag or a date.  Returns
   761:         return ds.IfRange()
   764:         return ds.IfRange(date=date)
   766:     return ds.IfRange(unquote_etag(value)[0])
   773:     object.  If the header is missing or malformed `None` is returned.
   780:         return None
   790:             return None
   793:                 return None
   797:                 return None
   808:                 return None
   811:                 return None
   816:                     return None
   819:                     return None
   825:     return ds.Range(units, ranges)
   844:         return None
   848:         return None
   851:         return None
   859:             return None
   863:             return None
   865:         return ds.ContentRange(units, None, None, length, on_update=on_update)
   867:         return None
   874:         return None
   877:         return ds.ContentRange(units, start, stop, length, on_update=on_update)
   879:     return None
   893:     return etag
   907:     :return: a ``(etag, weak)`` tuple.
   910:         return None, None
   918:     return etag, weak
   925:     :return: an :class:`~werkzeug.datastructures.ETags` object.
   928:         return ds.ETags()
   939:             return ds.ETags(star_tag=True)
   947:     return ds.ETags(strong, weak)
   956:     return sha1(data).hexdigest()
   964:     returns ``None`` if parsing fails instead of raising an exception,
   965:     and always returns a timezone-aware datetime object. If the string
   971:         Return a timezone-aware datetime object. Use
   975:         return None
   980:         return None
   983:         return dt.replace(tzinfo=timezone.utc)
   985:     return dt
  1012:         return email.utils.format_datetime(timestamp, usegmt=True)
  1017:     return email.utils.formatdate(timestamp, usegmt=True)
  1023:     If parsing fails, the return value is `None`.
  1026:     :return: a :class:`datetime.timedelta` object or `None`.
  1029:         return None
  1033:         return None
  1035:         return None
  1037:         return timedelta(seconds=seconds)
  1039:         return None
  1050:         return None
  1059:     return str(age)
  1078:     :return: `True` if the resource was modified, otherwise `False`.
  1087:     return _sansio_http.is_resource_modified(
  1143:     :return: `True` if it's an entity header, `False` otherwise.
  1145:     return header.lower() in _entity_headers
  1154:     :return: `True` if it's an HTTP/1.1 "Hop-by-Hop" header, `False` otherwise.
  1156:     return header.lower() in _hop_by_hop_headers
  1179:         Returns a :class:`MultiDict` instead of a ``TypeConversionDict``.
  1182:         Returns a :class:`TypeConversionDict` instead of a regular dict. The ``cls``
  1193:     return _sansio_http.parse_cookie(cookie=cookie, cls=cls)
  1220:     The return value is usually restricted to ascii as the vast majority
  1224:     The return value is not ASCII safe if the key contains unicode
  1347:     return rv
  1358:         return False
  1360:         return length is None or length >= 0
  1362:         return 0 <= start < stop  # type: ignore
  1364:         return False
  1365:     return 0 <= start < length

PythonVenv\Lib\site-packages\werkzeug\local.py:
   65:         return iter(self.__storage.get({}).items())
   77:         return LocalProxy(self, name, unbound_message=unbound_message)
   86:             return values[name]
  145:         return stack
  148:         """Remove the top item from the stack and return it. If the
  149:         stack is empty, return ``None``.
  154:             return None
  158:         return rv
  163:         `None` is returned.
  168:             return None
  170:         return stack[-1]
  183:         return LocalProxy(self, name, unbound_message=unbound_message)
  235:             return ClosingIterator(app(environ, start_response), self.cleanup)
  237:         return application
  249:         return update_wrapper(self.make_middleware(func), func)
  252:         return f"<{type(self).__name__} storages: {len(self.locals)}>"
  262:     :param fallback: Return this function if the proxy is unbound
  266:     :param class_value: Value to return when accessed from the
  288:                 return f.__get__(obj, type(obj))  # type: ignore
  296:                 return partial(f, obj)
  313:                 return self.class_value
  315:             return self
  328:                 return fallback()
  330:             return fallback
  333:             return self.bind_f(instance, obj)
  335:         return getattr(obj, self.name)
  338:         return f"proxy {self.name}"
  346:         returns the proxy type and descriptor.
  348:         return self.__get__(instance, type(instance))(*args, **kwargs)
  353:     method is wrapped to return the proxy instead of the object.
  368:                 return instance
  370:             return i_op.__get__(obj, type(obj))  # type: ignore
  379:         return op(other, obj)
  381:     return t.cast(F, r_op)
  385:     return o
  425:     Pass a function to proxy the return value from that function. This
  469:     """Return the current object this proxy is bound to. If the proxy is
  499:                     return get_name(local)  # type: ignore[return-value]
  511:                 return get_name(obj)
  521:                 return get_name(obj)
  526:                 return get_name(local())

PythonVenv\Lib\site-packages\werkzeug\security.py:
   22:     return "".join(secrets.choice(SALT_CHARS) for _ in range(length))
   42:         return (
   63:         return (
  106:     return f"{actual_method}${salt}${h}"
  126:         return False
  128:     return hmac.compare_digest(_hash_internal(method, salt, password)[0], hashval)
  138:     :return: A safe path, otherwise ``None``.
  157:             return None
  161:     return posixpath.join(*parts)

PythonVenv\Lib\site-packages\werkzeug\serving.py:
   98:         return True
  108:         return _len
  148:         return read
  158:         return self.server._server_version
  227:             # what Nginx or Apache could return.
  239:         return environ
  321:             return write
  410:             return self.run_wsgi
  413:         return getattr(super(), name)
  417:             return self.environ["REMOTE_ADDR"]  # type: ignore
  420:             return "<local>"
  422:         return self.client_address[0]
  425:         return self.client_address[1]
  478:         return value
  492:     return f"{value}\x1b[0m"
  541:     return cert, pkey
  585:     return cert_file, pkey_file
  615:     return ctx
  636:     return ctx
  643:     return isinstance(error, ssl.SSLError)
  647:     """Return ``AF_INET4``, ``AF_INET6``, or ``AF_UNIX`` depending on
  650:         return socket.AF_UNIX
  652:         return socket.AF_INET6
  653:     return socket.AF_INET
  659:     """Return a fully qualified socket address that can be passed to
  663:         return os.path.abspath(host.partition("://")[2])
  669:         return host, port
  670:     return res[0][4]  # type: ignore
  686:             return "::1" if family == socket.AF_INET6 else "127.0.0.1"
  688:         return s.getsockname()[0]  # type: ignore
  822:         return super().handle_error(request, client_address)
  921:         return ThreadedWSGIServer(
  926:         return ForkingWSGIServer(
  937:     return BaseWSGIServer(
  948:     return os.environ.get("WERKZEUG_RUN_MAIN") == "true"

PythonVenv\Lib\site-packages\werkzeug\test.py:
    81:                 return stream.write(s)
    95:                 return length
   141:     return stream, length, boundary
   147:     """Like `stream_encode_multipart` but returns a tuple in the form
   156:     return boundary, stream.read()
   427:         return cls(**out)
   442:         return urlunsplit((scheme, host, script_root, "", "")).rstrip("/") + "/"
   449:         return self._make_base_url(self.url_scheme, self.host, self.script_root)
   474:                 return "multipart/form-data"
   476:                 return "application/x-www-form-urlencoded"
   477:             return None
   478:         return ct
   494:         return ct.split(";")[0].strip() if ct else None
   513:         return CallbackDict(d, on_update)
   521:         return self.headers.get("Content-Length", type=int)
   546:         return rv  # type: ignore
   561:         return self._get_form("_form", MultiDict)
   572:         return self._get_form("_files", FileMultiDict)
   585:         return self._input_stream
   600:                 return _urlencode(self._args)
   601:             return ""
   602:         return self._query_string
   616:         return self._args
   626:         return self.host.split(":", 1)[0]
   635:                 return int(pieces[1])
   640:             return 443
   641:         return 80
   655:             return
   668:         """Return the built environ.
   704:             return _wsgi_encoding_dance(unquote(x))
   753:         return result
   756:         """Returns a request with the data.  If the request class is not
   764:         return cls(self.get_environ())
   791:         All data is available as properties on the returned response object. The
   792:         response cannot be returned as a tuple.
   833:         """Return a :class:`.Cookie` if it exists. Cookies are uniquely identified by
   847:         return self._cookies.get((domain, path, key))
   944:             return
   970:             return
   993:         return rv
  1056:         return self.open(builder, buffered=buffered)
  1066:         request to the application using it, and return the response.
  1071:         :param buffered: Convert the iterator returned by the app into
  1075:             redirects until a non-redirect status is returned.
  1123:             return response
  1134:             # that returns an iterator runs any cleanup code.
  1157:             return response
  1162:         return self.open(*args, **kw)
  1167:         return self.open(*args, **kw)
  1172:         return self.open(*args, **kw)
  1177:         return self.open(*args, **kw)
  1182:         return self.open(*args, **kw)
  1187:         return self.open(*args, **kw)
  1192:         return self.open(*args, **kw)
  1197:         return self.open(*args, **kw)
  1200:         return f"<{type(self).__name__} {self.application!r}>"
  1221:         return builder.get_environ()
  1229:     """Return a tuple in the form (app_iter, status, headers) of the
  1231:     returns an iterator all the time.
  1233:     Sometimes applications may use the `write()` callable returned
  1243:     :return: tuple in the form ``(app_iter, status, headers)``
  1262:         return buffer.append
  1280:     # original return value.
  1295:     return app_iter, status, Headers(headers)
  1302:     Test client requests will always return an instance of this class.
  1318:         Test client methods always return instances of this class.
  1358:         return self.get_data(as_text=True)
  1412:         return (
  1428:         return f"{self.key}={self.value}"
  1441:         return cls(
  1458:         return self.domain, self.path, self.decoded_key
  1462:         return self.max_age == 0 or (

PythonVenv\Lib\site-packages\werkzeug\testapp.py:
  102:             return x
  107:             return x
  176:     return Response(TEMPLATE % context, mimetype="text/html")
  188:     return _werkzeug_version

PythonVenv\Lib\site-packages\werkzeug\urls.py:
   23:     return out, e.end  # type: ignore
   45:         return "".join(out)
   48:     return _unquote_partial
  110:     return urlunsplit((parts.scheme, netloc, path, query, fragment))
  165:     return urlunsplit((parts.scheme, netloc, path, query, fragment))
  180:         return domain
  184:         return data.decode("idna")
  197:     return ".".join(parts)
  203:     return urlencode(items, safe="!$'()*,/:;?@")

PythonVenv\Lib\site-packages\werkzeug\user_agent.py:
  37:         return f"<{type(self).__name__} {self.browser}/{self.version}>"
  40:         return self.string
  43:         return bool(self.browser)
  47:         return self.string

PythonVenv\Lib\site-packages\werkzeug\utils.py:
   49:     returns the cached value. Setting the property sets the cached
   59:                 return 42
   97:             return self  # type: ignore
  114:         return value
  147:         return obj.environ
  154:         return obj.headers
  171:     """Returns the full content type string with charset for a mimetype.
  174:     appended, otherwise the mimetype is returned unchanged.
  178:     :return: The content type.
  192:     return mimetype
  196:     r"""Pass it a filename and it will return a secure version of it.  This
  198:     to :func:`os.path.join`.  The filename returned is an ASCII only string
  211:     The function might return an empty filename.  It's your responsibility
  213:     generate a random filename if the function returned an empty one.
  239:     return filename
  245:     """Returns a response object (a WSGI application) that, if called,
  279:     return response
  316:     return redirect(new_path, code)
  402:         If an encoding is returned when guessing ``mimetype`` from
  535:     return rv
  552:     returns a 404 :exc:`~werkzeug.exceptions.NotFound` error.
  577:     return send_file(path_str, environ, **kwargs)
  586:     If `silent` is True the return value will be `None` if the import fails.
  590:                    `None` is returned instead.
  591:     :return: imported object
  601:             return sys.modules[import_name]
  606:             return getattr(module, obj_name)
  616:     return None
  627:     Packages are not returned unless `include_packages` is `True`.  This can
  632:     :param include_packages: set to `True` if packages should be returned, too.
  634:     :return: generator
  691:         return f"<{type(self).__name__}({self.import_name!r}, {self.exception!r})>"

PythonVenv\Lib\site-packages\werkzeug\wsgi.py:
   20:     will automatically call the return value as WSGI application.
   26:             return Response('Hello World!')
   28:     return update_wrapper(lambda *a: f(*a)(*a[-2:]), f)
   66:     return _sansio_utils.get_current_url(**parts)
   75:         return None
   83:     return name, port
   89:     """Return the host for the given WSGI environment.
   92:     set. The returned host will only contain the port if it is different
  102:     :return: Host, with port if necessary.
  106:     return _sansio_utils.get_host(
  115:     """Return the ``Content-Length`` header value as an int. If the header is not given
  116:     or the ``Transfer-Encoding`` header is ``chunked``, ``None`` is returned to indicate
  117:     a streaming request. If the value is not an integer, or negative, 0 is returned.
  123:     return _sansio_utils.get_content_length(
  134:     """Return the WSGI input stream, wrapped so that it may be read safely without going
  145:     ``wsgi.input_terminated`` is set. Otherwise, an empty stream is returned unless the
  154:     :param safe_fallback: Return an empty stream when ``Content-Length`` is not set.
  182:             return t.cast(
  186:         return stream
  188:     # No limit given, return an empty stream unless the user explicitly allows the
  192:         return io.BytesIO() if safe_fallback else stream
  194:     return t.cast(t.IO[bytes], LimitedStream(stream, content_length))
  198:     """Return ``PATH_INFO`` from  the WSGI environment.
  208:     return path.decode(errors="replace")
  213:     respect the `close` callback of the iterable returned by the application.
  214:     Because it is useful to add another close action to a returned iterable
  218:         return ClosingIterator(app(environ, start_response), [cleanup_session,
  227:             return response(environ, start_response)
  253:         return self
  256:         return self._next()
  281:     return environ.get("wsgi.file_wrapper", FileWrapper)(  # type: ignore
  314:             return self.file.seekable()
  316:             return True
  317:         return False
  325:             return self.file.tell()
  326:         return None
  329:         return self
  334:             return data
  374:         return self
  380:             return chunk
  397:         return chunk, contextual_read_length
  410:             return chunk[: self.end_byte - contextual_read_length]
  411:         return chunk
  416:             return chunk
  433:     If reading from the stream returns zero bytes or raises an error,
  466:         return self._pos >= self.limit
  478:             Any return value is ignored.
  496:             Any return value is ignored.
  507:         disconnects, returning the remaining data.
  510:             Return the remaining data.
  513:             Handle case where wrapped stream returns fewer bytes than requested.
  516:             return self.readall()
  518:         return b""
  526:             return 0
  536:                     return 0
  545:                     return 0
  555:                 return 0
  563:             return 0
  566:         return out_size
  571:             return b""
  579:             # Stream may return empty before a max limit is reached.
  585:         return bytes(out)
  588:         """Return the current stream position.
  592:         return self._pos
  595:         return True

PythonVenv\Lib\site-packages\werkzeug\datastructures\accept.py:
   60:         """Returns a tuple describing the value's specificity."""
   61:         return (value != "*",)
   65:         return item == "*" or item.lower() == value.lower()
   70:         returned quality is ``0``.
   73:             return self.quality(key)
   74:         return list.__getitem__(self, key)
   77:         """Returns the quality of the key.
   85:                 return quality
   86:         return 0
   91:                 return True
   92:         return False
   96:         return f"{type(self).__name__}([{pairs_str}])"
  110:                     return idx
  112:         return list.index(self, key)
  115:         """Get the position of an entry or return -1.
  120:             return self.index(key)
  122:             return -1
  136:         return ",".join(result)
  139:         return self.to_header()
  145:                 return client_item, quality
  146:         return None
  149:         """Returns the best match from a list of possible matches based
  151:         same quality and specificity, the one is returned that comes first.
  154:         :param default: the value that is returned if none match
  172:         return result
  178:             return self[0][0]
  185:     return _mime_split_re.split(value.lower())
  194:         return tuple(x != "*" for x in _mime_split_re.split(value))
  199:             return False
  222:             return False
  224:         return (
  239:         return (
  246:         return "application/xhtml+xml" in self or "application/xml" in self
  251:         return "application/json" in self
  259:     return _locale_delim_re.split(value.lower())
  266:         return item == "*" or _normalize_lang(value) == _normalize_lang(item)
  273:         are returned unchanged.
  280:         The default is returned if no exact or fallback match is found.
  283:         :param default: The value that is returned if none match.
  290:             return result
  301:             return result
  308:         # Return a value from the original match list. Find the first
  311:             return next(item for item in matches if item.startswith(result))
  313:         return default
  322:                 return codecs.lookup(name).name
  324:                 return name.lower()
  326:         return item == "*" or _normalize(value) == _normalize(item)

PythonVenv\Lib\site-packages\werkzeug\datastructures\auth.py:
   19:     :attr:`.Request.authorization` returns an instance if the header is set.
   67:         return self.parameters.get(name)
   70:         return self.parameters.get(name)
   73:         return self.parameters.get(key, default)
   76:         return key in self.parameters
   80:             return NotImplemented
   82:         return (
   90:         """Parse an ``Authorization`` header value and return an instance, or ``None``
   98:             return None
  108:                 return None
  110:             return cls(scheme, {"username": username, "password": password})
  114:             return cls(scheme, parse_dict_header(rest), None)
  117:         return cls(scheme, None, rest)
  128:             return f"Basic {value}"
  131:             return f"{self.type.title()} {self.token}"
  133:         return f"{self.type.title()} {dump_header(self.parameters)}"
  136:         return self.to_header()
  139:         return f"<{type(self).__name__} {self.to_header()}>"
  188:         return self._type
  200:         return self._parameters
  212:         return self._token
  225:         return self.parameters.get(key)
  242:         return self[name]
  254:         return key in self.parameters
  258:             return NotImplemented
  260:         return (
  267:         return self.parameters.get(key, default)
  271:         """Parse a ``WWW-Authenticate`` header value and return an instance, or ``None``
  279:             return None
  287:             return cls(scheme, parse_dict_header(rest), None)
  290:         return cls(scheme, None, rest)
  295:             return f"{self.type.title()} {self.token}"
  308:             return f"Digest {', '.join(items)}"
  310:         return f"{self.type.title()} {dump_header(self.parameters)}"
  313:         return self.to_header()
  316:         return f"<{type(self).__name__} {self.to_header()}>"

PythonVenv\Lib\site-packages\werkzeug\datastructures\cache_control.py:
    8:     """Return a new property object for a cache header. Useful if you
   14:     return property(
   71:             return key in self
   75:                 return empty
   81:             return value
   82:         return None
  109:         return http.dump_header(self)
  112:         return self.to_header()
  116:         return f"<{type(self).__name__} {kv_str}>"

PythonVenv\Lib\site-packages\werkzeug\datastructures\csp.py:
   7:     """Return a new property object for a content security policy header.
  11:     return property(
  69:         return self.get(key)
  87:         return dump_csp_header(self)
  90:         return self.to_header()
  94:         return f"<{type(self).__name__} {kv_str}>"

PythonVenv\Lib\site-packages\werkzeug\datastructures\etag.py:
  26:         return rv
  30:         return etag in self._weak
  34:         return etag in self._strong
  38:         return self.is_weak(etag) or self.contains(etag)
  45:             return True
  46:         return self.is_strong(etag)
  56:             return self.contains_weak(etag)
  57:         return self.contains(etag)
  62:             return "*"
  63:         return ", ".join(
  76:                 return True
  77:         return etag in self._strong
  80:         return bool(self.star_tag or self._strong or self._weak)
  83:         return self.to_header()
  86:         return len(self._strong)
  89:         return iter(self._strong)
  92:         return self.contains(etag)
  95:         return f"<{type(self).__name__} {str(self)!r}>"

PythonVenv\Lib\site-packages\werkzeug\datastructures\file_storage.py:
   65:         return self.headers.get("content-type")
   72:                 return _plain_int(self.headers["content-length"])
   76:         return 0
   88:         return self._parsed_content_type[0].lower()
   99:         return self._parsed_content_type[1]
  142:         return bool(self.filename)
  146:             return getattr(self.stream, name)
  152:                 return getattr(self.stream._file, name)
  156:         return iter(self.stream)
  159:         return f"<{type(self).__name__}: {self.filename!r} ({self.content_type!r})>"

PythonVenv\Lib\site-packages\werkzeug\datastructures\headers.py:
   27:     class, with the exception of `__getitem__`.  :mod:`wsgiref` will return
   58:                 return self._list[key]
   60:                 return self.__class__(self._list[key])
   66:                 return v
   76:             return (item[0].lower(),) + item[1:]
   78:         return other.__class__ is self.__class__ and set(
   85:         """Return the default value if the requested data doesn't exist.
   87:         return it or raise a :exc:`ValueError` if that is not possible.  In
   88:         this case the function will return the default as if the value was not
   96:         :param default: The default value to be returned if the key can't
   98:                         returned.
  101:                      by this callable the default value is returned.
  112:             return default
  114:             return rv
  116:             return type(rv)
  118:             return default
  121:         """Return the list of items for a given key. If that key is not in the
  122:         :class:`Headers`, the return value will be an empty list.  Just like
  130:         :return: a :class:`list` of all the values for the key.
  148:         return result
  151:         """Return a list of all the values for the named field.
  156:         return self.getlist(name)
  199:             return
  212:         return self.__delitem__(key, _index_operation=False)
  215:         """Removes and returns a key or index.
  221:         :return: an item.
  224:             return self._list.pop()
  226:             return self._list.pop(key)
  232:                 return default
  234:         return rv
  237:         """Removes a key or index and returns a (key, value) item."""
  238:         return self.pop()
  245:             return False
  246:         return True
  250:         return iter(self._list)
  253:         return len(self._list)
  308:             return
  318:             return
  339:         """Return the first value for the key if it is in the headers,
  341:         return that.
  348:             return self[key]
  351:         return default
  354:         """Return the list of values for the key if it is in the
  356:         by ``default`` and return that.
  358:         Unlike :meth:`MultiDict.setlistdefault`, modifying the returned
  370:         return self.getlist(key)
  426:         :return: list
  428:         return list(self)
  431:         return self.__class__(self._list)
  434:         return self.copy()
  437:         """Returns formatted headers suitable for HTTP transmission."""
  442:         return "\r\n".join(strs)
  445:         return f"{type(self).__name__}({list(self)!r})"
  449:     return http.dump_options_header(
  464:     return value
  481:         return self.environ is other.environ
  492:             return self.environ[key]
  493:         return self.environ[f"HTTP_{key}"]
  498:         return len(list(iter(self)))

PythonVenv\Lib\site-packages\werkzeug\datastructures\headers.pyi:
    6: from typing import NoReturn
  109:     def copy(self) -> NoReturn: ...

PythonVenv\Lib\site-packages\werkzeug\datastructures\mixins.py:
   24:             return self._hash_cache
   26:         return rv
   29:         return type(self), (list(self),)
   79:         return instance
   82:         return type(self), (dict(self),)
   85:         return self.items()
   89:             return self._hash_cache
   91:         return rv
  124:         return type(self), (list(self.items(multi=True)),)
  127:         return self.items(multi=True)
  205:         return rv
  208:     return oncall
  226:         return rv
  236:         return rv

PythonVenv\Lib\site-packages\werkzeug\datastructures\mixins.pyi:
   5: from typing import NoReturn
  18: def is_immutable(self: object) -> NoReturn: ...
  23:     def __delitem__(self, key: SupportsIndex | slice) -> NoReturn: ...
  24:     def __iadd__(self, other: Any) -> NoReturn: ...  # type: ignore
  25:     def __imul__(self, other: SupportsIndex) -> NoReturn: ...
  26:     def __setitem__(self, key: int | slice, value: V) -> NoReturn: ...  # type: ignore
  27:     def append(self, value: V) -> NoReturn: ...
  28:     def remove(self, value: V) -> NoReturn: ...
  29:     def extend(self, values: Iterable[V]) -> NoReturn: ...
  30:     def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...
  31:     def pop(self, index: SupportsIndex = -1) -> NoReturn: ...
  32:     def reverse(self) -> NoReturn: ...
  35:     ) -> NoReturn: ...
  45:     def setdefault(self, key: K, default: V | None = None) -> NoReturn: ...
  46:     def update(self, *args: Any, **kwargs: V) -> NoReturn: ...
  47:     def pop(self, key: K, default: V | None = None) -> NoReturn: ...  # type: ignore
  48:     def popitem(self) -> NoReturn: ...
  49:     def __setitem__(self, key: K, value: V) -> NoReturn: ...
  50:     def __delitem__(self, key: K) -> NoReturn: ...
  51:     def clear(self) -> NoReturn: ...
  55:     def add(self, key: K, value: V) -> NoReturn: ...
  56:     def popitemlist(self) -> NoReturn: ...
  57:     def poplist(self, key: K) -> NoReturn: ...
  58:     def setlist(self, key: K, new_list: Iterable[V]) -> NoReturn: ...
  61:     ) -> NoReturn: ...
  64:     def __delitem__(self, key: Any, _index_operation: bool = True) -> NoReturn: ...
  65:     def __setitem__(self, key: Any, value: Any) -> NoReturn: ...
  66:     def set(self, _key: Any, _value: Any, **kw: Any) -> NoReturn: ...
  67:     def setlist(self, key: Any, values: Any) -> NoReturn: ...
  68:     def add(self, _key: Any, _value: Any, **kw: Any) -> NoReturn: ...
  69:     def add_header(self, _key: Any, _value: Any, **_kw: Any) -> NoReturn: ...
  70:     def remove(self, key: Any) -> NoReturn: ...
  71:     def extend(self, *args: Any, **kwargs: Any) -> NoReturn: ...
  72:     def update(self, *args: Any, **kwargs: Any) -> NoReturn: ...
  73:     def insert(self, pos: Any, value: Any) -> NoReturn: ...
  74:     def pop(self, key: Any = None, default: Any = ...) -> NoReturn: ...
  75:     def popitem(self) -> NoReturn: ...
  76:     def setdefault(self, key: Any, default: Any) -> NoReturn: ...
  77:     def setlistdefault(self, key: Any, default: Any) -> NoReturn: ...

PythonVenv\Lib\site-packages\werkzeug\datastructures\range.py:
   22:             return http.http_date(self.date)
   24:             return http.quote_etag(self.etag)
   25:         return ""
   28:         return self.to_header()
   31:         return f"<{type(self).__name__} {str(self)!r}>"
   60:         exactly one range and it is satisfiable it returns a ``(start, stop)``
   64:             return None
   71:             return start, min(end, length)
   72:         return None
   80:             return ContentRange(self.units, rng[0], rng[1], length)
   81:         return None
   91:         return f"{self.units}={','.join(ranges)}"
   99:             return f"{self.units} {range[0]}-{range[1] - 1}/{length}"
  100:         return None
  103:         return self.to_header()
  106:         return f"<{type(self).__name__} {str(self)!r}>"
  111:         return getattr(self, name)
  118:     return property(fget, fset)
  160:             return ""
  166:             return f"{self.units} */{length}"
  167:         return f"{self.units} {self.start}-{self.stop - 1}/{length}"
  170:         return self.units is not None
  173:         return self.to_header()
  176:         return f"<{type(self).__name__} {str(self)!r}>"

PythonVenv\Lib\site-packages\werkzeug\datastructures\structures.py:
    44:         return f"{type(self).__name__}({list.__repr__(self)})"
    56:         """Return the default value if the requested data doesn't exist.
    58:         return it or raise a :exc:`ValueError` if that is not possible.  In
    59:         this case the function will return the default as if the value was not
    69:         :param default: The default value to be returned if the key can't
    71:                         returned.
    75:                      value is returned.
    78:            Returns the default value on :exc:`TypeError`, too.
    83:             return default
    89:         return rv
   100:         """Return a shallow mutable copy of this object.  Keep in mind that
   104:         return TypeConversionDict(self)
   107:         return self
   118:     access methods will only return the first value for a key. If you want to
   134:     It behaves like a normal dict thus all dict functions will only return the
   172:         return dict(self.lists())
   180:         # (`return super().__iter__()` also works here, which makes this look
   182:         return dict.__iter__(self)
   185:         """Return the first data value for this key;
   195:                 return lst[0]
   217:         """Return the list of items for a given key. If that key is not in the
   218:         `MultiDict`, the return value will be an empty list.  Just like `get`,
   226:         :return: a :class:`list` of all the values for the key.
   231:             return []
   233:             return list(rv)
   240:         return result
   261:         """Returns the value for the key if it is in the dict, otherwise it
   262:         returns `default` and sets that value for `key`.
   265:         :param default: The default value to be returned if the key is not
   272:         return default
   275:         """Like `setdefault` but sets multiple values.  The list returned
   288:                              before returned.
   289:         :return: a :class:`list`
   296:         return default_list
   299:         """Return an iterator of ``(key, value)`` pairs.
   301:         :param multi: If set to `True` the iterator returned will have a pair
   313:         """Return a iterator of ``(key, values)`` pairs, where values is the list
   319:         """Returns an iterator of the first value on every key's value list."""
   324:         """Return an iterator of all values associated with a key.  Zipping
   331:         return dict.values(self)
   334:         """Return a shallow copy of this object."""
   335:         return self.__class__(self)
   338:         """Return a deep copy of this object."""
   339:         return self.__class__(deepcopy(self.to_dict(flat=False), memo))
   342:         """Return the contents as regular dict.  If `flat` is `True` the
   343:         returned dict will only have the first item present, if `flat` is
   344:         `False` all values will be returned as lists.
   346:         :param flat: If set to `False` the dict returned will have lists
   349:         :return: a :class:`dict`
   352:             return dict(self.items())
   353:         return dict(self.lists())
   387:         :param default: if provided the value to return if the key was
   396:             return lst[0]
   399:                 return default
   411:             return (item[0], item[1][0])
   417:         an empty list is returned.
   420:            If the key does no longer exist a list is returned instead of
   423:         return dict.pop(self, key, [])
   428:             return dict.popitem(self)
   433:         return self.copy()
   436:         return self.deepcopy(memo=memo)
   439:         return f"{type(self).__name__}({list(self.items(multi=True))!r})"
   498:             return NotImplemented
   506:                         return False
   508:                 return False
   512:                 return True
   513:             return False
   515:             return False
   518:                 return False
   519:         return True
   524:         return type(self), (list(self.items(multi=True)),)
   527:         return list(self.items(multi=True))
   536:             return dict.__getitem__(self, key)[0].value
   547:         return (key for key, value in self.items())
   550:         return iter(self.keys())
   553:         return (value for key, value in self.items())
   562:             returned_keys = set()
   564:                 if ptr.key not in returned_keys:
   565:                     returned_keys.add(ptr.key)
   570:         returned_keys = set()
   573:             if ptr.key not in returned_keys:
   575:                 returned_keys.add(ptr.key)
   589:             return []
   591:             return [x.value for x in rv]
   598:         return result
   616:         return [x.value for x in buckets]
   623:                 return default
   630:         return buckets[0].value
   641:         return key, buckets[0].value
   652:         return key, [x.value for x in buckets]
   657:     instances as sequence and it will combine the return values of all wrapped
   679:         return type(self), (self.dicts,)
   691:                 return d[key]
   699:                         return type(d[key])
   702:                 return d[key]
   703:         return default
   709:         return rv
   717:         return rv
   720:         return self._keys_impl()
   723:         return iter(self.keys())
   744:         return list(rv.items())
   747:         return (x[1] for x in self.lists())
   750:         """Return a shallow mutable copy of this object.
   752:         This returns a :class:`MultiDict` representing the data at the
   757:             Return a mutable :class:`MultiDict`.
   759:         return MultiDict(self)
   762:         """Return the contents as regular dict.  If `flat` is `True` the
   763:         returned dict will only have the first item present, if `flat` is
   764:         `False` all values will be returned as lists.
   766:         :param flat: If set to `False` the dict returned will have lists
   769:         :return: a :class:`dict`
   772:             return dict(self.items())
   774:         return dict(self.lists())
   777:         return len(self._keys_impl())
   782:                 return True
   783:         return False
   786:         return f"{type(self).__name__}({self.dicts!r})"
   796:         return f"{type(self).__name__}({dict.__repr__(self)})"
   799:         """Return a shallow mutable copy of this object.  Keep in mind that
   803:         return dict(self)
   806:         return self
   816:         """Return a shallow mutable copy of this object.  Keep in mind that
   820:         return MultiDict(self)
   823:         return self
   833:         return enumerate(self.items(multi=True))
   836:         """Return a shallow mutable copy of this object.  Keep in mind that
   840:         return OrderedMultiDict(self)
   843:         return self
   856:         return f"<{type(self).__name__} {dict.__repr__(self)}>"
   928:         """Return the index of the header in the set or return -1 if not found.
   935:                 return idx
   936:         return -1
   939:         """Return the index of the header in the set or raise an
   947:         return rv
   957:         """Return the set as real python set type.  When calling this, all
   960:         :param preserve_casing: if set to `True` the items in the set returned
   966:             return set(self._headers)
   967:         return set(self._set)
   971:         return ", ".join(map(http.quote_header_value, self._headers))
   974:         return self._headers[idx]
   991:         return header.lower() in self._set
   994:         return len(self._set)
   997:         return iter(self._headers)
  1000:         return bool(self._set)
  1003:         return self.to_header()
  1006:         return f"{type(self).__name__}({self._headers!r})"

PythonVenv\Lib\site-packages\werkzeug\datastructures\structures.pyi:
    8: from typing import NoReturn
   23: def is_immutable(self: object) -> NoReturn: ...
  130:     def fromkeys(cls, keys: Any, value: Any = None) -> NoReturn: ...

PythonVenv\Lib\site-packages\werkzeug\debug\__init__.py:
   44:     return hashlib.sha1(f"{pin} added salt".encode("utf-8", "replace")).hexdigest()[:12]
   54:         return _machine_id
   81:             return linux
   96:                 return match.group(1)
  116:                         return guid.encode()
  118:                     return guid
  122:         return None
  125:     return _machine_id
  138:         return self.console.eval(code)
  144:     """Given an application object this returns a semi-stable 9 digit pin
  147:     was forcefully disabled this returns `None`.
  157:         return None, None
  161:         # If there are separators in the pin, return it directly
  224:     return rv, cookie_name
  252:                               the general purpose console.  The return value
  316:         return self._pin
  328:         return self._pin_cookie
  378:     def execute_command(  # type: ignore[return]
  386:             return SecurityError()  # type: ignore[return-value]
  394:             return Response(frame.eval(command), mimetype="text/html")
  399:             return SecurityError()  # type: ignore[return-value]
  409:         return Response(
  415:         """Return a static resource from the shared folder."""
  421:             return NotFound()  # type: ignore[return-value]
  424:                 return NotFound()  # type: ignore[return-value]
  427:             return send_file(
  432:         """Checks if the request passed the pin test.  This returns `True` if the
  433:         request is trusted on a pin/cookie basis and returns `False` if not.
  434:         Additionally if the cookie's stored pin hash is wrong it will return
  438:             return True
  441:             return False
  447:             return False
  450:             return None
  451:         return (time.time() - PIN_TIME) < ts
  454:         return host_is_trusted(environ.get("HTTP_HOST"), self.trusted_hosts)
  463:             return SecurityError()  # type: ignore[return-value]
  470:         # If the trust return value is `None` it means that the cookie is
  512:         return rv
  517:             return SecurityError()  # type: ignore[return-value]
  524:         return Response("")
  560:         return response(environ, start_response)

PythonVenv\Lib\site-packages\werkzeug\debug\console.py:
   26:         return False
   39:             return ""
   42:         return ret
   47:         return val
   74:             return ""
   76:         return stream.reset()
   83:             return _displayhook(obj)  # type: ignore
   95:         return dir(sys.__stdout__)
  103:         return getattr(stream, name)
  106:         return repr(sys.__stdout__)
  127:             return self._storage[id(code)]
  129:             return None
  153:             return code
  173:         return f"{prompt}{escape(source)}{output}"
  217:             return self._ipy.runsource(code)

PythonVenv\Lib\site-packages\werkzeug\debug\repr.py:
   40:     return DebugReprGenerator().repr(obj)
   61:         return "Type help(object) for help about object."
   66:             return
   88:                 return inner
   90:         return inner
   94:     return f"{module}{type(obj).__name__}({inner})"
  102:             return _add_subclass_info(f"{left}...{right}", obj, base)
  115:         return _add_subclass_info("".join(buf), obj, base)
  117:     return proxy
  136:         return f're.compile(<span class="string regex">{pattern}</span>)'
  160:             return _add_subclass_info(out, obj, (bytes, str))
  163:         return out
  172:             return _add_subclass_info("{...}", d, dict)
  188:         return _add_subclass_info("".join(buf), d, dict)
  192:         return f'<span class="object">{escape(r)}</span>'
  196:             return f'<span class="help">{helper!r}</span>'
  198:             return f'<span class="number">{obj!r}</span>'
  200:             return self.string_repr(obj)
  202:             return self.regex_repr(obj)
  204:             return self.list_repr(obj, recursive)
  206:             return self.tuple_repr(obj, recursive)
  208:             return self.set_repr(obj, recursive)
  210:             return self.frozenset_repr(obj, recursive)
  212:             return self.dict_repr(obj, recursive)
  214:             return self.deque_repr(obj, recursive)
  215:         return self.object_repr(obj)
  222:         return (
  236:                 return self.dispatch_repr(obj, recursive)
  238:                 return self.fallback_repr()
  264:         return self.render_object_dump(items, title, repr)
  268:         return self.render_object_dump(items, "Local variables in frame")
  278:         return OBJECT_DUMP_HTML % {

PythonVenv\Lib\site-packages\werkzeug\debug\tbtools.py:
  217:     return te
  234:         return f"<{type(self).__name__} {self._te}>"
  263:         return out
  267:         return [
  274:         return "".join(self._te.format())
  316:         return SUMMARY_HTML % {
  328:         return PAGE_HTML % {
  368:         return self.local_ns.get("__traceback_info__")
  372:         return any(
  379:         return Console(self.global_ns, self.local_ns)
  382:         return self.console.eval(code)
  422:         return FRAME_HTML % {
  433:     return CONSOLE_HTML % {

PythonVenv\Lib\site-packages\werkzeug\debug\shared\debugger.js:
   97:     return consoleNode;
  141:     return false;
  144:   return consoleElement;
  183:         return false;
  212:   return consoleNode;
  219:   return output;
  225:   return form;
  235:   return command;
  242:   return img;
  250:   return expansionButton;
  265:   return new Promise((resolve) => {
  279:         return "&" + encodeURIComponent(key) + "=" + encodeURIComponent(params[key]);
  285:         return res.text();
  312:             return false;
  324:     return false;

PythonVenv\Lib\site-packages\werkzeug\middleware\dispatcher.py:
  81:         return app(environ, start_response)

PythonVenv\Lib\site-packages\werkzeug\middleware\http_proxy.py:
   94:             return opts
  198:                 return BadGateway()(environ, start_response)
  221:             return read()
  223:         return application
  236:         return app(environ, start_response)

PythonVenv\Lib\site-packages\werkzeug\middleware\lint.py:
   59:                 " return from this call.",
   69:         return self._stream.read(*args)
   88:         return self._stream.readline(*args)
   92:             return iter(self._stream)
   95:             return iter(())
  147:         return self
  157:                 "The application returned before it started the response.",
  164:         return rv
  233:     -   strings returned from the WSGI application
  347:         return status_code, headers_obj
  379:                 "The application returned a string. The response will send one"
  381:                 " Return a list or iterable instead.",
  433:             return GuardedWrite(start_response(status, headers, exc_info), chunks)
  437:         return GuardedIterator(

PythonVenv\Lib\site-packages\werkzeug\middleware\profiler.py:
   52:     be expected to return a filename string. The ``environ`` dictionary
   67:         or a callable returning a name. See explanation above.
  112:             return response_body.append
  155:         return [body]

PythonVenv\Lib\site-packages\werkzeug\middleware\proxy_fix.py:
  111:         :return: The real value, or ``None`` if there are fewer values
  120:             return None
  123:             return values[-trusted]
  124:         return None
  183:         return self.app(environ, start_response)

PythonVenv\Lib\site-packages\werkzeug\middleware\shared_data.py:
  147:         return True
  150:         return lambda: (
  157:         return lambda x: (os.path.basename(filename), self._opener(filename))
  168:                 return None, None
  173:                 return None, None
  180:                 return None, None
  183:                 return (
  188:             return (
  199:         return loader
  209:                     return None, None
  214:                 return os.path.basename(path), self._opener(path)
  216:             return None, None
  218:         return loader
  224:         return f"wzsdm-{timestamp}-{file_size}-{checksum}"
  249:             return self.app(environ, start_response)
  268:                 return []
  282:         return wrap_file(environ, f)

PythonVenv\Lib\site-packages\werkzeug\routing\__init__.py:
  4: calling registered callback functions that return the value then.

PythonVenv\Lib\site-packages\werkzeug\routing\converters.py:
   41:         return value
   45:         return quote(str(value), safe="!$&'()*+,/:;=@")
  106:             return str(value)
  160:         return value_num
  166:         return value_str
  170:         return f"-?{self.regex}"
  246:         return uuid.UUID(value)
  249:         return str(value)

PythonVenv\Lib\site-packages\werkzeug\routing\exceptions.py:
   46:         return redirect(self.new_url, self.code)
   88:         return self.closest_rule(self.adapter)
   92:             return sum(
  107:             return max(adapter.map._rules, key=_score_rule)
  109:         return None
  138:         return "".join(message)

PythonVenv\Lib\site-packages\werkzeug\routing\map.py:
  128:         return self._matcher.merge_slashes
  151:                 return True
  152:         return False
  156:         return [rule for rules in self._rules_by_endpoint.values() for rule in rules]
  162:                          are returned.
  163:         :return: an iterator
  167:             return iter(self._rules_by_endpoint[endpoint])
  168:         return iter(self._rules)
  193:         """Return a new :class:`MapAdapter` with the details specified to the
  241:         return MapAdapter(
  344:                 return _wsgi_decoding_dance(val)
  345:             return None
  350:         return Map.bind(
  366:             return
  370:                 return
  379:         return f"{type(self).__name__}({pformat(list(rules))})"
  383:     """Returned by :meth:`Map.bind` or :meth:`Map.bind_to_environ` and does
  421:         look up the view function, call it, and return a response object
  435:                 return Response('Hello from the index')
  444:                 return urls.dispatch(lambda e, v: views[e](request, **v),
  447:         Keep in mind that this method might return exception objects, too, so
  465:                 return e
  466:             return view_func(endpoint, args)
  469:                 return e
  477:         return_rule: t.Literal[False] = False,
  487:         return_rule: t.Literal[True] = True,
  496:         return_rule: bool = False,
  526:           a match (unless `return_rule` is True, in which case you get a tuple
  565:         :param return_rule: return the rule that matched instead of just the
  585:             Added ``return_rule``.
  643:                         return rule._converters[match.group(1)].to_url(value)
  661:             if return_rule:
  662:                 return rule, rv
  664:                 return rule.endpoint, rv
  667:         """Test if a rule would match.  Works like `match` but returns `True`
  680:             return False
  681:         return True
  684:         """Returns the valid methods that match for a given path.
  691:             return e.valid_methods  # type: ignore
  694:         return []
  703:                 return self.server_name
  705:             return domain_part
  713:             return f"{subdomain}.{self.server_name}"
  715:             return self.server_name
  724:         """A helper that returns the URL to redirect to if it finds one.
  739:                 return self.make_redirect_url(path, query_args, domain_part=domain_part)
  740:         return None
  744:             return _urlencode(query_args)
  745:         return query_args
  768:         return urlunsplit((scheme, host, path, query_str, None))
  785:         return url
  794:         """Helper for :meth:`build`.  Returns subdomain and path for the
  805:                 return rv
  820:                             return rv
  824:                         return rv
  826:         return first_match
  948:             return f"{self.script_name.rstrip('/')}/{path.lstrip('/')}"
  951:         return f"{scheme}//{host}{self.script_name[:-1]}/{path.lstrip('/')}"

PythonVenv\Lib\site-packages\werkzeug\routing\matcher.py:
   88:             # websocket that work return it and the dynamic values
   97:                         return rule, values
  110:                                 return rule, values
  111:                 return None
  118:                     return rv
  149:                         return rv
  164:                         return rule, values
  166:             return None
  200:             return rule, result

PythonVenv\Lib\site-packages\werkzeug\routing\rules.py:
   91:     Returns the *value* length if *target* isn't found.
   94:         return value.index(target, pos)
   96:         return len(value)
  101:         return _PYTHON_CONSTANTS[value]
  104:             return convert(value)  # type: ignore
  109:     return str(value)
  135:     return tuple(args), kwargs
  145:         """Subclasses of `RuleFactory` have to override this method and return
  233:     """Returns copies of the rules wrapped and expands string templates in
  255:         return RuleTemplateFactory(self.rules, dict(*args, **kwargs))
  305:     return tree
  395:         the values of the URL as keyword arguments and has to return the target
  402:                 return f'foo/{Foo.get_slug_for_id(id)}'
  510:         Return an unbound copy of this rule.
  516:         return type(self)(self.rule, **self.get_empty_kwargs())
  526:         Must return a ``dict`` that will be provided as kwargs to the new
  533:         return dict(
  586:         return self.map.converters[converter_name](self.map, *args, **kwargs)
  594:         return _urlencode(items)
  728:         return locs[name]  # type: ignore
  757:             return ret
  772:             return ret
  784:                 return parts[0]
  785:             return ast.JoinedStr(parts)
  788:             ast.Return(ast.Tuple([_join(dom_parts), _join(url_parts)], ast.Load()))
  827:         return self._get_func_code(code, func_ast.name)
  833:         If building doesn't work for some reasons `None` is returned.
  839:                 return self._build_unknown(**values)
  841:                 return self._build(**values)
  843:             return None
  850:         return bool(
  872:             return False
  880:                 return False
  887:                     return False
  889:         return True
  896:         return (1 if self.alias else 0, -len(self.arguments), -len(self.defaults or ()))
  899:         return isinstance(other, type(self)) and self._trace == other._trace
  904:         return self.rule
  908:             return f"<{type(self).__name__} (unbound)>"
  917:         return f"<{type(self).__name__} {parts_str!r}{methods} -> {self.endpoint}>"

PythonVenv\Lib\site-packages\werkzeug\sansio\http.py:
   40:     :return: `True` if the resource was modified, otherwise `False`.
   94:     return not unmodified
  118:         return v
  120:     return int(v, 8).to_bytes(1, "big")
  147:         return cls()
  167:     return cls(out)

PythonVenv\Lib\site-packages\werkzeug\sansio\multipart.py:
   80:     The part data is returned as available to allow the caller to save
  134:         return min(last_nl, last_cr)
  231:         return event
  244:         return Headers(headers)
  260:             # return up to that as data.
  265:             # and return all pending data.
  282:         return bytes(data[data_start:data_end]), del_index, more_data
  293:             return event.data
  308:             return data
  312:                 return b"\r\n" + event.data
  314:                 return event.data
  316:             return event.data
  319:             return b"\r\n--" + self.boundary + b"--\r\n" + event.data

PythonVenv\Lib\site-packages\werkzeug\sansio\request.py:
   97:     """The class used and returned by the :attr:`user_agent` property to
  157:         return f"<{type(self).__name__} {url!r} [{self.method}]>"
  166:         is returned from this function.  This can be changed by setting
  173:         return self.parameter_storage_class(
  187:             return self.list_storage_class(
  191:             return self.list_storage_class([self.remote_addr])
  192:         return self.list_storage_class()
  197:         return f"{self.path}?{self.query_string.decode()}"
  204:         return self.scheme in {"https", "wss"}
  210:         return get_current_url(
  217:         return get_current_url(self.scheme, self.host, self.root_path, self.path)
  224:         return get_current_url(self.scheme, self.host, self.root_path)
  229:         return get_current_url(self.scheme, self.host)
  236:         return get_host(
  245:         return parse_cookie(  # type: ignore
  267:         return get_content_length(
  342:         return self._parsed_content_type[0].lower()
  351:         return self._parsed_content_type[1]
  361:         return parse_set_header(self.headers.get("Pragma", ""))
  370:         return parse_accept_header(self.headers.get("Accept"), MIMEAccept)
  377:         return parse_accept_header(self.headers.get("Accept-Charset"), CharsetAccept)
  385:         return parse_accept_header(self.headers.get("Accept-Encoding"))
  396:         return parse_accept_header(self.headers.get("Accept-Language"), LanguageAccept)
  406:         return parse_cache_control_header(cache_control, None, RequestCacheControl)
  414:         return parse_etags(self.headers.get("If-Match"))
  422:         return parse_etags(self.headers.get("If-None-Match"))
  431:         return parse_date(self.headers.get("If-Modified-Since"))
  440:         return parse_date(self.headers.get("If-Unmodified-Since"))
  451:         return parse_if_range_header(self.headers.get("If-Range"))
  461:         return parse_range_header(self.headers.get("Range"))
  476:         return self.user_agent_class(self.headers.get("User-Agent", ""))
  489:         return Authorization.from_header(self.headers.get("Authorization"))
  532:         return (

PythonVenv\Lib\site-packages\werkzeug\sansio\response.py:
   48:         return parse_set_header(self.headers.get(name), on_update)
   61:     return property(fget, fset, doc=doc)
  140:         return f"<{type(self).__name__} [{self.status}]>"
  145:         return self._status_code
  154:         return self._status
  175:                 return f"0 {value}", 0
  179:                 return value, status_code
  187:         return status, status_code
  280:         return mt is not None and (
  294:             return ct.split(";")[0].strip()
  296:             return None
  315:         return CallbackDict(d, on_update)
  399:         not normally be returned by a cache.
  432:             return None
  437:             return parse_date(value)
  439:         return datetime.now(timezone.utc) + timedelta(seconds=seconds)
  446:             return
  492:         return parse_cache_control_header(
  501:         """Return a tuple in the form ``(etag, is_weak)``.  If there is no
  502:         ETag the return value is ``(None, None)``.
  504:         return unquote_etag(self.headers.get("ETag"))
  538:         return rv
  568:         will only ever return the first value.
  589:         return value
  639:         return rv
  674:         return rv
  695:         return "Access-Control-Allow-Credentials" in self.headers

PythonVenv\Lib\site-packages\werkzeug\sansio\utils.py:
   21:         return False
   26:         return False
   41:             return False
   44:             return True
   46:     return False
   55:     """Return the host for the given parameters.
   71:     :return: Host, with port if necessary.
   94:     return host
  121:         return uri_to_iri("".join(url))
  129:         return uri_to_iri("".join(url))
  137:     return uri_to_iri("".join(url))
  144:     """Return the ``Content-Length`` header value as an int. If the header is not given
  145:     or the ``Transfer-Encoding`` header is ``chunked``, ``None`` is returned to indicate
  146:     a streaming request. If the value is not an integer, or negative, 0 is returned.
  154:         return None
  157:         return max(0, _plain_int(http_content_length))
  159:         return 0

PythonVenv\Lib\site-packages\werkzeug\wrappers\request.py:
  149:         :return: request object
  155:             return builder.get_request(cls)
  169:                 return Response('Hello World!')
  175:         :return: a new WSGI callable
  177:         #: return a callable that wraps the -2nd argument with the request
  179:         #: the request.  The return value is then called with the latest
  193:                 return resp(*args[-2:])
  195:         return t.cast("WSGIApplication", application)
  209:         The default implementation returns a temporary file if the total
  223:         return default_stream_factory(
  237:         return bool(self.environ.get("CONTENT_TYPE"))
  245:         return self.form_data_parser_class(
  264:             return
  295:             return BytesIO(cached_data)
  296:         return self.stream
  310:         return self
  328:         ``wsgi.input_terminated`` is set. Otherwise, an empty stream is returned.
  348:         return get_input_stream(
  370:         return self.get_data(parse_form_data=True)
  400:         return anything as form data parsing does not cache the data like
  402:         set `parse_form_data` to `True`.  When this is done the return value
  410:         If `as_text` is set to `True` the return value will be a decoded
  424:         return rv
  430:         is returned from this function.  This can be changed by setting
  443:         return self.form
  472:         return CombinedMultiDict(args)
  495:         return self.files
  502:         return self.root_path
  509:         return self.root_url
  557:         return self.get_json()
  581:         its return value is used as the return value. By default this
  586:             return ``None`` instead.
  587:         :param cache: Store the parsed JSON to return for subsequent
  597:             return self._cached_json[silent]
  601:                 return self.on_json_loading_failed(None)
  603:                 return None
  626:         return rv
  631:         If this method returns a value, it is used as the return value

PythonVenv\Lib\site-packages\werkzeug\wrappers\response.py:
   56:     return its body as an iterable.
   63:             return Response("Hello, World!")
   73:             return response(environ, start_response)
  182:         function also returns the function that was passed so that this
  188:         return func
  195:         return f"<{type(self).__name__} {body_info} [{self.status}]>"
  226:         :return: a response object.
  240:         return response
  247:         works best if you pass it an application that returns a generator all
  249:         returned by the `start_response` function.  This tries to resolve such
  256:         :return: a response object.
  260:         return cls(*run_wsgi_app(app, environ, buffered))
  276:         If `as_text` is set to `True` the return value will be a decoded
  285:             return rv.decode()
  287:         return rv
  309:         """Returns the content length if available or `None` otherwise."""
  313:             return None
  314:         return sum(len(x) for x in self.iter_encoded())
  327:             return
  360:         If the response object is invoked as WSGI application the return
  365:         # early.  This allows us to wrap the response with the return
  367:         return _iter_encoded(self.response)
  382:             return True
  383:         return False
  393:         return isinstance(self.response, (tuple, list))
  408:         return self
  440:         and returns headers modified for the given environment.  It returns a
  459:         :return: returns a new :class:`~werkzeug.datastructures.Headers`
  518:         return headers
  521:         """Returns the application iterator for the given environ.  Depending
  522:         on the request method and the current status code the return value
  527:         iterable is returned.
  532:         :return: a response iterable.
  542:             return self.response  # type: ignore
  545:         return ClosingIterator(iterable, self.close)
  550:         """Returns the final WSGI response as tuple.  The first item in
  552:         the third the list of headers.  The response returned is created
  560:         :return: an ``(app_iter, status, headers)`` tuple.
  564:         return app_iter, self.status, headers.to_wsgi_list()
  574:         :return: an application iterator
  578:         return app_iter
  593:         return self.get_json()
  606:         returns ``None``.
  611:         :param silent: Silence parsing errors and return ``None``
  615:             return None
  620:             return self.json_module.loads(data)
  625:             return None
  632:         return ResponseStream(self)
  640:         """Return ``True`` if `Range` header is present and if underlying
  643:         return (
  665:         Returns ``True`` if Range Request can be fulfilled, ``False`` otherwise.
  671:             Returns ``False`` if the length is 0.
  681:             return False
  703:         return True
  721:         methods as described by :py:class:`io.IOBase`.  Objects returned by
  727:         Returns self so that you can do ``return resp.make_conditional(req)``
  776:         return self
  807:         return len(value)
  823:         return False
  827:         return sum(map(len, self.response.response))
  831:         return "utf-8"

PythonVenv\Lib\site-packages\werkzeug-3.0.3.dist-info\METADATA:
  78:     return Response("Hello, World!")

PythonVenv\Lib\site-packages\wheel\_setuptools_logging.py:
  9:     return record.levelno < logging.WARNING

PythonVenv\Lib\site-packages\wheel\bdist_wheel.py:
   39:     return re.sub("[^A-Za-z0-9.]+", "-", name)
   48:         return str(_packaging_version.Version(version))
   51:         return re.sub("[^A-Za-z0-9.]+", "-", version)
   60:     return struct.calcsize("P") == 4
   64:     return f"py{sys.version_info[0]}"
   68:     """Return our platform name 'win32', 'linux_x86_64'"""
   82:     return result.replace("-", "_")
   96:         return fallback
   97:     return val == expected
  101:     """Return the ABI tag based on SOABI (if available) or emulate SOABI (PyPy2)."""
  137:     return abi
  141:     return safe_name(name).replace("-", "_")
  145:     return safe_version(version).replace("-", "_")
  292:         """Return distribution full name with - replaced with _"""
  299:         return "-".join(components)
  357:         return tag
  478:         return path
  484:             return self.distribution.metadata.license_files or ()
  523:         return files

PythonVenv\Lib\site-packages\wheel\macosx_libfile.py:
  242:     return (
  271:     return BaseClass, magic_number
  275:     return struct_class.from_buffer_copy(lib_file.read(ctypes.sizeof(struct_class)))
  282:             return
  324:                 return max(versions_list)
  326:                 return None
  330:                 return read_mach_header(lib_file, 0)
  333:                 return None
  370:             return parse_version(version_info.version)
  377:             return parse_version(version_info.minos)
  387:     return x, y, z
  469:     return platform_tag

PythonVenv\Lib\site-packages\wheel\metadata.py:
   20:     return str and not str.startswith("#")
   38:     return itertools.chain.from_iterable(map(yield_lines, iterable))
   43:     return filter(_nonblank, map(str.strip, text.splitlines()))
   51:     header, they're returned in a first ``section`` of ``None``.
   76:     return re.sub("[^A-Za-z0-9.-]+", "_", extra).lower()
   83:     return re.sub("[^A-Za-z0-9.]+", "-", name)
   87:     """Return the version specifier for a requirement in PEP 345/566 fashion."""
   89:         return " @ " + requirement.url
   96:         return " " + ",".join(sorted(requires_dist))
   98:         return ""
  180:     return pkg_info

PythonVenv\Lib\site-packages\wheel\util.py:
  20:     return base64.urlsafe_b64encode(data).rstrip(b"=")
  26:     return base64.urlsafe_b64decode(data + pad)

PythonVenv\Lib\site-packages\wheel\wheelfile.py:
   30:     return time.gmtime(timestamp)[0:6]
  120:         return ef

PythonVenv\Lib\site-packages\wheel\cli\__init__.py:
   66:     return build_tag
  140:     return p
  151:             return 0
  155:     return 1

PythonVenv\Lib\site-packages\wheel\cli\convert.py:
   40:             return self.full_tag
   42:             return bdist_wheel.get_tag(self)
  167:     return {"name": w_name, "ver": w_ver, "arch": w_arch, "pyver": w_pyver}

PythonVenv\Lib\site-packages\wheel\cli\pack.py:
  80:     :return: A tagline
  85:     return "-".join([".".join(impls), ".".join(abivers), ".".join(platforms)])

PythonVenv\Lib\site-packages\wheel\cli\tags.py:
   15:         return set(original_tags)
   18:         return {*original_tags, *new_tags[1:].split(".")}
   21:         return set(original_tags) - set(new_tags[1:].split("."))
   23:     return set(new_tags.split("."))
  139:     return final_wheel_name

PythonVenv\Lib\site-packages\wheel\vendored\packaging\_elffile.py:
   91:         return struct.unpack(fmt, self._f.read(struct.calcsize(fmt)))
  107:             return os.fsdecode(self._f.read(data[self._p_idx[2]])).strip("\0")
  108:         return None

PythonVenv\Lib\site-packages\wheel\vendored\packaging\_manylinux.py:
   33:         return (
   45:         return (
   55:         return _is_linux_armhf(executable)
   57:         return _is_linux_i686(executable)
   67:     return any(arch in allowed_archs for arch in archs)
   98:         return None
   99:     return version
  109:         return None
  112:     # manpage says, "If filename is NULL, then the returned handle is for the
  127:         return None
  134:         return None
  136:     # Call gnu_get_libc_version, which returns a string like "2.5"
  143:     return version_str
  147:     """Returns glibc version string, or None if not using glibc."""
  148:     return _glibc_version_string_confstr() or _glibc_version_string_ctypes()
  166:         return -1, -1
  167:     return int(m.group("major")), int(m.group("minor"))
  174:         return (-1, -1)
  175:     return _parse_glibc_version(version_str)
  182:         return False
  187:         return True
  191:             return bool(result)
  192:         return True
  195:             return bool(_manylinux.manylinux1_compatible)
  198:             return bool(_manylinux.manylinux2010_compatible)
  201:             return bool(_manylinux.manylinux2014_compatible)
  202:     return True
  224:     :returns: An iterator of compatible manylinux tags.
  227:         return

PythonVenv\Lib\site-packages\wheel\vendored\packaging\_musllinux.py:
  24:         return None
  27:         return None
  28:     return _MuslVersion(major=int(m.group(1)), minor=int(m.group(2)))
  47:         return None
  49:         return None
  51:     return _parse_musl_version(proc.stderr)
  63:     :returns: An iterator of compatible musllinux tags.
  67:         return

PythonVenv\Lib\site-packages\wheel\vendored\packaging\_parser.py:
   18:         return self.value
   21:         return f"<{self.__class__.__name__}('{self}')>"
   29:         return str(self)
   34:         return f'"{self}"'
   39:         return str(self)
   64:     return _parse_requirement(Tokenizer(source, rules=DEFAULT_RULES))
   85:     return ParsedRequirement(name, url, extras, specifier, marker)
  107:             return (url, specifier, marker)
  113:             return (url, specifier, marker)
  124:             return (url, specifier, marker)
  136:     return (url, specifier, marker)
  156:     return marker
  164:         return []
  175:     return extras
  185:         return extras
  202:     return extras
  219:     return parsed_specifiers
  248:     return parsed_specifiers
  255:     return _parse_full_marker(Tokenizer(source, rules=DEFAULT_RULES))
  261:     return retval
  273:     return expression
  295:     return marker
  309:     return (marker_var_left, marker_op, marker_var_right)
  317:         return process_env_var(tokenizer.read().text.replace(".", "_"))
  319:         return process_python_str(tokenizer.read().text)
  328:         return Variable("platform_python_implementation")
  330:         return Variable(env_var)
  335:     return Value(str(value))
  344:         return Op("in")
  349:         return Op("not in")
  351:         return Op(tokenizer.read().text)
  353:         return tokenizer.raise_syntax_error(

PythonVenv\Lib\site-packages\wheel\vendored\packaging\_structures.py:
   8:         return "Infinity"
  11:         return hash(repr(self))
  14:         return False
  17:         return False
  20:         return isinstance(other, self.__class__)
  23:         return True
  26:         return True
  29:         return NegativeInfinity
  37:         return "-Infinity"
  40:         return hash(repr(self))
  43:         return True
  46:         return True
  49:         return isinstance(other, self.__class__)
  52:         return False
  55:         return False
  58:         return Infinity

PythonVenv\Lib\site-packages\wheel\vendored\packaging\_tokenizer.py:
    4: from typing import Dict, Iterator, NoReturn, Optional, Tuple, Union
   34:         return "\n    ".join([self.message, self.source, marker])
  129:             return False
  132:         return True
  141:         return self.read()
  144:         """Consume the next token and return it."""
  151:         return token
  159:     ) -> NoReturn:
  184:             return

PythonVenv\Lib\site-packages\wheel\vendored\packaging\markers.py:
   68:     return results
   85:         return _format_marker(marker[0])
   90:             return " ".join(inner)
   92:             return "(" + " ".join(inner) + ")"
   94:         return " ".join([m.serialize() for m in marker])
   96:         return marker
  117:         return spec.contains(lhs, prereleases=True)
  123:     return oper(lhs, rhs)
  132:         return tuple(canonicalize_name(v) for v in values)
  135:     return values
  165:     return any(all(item) for item in groups)
  173:     return version
  179:     return {
  221:         return _format_marker(self._markers)
  224:         return f"<Marker('{self}')>"
  227:         return hash((self.__class__.__name__, str(self)))
  231:             return NotImplemented
  233:         return str(self) == str(other)
  238:         Return the boolean from evaluating the given marker against the
  253:         return _evaluate_markers(self._markers, current_environment)

PythonVenv\Lib\site-packages\wheel\vendored\packaging\requirements.py:
  67:         return "".join(self._iter_parts(self.name))
  70:         return f"<Requirement('{self}')>"
  73:         return hash(
  82:             return NotImplemented
  84:         return (

PythonVenv\Lib\site-packages\wheel\vendored\packaging\specifiers.py:
    27:     return version
    46:         Returns the str representation of this Specifier-like object. This
    53:         Returns a hash value for this Specifier-like object.
    59:         Returns a boolean representing whether or not the two Specifier-like
   251:             return self._prereleases
   266:                 return True
   268:         return False
   281:         return self._spec[0]
   290:         return self._spec[1]
   308:         return f"<{self.__class__.__name__}({str(self)!r}{pre})>"
   318:         return "{}{}".format(*self._spec)
   326:         return self._spec[0], canonical_version
   329:         return hash(self._canonical_spec)
   354:                 return NotImplemented
   356:             return NotImplemented
   358:         return self._canonical_spec == other._canonical_spec
   364:         return operator_callable
   382:         return self._get_operator(">=")(prospective, spec) and self._get_operator("==")(
   413:             return shortened_prospective == split_spec
   424:             return prospective == spec_version
   427:         return not self._compare_equal(prospective, spec)
   433:         return Version(prospective.public) <= Version(spec)
   439:         return Version(prospective.public) >= Version(spec)
   447:         # version. If it's not we can short circuit and just return False now
   450:             return False
   458:                 return False
   463:         return True
   471:         # version. If it's not we can short circuit and just return False now
   474:             return False
   482:                 return False
   488:                 return False
   493:         return True
   496:         return str(prospective).lower() == str(spec).lower()
   499:         """Return whether or not the item is contained in this specifier.
   517:         return self.contains(item)
   522:         """Return whether or not the item is contained in this specifier.
   558:             return False
   563:         return operator_callable(normalized_item, self.version)
   574:             Whether or not to allow prereleases in the returned iterator. If set to
   649:     return result
   660:     return f"{epoch}!{'.'.join(rest)}"
   664:     return not any(
   684:     return (
   731:             return self._prereleases
   734:         # then we'll just return None since we don't know if this should have
   737:             return None
   740:         # prereleases, if any of them do we'll return True, otherwise False.
   741:         return any(s.prereleases for s in self._specs)
   766:         return f"<SpecifierSet({str(self)!r}{pre})>"
   779:         return ",".join(sorted(str(s) for s in self._specs))
   782:         return hash(self._specs)
   785:         """Return a SpecifierSet which is a combination of the two sets.
   797:             return NotImplemented
   814:         return specifier
   838:             return NotImplemented
   840:         return self._specs == other._specs
   843:         """Returns the number of specifiers in this specifier set."""
   844:         return len(self._specs)
   848:         Returns an iterator over all the underlying :class:`Specifier` instances
   854:         return iter(self._specs)
   857:         """Return whether or not the item is contained in this specifier.
   875:         return self.contains(item)
   883:         """Return whether or not the item is contained in this SpecifierSet.
   923:             return False
   931:         #       will always return True, this is an explicit design decision.
   932:         return all(s.contains(item, prereleases=prereleases) for s in self._specs)
   943:             Whether or not to allow prereleases in the returned iterator. If set to
   987:             return iter(iterable)
  1009:                 return iter(found_prereleases)
  1011:             return iter(filtered)

PythonVenv\Lib\site-packages\wheel\vendored\packaging\tags.py:
   68:         return self._interpreter
   72:         return self._abi
   76:         return self._platform
   80:             return NotImplemented
   82:         return (
   90:         return self._hash
   93:         return f"{self._interpreter}-{self._abi}-{self._platform}"
   96:         return f"<{self} @ {id(self)}>"
  103:     Returning a set is required due to the possibility that the tag is a
  112:     return frozenset(tags)
  121:     return value
  125:     return string.replace(".", "_").replace("-", "_").replace(" ", "_")
  135:         return False
  139:         return False
  141:     return "t" in abiflags
  151:     return len(python_version) > 1 and tuple(python_version) >= (3, 2) and not threading
  184:     return abis
  249:     Return the ABI tag based on EXT_SUFFIX.
  268:         return _cpython_abis(sys.version_info[:2])
  284:         return []
  285:     return [_normalize_string(abi)]
  361:         return arch
  364:         return "ppc"
  366:     return "i386"
  373:             return []
  378:             return []
  384:             return []
  389:             return []
  398:     return formats
  492:         # we should never be here, just yield the sysconfig one and return
  494:         return
  517:         return mac_platforms()
  519:         return _linux_platforms()
  521:         return _generic_platforms()
  526:     Returns the name of the running interpreter.
  529:     be returned when appropriate.
  532:     return INTERPRETER_SHORT_NAMES.get(name) or name
  537:     Returns the version of the running interpreter.
  544:     return version
  548:     return "".join(map(str, version))
  553:     Returns the sequence of tag triples for the running interpreter.

PythonVenv\Lib\site-packages\wheel\vendored\packaging\utils.py:
   48:     return cast(NormalizedName, value)
   52:     return _normalized_regex.match(name) is not None
   67:             return version
  100:     return "".join(parts)
  143:     return (name, version, build, tags)
  172:     return (name, version)

PythonVenv\Lib\site-packages\wheel\vendored\packaging\version.py:
   54:     return Version(version)
   71:         return hash(self._key)
   78:             return NotImplemented
   80:         return self._key < other._key
   84:             return NotImplemented
   86:         return self._key <= other._key
   90:             return NotImplemented
   92:         return self._key == other._key
   96:             return NotImplemented
   98:         return self._key >= other._key
  102:             return NotImplemented
  104:         return self._key > other._key
  108:             return NotImplemented
  110:         return self._key != other._key
  230:         return f"<Version('{self}')>"
  263:         return "".join(parts)
  274:         return self._version.epoch
  290:         return self._version.release
  305:         return self._version.pre
  316:         return self._version.post[1] if self._version.post else None
  327:         return self._version.dev[1] if self._version.dev else None
  339:             return ".".join(str(x) for x in self._version.local)
  341:             return None
  354:         return str(self).split("+", 1)[0]
  379:         return "".join(parts)
  396:         return self.dev is not None or self.pre is not None
  407:         return self.post is not None
  418:         return self.dev is not None
  427:         return self.release[0] if len(self.release) >= 1 else 0
  438:         return self.release[1] if len(self.release) >= 2 else 0
  449:         return self.release[2] if len(self.release) >= 3 else 0
  476:         return letter, int(number)
  482:         return letter, int(number)
  484:     return None
  495:         return tuple(
  499:     return None
  561:     return epoch, _release, _pre, _post, _dev, _local

PythonVenv\Lib\site-packages\whoosh\__init__.py:
  32:     """Returns the version number of Whoosh as a string.
  49:     return s

PythonVenv\Lib\site-packages\whoosh\classify.py:
   62:         return (maxweight * log((1.0 + f) / f) + log(1.0 + f)) / log(2.0)
   66:         return weight_in_top * log((1.0 + f) / f, 2) + log(1.0 + f, 2)
   72:         return maxweight * log((1.0 + f) / f, 2) + log(1.0 + f, 2)
   76:         return weight_in_top * log((1.0 + f) / f, 2) + log(1.0 + f, 2)
   81:         return (maxweight * log(self.collection_total / top_total) / log(2.0)
   89:             return 0
   91:             return wit_over_tt * log(wit_over_tt
  129:             returned by Reader.vector_as("weight", docnum, fieldname).
  163:         """Returns the N most important terms in the vectors added so far.
  165:         :param number: The number of terms to return.
  167:         :returns: A list of ("term", weight) tuples.
  177:         # If no terms have been added, return an empty list
  179:             return []
  197:         return [(t, weight) for weight, t in tlist[:number]]
  207:     return iteritems(d)
  229:     return out
  235:         return 0
  245:         return x
  254:     return tot
  326:     return labels, c
  346:     return variance
  361:     return Variance
  377:     return clusters

PythonVenv\Lib\site-packages\whoosh\collectors.py:
    37:     Returns the top N matching results sorted by score, using block-quality
    43:     Returns all matching results sorted by score. The
    49:     Returns all matching results sorted by a :class:`whoosh.sorting.Facet`
    97:     return total
   174:         """Returns True if the collector naturally computes the exact number of
   175:         matching documents. Collectors that use block optimizations will return
   178:         Note that if this method returns False you can still call :meth:`count`,
   183:         return True
   186:         """Returns a sequence of docnums matched in this collector. (Only valid
   193:         return self.docset
   196:         """Returns the total number of documents matched in this collector.
   203:         return len(self.docset)
   220:         work of adding a matched document to the results, and it should return
   241:         """Returns a sorting key for the current match. This should return the
   242:         same value returned by :meth:`Collector.collect`, but without the side
   265:                 return
   282:             return self._step_through_matches()
   284:             return self.matcher.all_ids()
   305:         return r
   309:         """Returns a :class:`~whoosh.searching.Results` object containing the
   351:         return 0 - self.matcher.score()
   360:         # Concrete subclasses should override this method to return True if the
   363:         return False
   374:         return self._collect(global_docnum, score)
   417:             # Move to the next document. This method returns True if the
   424:     """A collector that only returns the top "N" scored results.
   429:         :param limit: the maximum number of results to return.
   440:         return (self.usequality
   445:         return not self._use_block_quality()
   452:         return self.top_searcher.docs_for_query(self.q)
   456:             return self.total
   458:             return ilen(self.all_ids())
   473:             return 0 - score
   480:             return 0 - score
   482:             return 0
   496:                 return
   507:         return self._results(items)
   511:     """A collector that returns **all** scored results.
   523:         return 0 - score
   530:         return self._results(self.items, docset=self.docset)
   536:     """A collector that returns results sorted by a given
   568:         return self.categorizer.key_for(self.matcher, sub_docnum)
   575:         return sortkey
   582:         return self._results(items, docset=self.docset)
   597:         return self._results(items, docset=self.docset)
   611:         return self.child.top_searcher
   615:         return self.child.context
   627:         return self.child.all_ids()
   630:         return self.child.count()
   637:         return self.child.sort_key(sub_docnum)
   640:         return self.child.collect(sub_docnum)
   643:         return self.child.remove(global_docnum)
   646:         return self.child.matches()
   652:         return self.child.results()
   726:             return child.count()
   728:             return ilen(self.all_ids())
   756:         return r
   840:         return sortkey
   845:         return r
   946:             return self.child.count() - self.collapsed_total
   948:             return ilen(self.all_ids())
  1001:         return r
  1165:         return r

PythonVenv\Lib\site-packages\whoosh\columns.py:
    33: column type for when the user specifies ``sortable=True`` (the object returned
    45: provides two important methods: ``writer()`` to return a ``ColumnWriter`` object
    46: and ``reader()`` to return a ``ColumnReader`` object.
    83:     return typecode
   108:     return arry
   123:     return arry
   139:         """Returns a :class:`ColumnWriter` object you can use to use to create
   146:         return self.Writer(dbfile)
   149:         """Returns a :class:`ColumnReader` object you can use to read a column
   159:         return self.Reader(dbfile, basepos, length, doccount)
   162:         """Returns the default value for this column type.
   165:         return self._default
   168:         """Returns True if the column stores a list of values for each document
   172:         return False
   202:         return self._doccount
   208:         return self[docnum]
   215:         return list(self)
   229:     The default value (the value returned for a document that didn't have a
   249:         return self.Writer(dbfile, self.allow_offsets,
   264:             return "<VarBytes.Writer>"
   313:             return "<VarBytes.Reader>"
   360:                 return emptybytes
   362:             return self._dbfile.get(self._basepos + offset, length)
   393:         return self.Writer(dbfile, self._fixedlen, self._default)
   396:         return self.Reader(dbfile, basepos, length, doccount, self._fixedlen,
   407:             return "<FixedBytes.Writer>"
   411:                 return
   429:             return "<FixedBytes.Reader>"
   433:                 return self._defaultbytes
   435:             return self._dbfile.get(pos, self._fixedlen)
   493:         return self.Writer(dbfile, self._fixedlen, self._default)
   496:         return self.Reader(dbfile, basepos, length, doccount, self._fixedlen)
   513:             return "<RefBytes.Writer>"
   595:             return "<RefBytes.Reader>"
   608:             return uniques
   613:             return self._uniques[ref]
   649:         return self.Writer(dbfile, self._typecode, self._default)
   652:         return self.Reader(dbfile, basepos, length, doccount, self._typecode,
   659:         return v
   671:             return "<Numeric.Writer>"
   675:                 return
   697:             return "<Numeric.Reader>"
   701:             return self._unpack(s)[0]
   707:             return key
   711:                 return list(self)
   713:                 return array(self._typecode, self)
   738:         return self.Writer(dbfile, self._compressat)
   741:         return self._default ^ reverse
   750:             return "<Bit.Writer>"
   786:             return self._bitset
   789:             return "<Bit.Reader>"
   792:             return i in self._bitset
   795:             return int(self[docnum] ^ self._reverse)
   814:             return self
   839:         return self.Writer(dbfile, self._level, self._module)
   842:         return self.Reader(dbfile, basepos, length, doccount, self._module)
   851:             return "<CompressedBytes.Writer>"
   864:             return "<CompressedBytes.Reader>"
   870:             return v
   877:             return list(self)
   901:         return self.Writer(dbfile, self._level, self._blocksize, self._module)
   904:         return self.Reader(dbfile, basepos, length, doccount, self._module)
   916:             return "<CompressedBlock.Writer>"
   964:             return "<CompressedBlock.Reader>"
   970:                     return None
   972:                     return i
   973:             return None
   988:             return values
   993:                 return emptybytes
   994:             return self._get_block(i)[docnum]
  1023:         return self.Writer(dbfile, self._spec, self._default)
  1026:         return self.Reader(dbfile, basepos, length, doccount, self._spec,
  1039:             return "<Struct.Writer>"
  1057:             return "<Struct.Reader>"
  1061:             return self._struct.unpack(v)
  1067:     """Acts like a reader for a column with no stored values. Always returns
  1073:         :param default: the value to return for all "get" requests.
  1081:         return self._default
  1084:         return (self._default for _ in xrange(self._doccount))
  1087:         return self
  1114:         return max(0, bisect_right(self._doc_offsets, docnum) - 1)
  1119:         return rnum, docnum - offset
  1123:         return self._readers[x][y]
  1133:     object before returning them.
  1136:     ``FieldType.from_column_value`` on the stored column value before returning
  1144:             reader and returns a translated value.
  1151:         """Returns the underlying column reader.
  1154:         return self._reader
  1157:         return len(self._reader)
  1160:         return self._translate(self._reader[docnum])
  1163:         return self._reader.sort_key(docnum)
  1167:         return (translate(v) for v in self._reader)
  1180:         return self.Writer(self._child.writer(*args, **kwargs))
  1183:         return self.Reader(self._child.reader(*args, **kwargs))
  1186:         return self._child.stores_lists()
  1194:         return self._child.fill(docnum)
  1197:         return self._child.add(docnum, value)
  1200:         return self._child.finish(docnum)
  1208:         return len(self._child)
  1211:         return self._child[docnum]
  1214:         return self._child.sort_key(docnum)
  1217:         return iter(self._child)
  1220:         return list(self)
  1232:         return self._child.reader(*args, **kwargs)
  1258:             return "<PickleWriter>"
  1269:             return "<PickleReader>"
  1274:                 return None
  1276:                 return loads(v)
  1290:         return True
  1295:         return self[docnum][0]
  1319:                 return []
  1327:             return out
  1336:         return self.Writer(self._child.writer(*args, **kwargs), self._fixedlen)
  1339:         return self.Reader(self._child.reader(*args, **kwargs), self._fixedlen)
  1365:                 return []
  1367:             return ls
  1385: #        return True
  1388: #        return self.Writer(dbfile, self._fixedlen)
  1391: #        return self.Reader(dbfile, basepos, length, doccount, self._fixedlen)
  1403: #            return "<RefList.Writer>"
  1462: #            return "<RefBytes.Reader>"
  1466: #            return self._unpack(self._dbfile.get(pos, self._itemsize))[0]
  1474: #            return [self._uniques[ref] for ref in reflist]

PythonVenv\Lib\site-packages\whoosh\compat.py:
   14:     return s
   20:         return s
   42:         return chr(num)
   45:         return unicode(s, "unicode_escape")
   50:         return _WhooshBase
   57:             return buffer(source, offset, length)
   59:             return buffer(source)
   66:         return s.encode("latin-1")
   90:         return bytes((num,))
   94:             return s.decode("ascii")
   95:         return s
  101:         return ns["_WhooshBase"]
  109:             return mv[offset:offset + length]
  111:             return mv
  122:         return arry.tobytes()
  125:         return arry.frombytes(bs)
  128:         return arry.tostring()
  131:         return arry.fromstring(bs)
  145:             return
  161:                 return
  196:             return getattr(obj, name)(*args, **kwargs)
  197:         return caller
  208:         return funcobj

PythonVenv\Lib\site-packages\whoosh\externalsort.py:
   58:         return merge(*iterables)
   82:                 return
  128:         return path, f
  131:         return open(path, "rb")
  142:             return
  203:         """Returns a sorted list or iterator of the items in the pool.
  213:             # and return that
  214:             return sorted(self.current)
  225:         return self._merge_runs(runs)
  240:     return p.items(maxfiles=maxfiles)

PythonVenv\Lib\site-packages\whoosh\fields.py:
   127:         return ("%s(format=%r, scorable=%s, stored=%s, unique=%s)"
   132:         return all((isinstance(other, FieldType),
   140:         return not(self.__eq__(other))
   145:         """Returns an iterator of (btext, frequency, weight, encoded_value)
   169:         Analyzes the given string and returns an iterator of Token objects
   176:         return self.analyzer(value, **kwargs)
   180:         Analyzes the given string and returns an iterator of token texts.
   189:         return (t.text for t in self.tokenize(qstring, mode=mode, **kwargs))
   195:         Returns a bytes representation of the given value, appropriate to be
   204:         return value
   208:         Returns an object suitable to be inserted into the document values
   213:         return self.to_bytes(value)
   216:         return utf8decode(bs)[0]
   219:         return self.from_bytes(value)
   234:         Returns an iterator of the "sortable" tokens in the given reader and
   236:         simply returns all tokens in the field.
   242:         return ixreader.lexicon(fieldname)
   245:         return columns.VarBytesColumn()
   251:         Subclasses should override this method to return True if they want
   258:         return False
   262:         When ``self_parsing()`` returns True, the query parser will call
   271:         When ``self_parsing()`` returns True, the query parser will call
   272:         this method to parse range query text. If this method returns None
   277:         return None
   283:         Returns True if the field stores unstemmed words in a separate field for
   287:         return False
   291:         Returns the name of a field to use for spelling suggestions instead of
   297:         return fieldname
   300:         """Returns an iterator of each unique word (in sorted order) in the
   316:         return iter(sorted(set(words)))
   322:         Returns an iterator of ``(name_prefix, fieldobject)`` pairs for the
   331:         Returns True if the underlying format supports the given posting
   341:         return self.format.supports(name)
   381:         return self.subfield.__eq__(other)
   384:         return self.subfield.__ne__(other)
   389:     #     return self.subfield.index(value, boost, **kwargs)
   392:     #     return self.subfield.tokenize(value, **kwargs)
   395:     #     return self.subfield.process_text(qstring, mode, **kwargs)
   400:         return self.subfield.to_bytes(value)
   403:         return self.subfield.to_column_value(value)
   406:         return self.subfield.from_bytes(bs)
   409:         return self.subfield.from_column_value(value)
   417:         return self.subfield.sortable_terms(ixreader, fieldname)
   420:         return self.subfield.default_column()
   425:         return self.subfield.self_parsing()
   428:         return self.subfield.parse_query(fieldname, qstring, boost)
   442:         return self.subfield.supports(name)
   625:         return d
   642:         return min_value, max_value
   645:         return columns.NumericColumn(self.sortable_typecode,
   652:             return False
   654:             return False
   656:         return True
   664:             return
   675:             return x
   693:         return x
   700:         return x
   706:         return to_sortable(self.numtype, self.bits, self.signed, x)
   710:         return self.unprepare_number(x)
   717:             return x
   720:             return self.sortable_to_bytes(0)
   724:         return self.sortable_to_bytes(x, shift)
   729:         return pack_byte(shift) + self._struct.pack(x)
   735:         return x
   738:         return (self.to_bytes(text),)
   741:         return True
   748:             return query.Every(fieldname, boost=boost)
   754:         return query.Term(fieldname, token, boost=boost)
   771:         return query.NumericRange(fieldname, start, end, startexcl, endexcl,
   823:             return datetime_to_long(x)
   825:             return x
   834:         return self.prepare_datetime(x)
   837:         return long_to_datetime(x)
   841:         return NUMERIC.to_bytes(self, x, shift=shift)
   845:         return long_to_datetime(x)
   873:         return at
   883:             return query.error_query(e)
   888:             return query.NumericRange(fieldname, startnum, endnum)
   890:             return query.Term(fieldname, at, boost=boost)
   897:             return query.Every(fieldname, boost=boost)
   907:         return query.NumericRange(fieldname, start, end, boost=boost)
   947:         return x
   951:             return x
   957:         return bs
   965:         return [(self.bytestrings[int(bit)], 1, 1.0, emptybytes)]
   968:         return True
   974:             return query.Every(fieldname, boost=boost)
   976:         return query.Term(fieldname, self._obj_to_bool(qstring), boost=boost)
  1008:         return v
  1011:         return b
  1142:         return self.spelling and self.analyzer.has_morph()
  1146:             return self.spelling_prefix + fieldname
  1148:             return fieldname
  1153:     This is a utility field type meant to be returned by ``TEXT.subfields()``
  1172:         return FieldType.index(self, value, boost=boost, **kwargs)
  1176:         return FieldType.tokenize(self, value, **kwargs)
  1180:         return FieldType.process_text(self, qstring, mode=mode, **kwargs)
  1222:         return True
  1231:         return cls(terms, boost=boost)
  1294:             return super_new(cls, name, bases, attrs)
  1309:         return new_class
  1312:         return Schema(**self._clsfields)
  1348:         Returns a shallow copy of the schema. The field instances are not
  1352:         return self.__class__(**self._fields)
  1355:         return (other.__class__ is self.__class__
  1359:         return not(self.__eq__(other))
  1362:         return "<%s: %r>" % (self.__class__.__name__, self.names())
  1366:         Returns the field objects in this schema.
  1369:         return iter(self._fields.values())
  1373:         Returns the field associated with the given field name.
  1376:         # If the name is in the dictionary, just return it
  1378:             return self._fields[name]
  1383:                 return fieldtype
  1389:         Returns the number of fields in this schema.
  1392:         return len(self._fields)
  1396:         Returns True if a field by the given name is in this schema.
  1403:             return field is not None
  1405:             return False
  1413:         return self[fieldname].to_bytes(value)
  1417:         Returns a list of ("fieldname", field_object) pairs for the fields
  1421:         return sorted(self._fields.items())
  1425:         Returns a list of the names of the fields in this schema.
  1440:         return sorted(fieldnames)
  1520:         return any(ftype.scorable for ftype in self)
  1524:         Returns a list of the names of fields that are stored.
  1527:         return [name for name, field in self.items() if field.stored]
  1531:         Returns a list of the names of fields that store field
  1535:         return [name for name, field in self.items() if field.scorable]
  1578:         return obj
  1586:     return schema
  1599:     return out
  1606:     return schema
  1613:     return schema

PythonVenv\Lib\site-packages\whoosh\formats.py:
   66:         return (other
   71:         return "%s(boost=%s)" % (self.__class__.__name__, self.field_boost)
   75:             return None
   76:         return self.posting_size
   95:         """Returns True if this format supports interpreting its posting
   98:         return hasattr(self, "decode_" + name)
  101:         """Returns the bound method for interpreting value as 'name',
  105:         return getattr(self, "decode_" + name)
  112:         return self.decoder(astype)(valuestring)
  126:     return unstopped(gen)
  147:         return ((w, 1, fb, emptybytes) for w in wordset)
  150:         return emptybytes
  153:         return 1
  156:         return self.field_boost
  159:         return emptybytes
  196:         return wvs
  199:         return unpack_uint(valuestring)[0]
  203:         return freq * self.field_boost
  206:         return pack_uint(sum(self.decode_value(v) for v in vs))
  237:         return pack_uint(len(deltas)) + dumps(deltas, 2)
  248:         return positions
  251:         return unpack_uint(valuestring[:_INT_SIZE])[0]
  254:         return self.decode_frequency(valuestring) * self.field_boost
  257:         return [(pos, 1) for pos in self.decode_positions(valuestring)]
  263:         return self.encode(sorted(s))
  299:         return pack_uint(len(deltas)) + dumps(deltas, 2)
  313:         return posns_chars
  324:         return posns
  336:         return self.encode(poses)
  369:         return (pack_uint(len(poses)) + pack_float(summedboost)
  381:         return posns_boosts
  392:         return posns
  396:         return summedboost * self.field_boost
  403:         return self.encode(sorted(s.items()))
  441:         return ((pack_uint(len(poses)) + pack_float(summedboost * fb)
  456:         return posn_char_boosts
  459:         return [item[0] for item in self.decode_character_boosts(valuestring)]
  462:         return [(pos, startchar, endchar) for pos, startchar, endchar, _
  466:         return [(pos, boost) for pos, _, _, boost
  481:         return self.encode(poses)[0]  # encode() returns value, summedboost

PythonVenv\Lib\site-packages\whoosh\highlight.py:
   68:     """Returns a :class:`Fragment` object based on the :class:`analysis.Token`
   80:     return Fragment(text, tokens, startchar, endchar)
  134:         return "<Fragment %d:%d %d>" % (self.startchar, self.endchar,
  138:         return self.endchar - self.startchar
  145:         return (sc < fsc < ec) or (sc < fec < ec)
  152:         return max(ec, fec) - min(sc, fsc)
  155:         return id(self) < id(other)
  170:         """Returns True if this fragmenter requires retokenized text.
  172:         If this method returns True, the fragmenter's ``fragment_tokens``
  177:         If this method returns False, the fragmenter's ``fragment_matches``
  181:         return True
  206:     """Doesn't fragment the token stream. This object just returns the entire
  211:     return no fragment if no terms matched in the given field. To return the
  240:         return [Fragment(text, matches)]
  434:         return False
  438:         return self.fragment_matches(text, matched)
  511:         return score
  518:     return 1
  523:     return fragment.startchar
  528:     return 0 - len(fragment)
  533:     return len(fragment)
  542:     If ``replace`` is False, returns the part of ``original`` between
  543:     ``token.startchar`` and ``token.endchar``. If ``replace`` is True, returns
  548:         return token.text
  550:         return original[token.startchar:token.endchar]
  556:     For highlighters that return strings, it is usually only necessary to
  564:                 return "[%s]" % ttext
  570:         return text
  573:         """Returns a formatted version of the given "token" object, which
  588:         """Returns a formatted version of the given text, using the "token"
  614:         return out_string
  617:         """Returns a formatted version of the given text, using a list of
  623:         return self.between.join(formatted)
  627:         return self.format(fragments)
  635:         return get_text(text, token, replace)
  639:     """Returns a string in which the matched terms are in UPPERCASE.
  651:         return ttxt.upper()
  655:     """Returns a string containing HTML formatting around the matched terms.
  704:         return htmlescape(text, quote=False)
  715:         return self.template % {"tag": self.tagname, "q": self.attrquote,
  726:     """Returns a Genshi event stream containing HTML formatting around the
  753:         return self.Stream([(self.START, (qn, self.Attrs()), (None, -1, -1)),
  769:         return self.Stream(output)
  779:         return self.Stream(output)
  789:     return best_fragments
  813:     return formatter(text, fragments)
  832:             return False
  835:             return False
  838:             return False
  842:         return field.supports("characters")
  954:         return output

PythonVenv\Lib\site-packages\whoosh\idsets.py:
   40:                 return False
   41:         return True
   44:         return not self.__eq__(other)
   56:         return self.union(other)
   59:         return self.intersection(other)
   62:         return self.difference(other)
  101:         return c
  106:         return c
  111:         return c
  116:         return c
  125:                 return False
  126:         return True
  129:         """Returns the previous integer in the set before ``i``, or None.
  134:         """Returns the next integer in the set after ``i``, or None.
  139:         """Returns the first (lowest) integer in the set.
  144:         """Returns the last (highest) integer in the set.
  164:         return sum(_1SPERBYTE[b] for b in self._iter_bytes())
  175:         return any(n for n in self._iter_bytes())
  182:             return False
  183:         return bool(self._get_byte(bucket) & (1 << (i & 7)))
  186:         return self.after(-1)
  189:         return self.before(self.byte_count() * 8 + 1)
  196:             return None
  210:                 return i
  215:         return None
  222:             return None
  236:                 return i
  241:         return None
  272:         return "%s(%s, %d, %d)" % (self.__class__.__name__, self.dbfile,
  276:         return self._bytecount
  279:         return self._dbfile.get_byte(self._basepos + n)
  314:         return "%s(%r)" % (self.__class__.__name__, list(self))
  317:         return len(self.bits)
  320:         return self.bits[n]
  323:         return iter(self.bits)
  358:         return obj
  362:         return len(self.bits)
  368:         return b
  372:         return cls.from_bytes(dbfile.read_array("B", bytecount))
  377:         return b
  405:             return self._logic(self, operator.__and__, other)
  413:             return self._logic(self, lambda x, y: x & ~y, other)
  426:             return self._logic(self.copy(), operator.__or__, other)
  429:         return b
  433:             return self._logic(self.copy(), operator.__and__, other)
  434:         return BitSet(source=(n for n in self if n in other))
  438:             return self._logic(self.copy(), lambda x, y: x & ~y, other)
  439:         return BitSet(source=(n for n in self if n not in other))
  456:         return sis
  459:         return len(self.data) * self.data.itemsize
  462:         return "%s(%r)" % (self.__class__.__name__, self.data)
  465:         return len(self.data)
  468:         return iter(self.data)
  471:         return bool(self.data)
  478:             return False
  482:             return False
  483:         return data[pos] == i
  493:                 return
  520:         return SortedIntSet((num for num in self if num in other))
  523:         return SortedIntSet((num for num in self if num not in other))
  526:         return self.data[0]
  529:         return self.data[-1]
  535:             return None
  537:             return data[pos - 1]
  542:             return None
  544:             return data[0]
  547:         return data[pos]
  566:         return self.limit - len(self.idset)
  569:         return i not in self.idset
  595:             return i
  601:             return maxid
  605:                 return i
  626:             return 0
  628:         return sum(len(idset) for idset in self.idsets)
  633:             return False
  634:         return (n - (bucket << 16)) in self.idsets[bucket]
  649:         return bucket, floor, idset
  684:         return max(bisect_left(offsets, n), len(self.offsets) - 1)
  689:         return self.idsets[setnum], n - offset
  692:         return sum(len(idset) for idset in self.idsets)
  701:         return n in idset

PythonVenv\Lib\site-packages\whoosh\index.py:
   94:     :returns: :class:`Index`
  102:     return FileIndex.create(storage, schema, indexname)
  123:     return FileIndex(storage, schema=schema, indexname=indexname)
  127:     """Returns True if dirname contains a Whoosh index.
  137:             return ix.latest_generation() > -1
  141:     return False
  152:     return storage.index_exists(indexname)
  156:     """Returns a tuple of (release_version, format_version), where
  173:     :returns: ((major_ver, minor_ver, build_ver), format_ver)
  178:     return version(storage, indexname=indexname)
  182:     """Returns a tuple of (release_version, format_version), where
  199:     :returns: ((major_ver, minor_ver, build_ver), format_ver)
  207:         return (ix.release, ix.version)
  210:         return (None, e.version)
  250:         """Returns the generation number of the latest generation of this
  253:         return -1
  256:         """Returns a new Index object representing the latest generation
  258:         doesn't support versioning, returns self).
  260:         :returns: :class:`Index`
  262:         return self
  265:         """Returns True if this object represents the latest generation of
  266:         this index. Returns False if this object is not the latest generation
  270:         return True
  273:         """Returns the last modified time of the index, or -1 if the backend
  276:         return -1
  279:         """Returns True if this index is empty (that is, it has never had any
  290:         """Returns the total number of documents, DELETED OR UNDELETED,
  296:             return r.doc_count_all()
  301:         """Returns the total number of UNDELETED documents in this index.
  306:             return r.doc_count()
  311:         """Returns a Searcher object for this index. Keyword arguments are
  318:         return Searcher(self.reader(), fromindex=self, **kwargs)
  321:         """Returns the total length of the field across all documents.
  326:             return r.field_length(fieldname)
  331:         """Returns the maximum length of the field across all documents.
  336:             return r.max_field_length(fieldname)
  341:         """Returns an IndexReader object for this index.
  353:         """Returns an IndexWriter object for this index.
  426:         return cls(storage, schema, indexname)
  429:         return "%s(%r, %r)" % (self.__class__.__name__,
  439:         return TOC._latest_generation(self.storage, self.indexname)
  447:         return self.storage.file_modified(filename)
  450:         return len(self._read_toc().segments) == 0
  461:             return MpWriter(self, procs=procs, **kwargs)
  464:             return SegmentWriter(self, **kwargs)
  467:         """Returns a lock object that you can try to call acquire() on to
  471:         return self.storage.lock(self.indexname + "_" + name)
  474:         return TOC.read(self.storage, self.indexname, schema=self._schema)
  477:         return self._read_toc().segments
  480:         return self._read_toc().schema
  484:         return self._current_schema()
  488:         return self._read_toc().release
  492:         return self._read_toc().version
  496:         # Returns a reader for the given segments, possibly reusing already
  503:                 # This index has no segments! Return an EmptyReader object,
  504:                 # which simply returns empty or zero to every method
  505:                 return EmptyReader(schema)
  521:                     return r
  523:                     return SegmentReader(storage, schema, segment,
  527:                 # This index has one segment, so return a SegmentReader object
  529:                 return segreader(segments[0])
  536:                 return MultiReader(readers, generation=generation)
  547:                 return self._reader(self.storage, info.schema, info.segments,
  578:         return "_%s_%s.toc" % (indexname, gen)
  582:         return re.compile("^_%s_([0-9]+).toc$" % indexname)
  586:         return re.compile("(%s_[0-9a-z]+)[.][A-Za-z0-9_.]+" % indexname)
  597:         return mx
  667:         return cls(schema, segments, gen, version=version, release=release)

PythonVenv\Lib\site-packages\whoosh\legacy.py:
  69:     return schema, segments

PythonVenv\Lib\site-packages\whoosh\multiproc.py:
   56:     return runname, fieldnames, segment
  121:                 # Actually finish the segment and return it with no run
  127:                 # segment, and return the run name and the segment
  193:         return task
  241:         # If offset is 0, just return the items unchanged
  243:             return gen
  246:             return ((fname, text, docnum + offset, weight, value)

PythonVenv\Lib\site-packages\whoosh\reading.py:
    61:     """Represents a set of statistics about a term. This object is returned by
    92:         """Returns the total frequency of the term across all documents.
    95:         return self._weight
    98:         """Returns the number of documents the term appears in.
   101:         return self._df
   104:         """Returns the length of the shortest field value the term appears
   108:         return self._minlength
   111:         """Returns the length of the longest field value the term appears
   115:         return self._maxlength
   118:         """Returns the number of times the term appears in the document in
   122:         return self._maxweight
   125:         """Returns the lowest document ID this term appears in.
   128:         return self._minid
   131:         """Returns the highest document ID this term appears in.
   134:         return self._maxid
   144:         return self
   151:         """Returns True if the given term tuple (fieldname, text) is
   157:         """Returns the :class:`whoosh.codec.base.Codec` object used to read
   159:         (``reader.is_atomic() == True``), returns None.
   162:         return None
   165:         """Returns the :class:`whoosh.index.Segment` object used by this reader.
   166:         If this reader is not atomic (``reader.is_atomic() == True``), returns
   170:         return None
   173:         """Returns the :class:`whoosh.filedb.filestore.Storage` object used by
   175:         (``reader.is_atomic() == True``), returns None.
   178:         return None
   181:         return True
   186:         return self.schema[fieldname].to_bytes(text)
   195:         """Returns the generation of the index being read, or -1 if the backend
   199:         return None
   203:         """Returns an iterable of strings representing the names of the indexed
   230:         """Returns a :class:`TermInfo` object allowing access to various
   243:                 return
   252:                 return
   290:                 return
   301:                 return
   306:         """Returns True if the underlying index/segment has deleted
   313:         """Returns an iterator of all (undeleted) document IDs in the reader.
   317:         return (docnum for docnum in xrange(self.doc_count_all())
   330:         """Returns True if the given document number is marked deleted.
   337:         """Returns the stored fields for the given document number.
   356:         """Returns the total number of documents, DELETED OR UNDELETED,
   364:         """Returns the total number of UNDELETED documents in this reader.
   367:         return self.doc_count_all() - self.deleted_count()
   371:         """Returns the total number of instances of the given term in the
   378:         """Returns how many documents the given term appears in.
   384:         """Returns the total number of terms in the given field. This is used
   391:         """Returns the minimum length of the field across all documents. This
   398:         """Returns the minimum length of the field across all documents. This
   405:         """Returns the number of terms in the given field in the given
   411:         """Returns the first ID in the posting list for the given term. This
   418:             return p.id()
   434:         """Returns a :class:`~whoosh.matching.Matcher` for the postings of the
   451:         """Returns True if the given document has a term vector for the given
   458:         """Returns a :class:`~whoosh.matching.Matcher` object for the
   475:         """Returns an iterator of (termtext, value) pairs for the terms in the
   505:         """Returns a :class:`whoosh.spelling.Corrector` object that suggests
   512:         return ReaderCorrector(self, fieldname, fieldobj)
   516:         Returns a generator of words in the given field within ``maxdist``
   519:         Important: the terms are returned in **no particular order**. The only
   544:         """Returns the top 'number' most frequent terms in the given field as a
   550:         return nlargest(number, gen)
   553:         """Returns the top 'number' terms with the highest `tf*idf` scores as
   560:         return nlargest(number, gen)
   563:         """Returns a list of (IndexReader, docbase) pairs for the child readers
   565:         reader, it returns `[(self, 0)]`.
   568:         return [(self, 0)]
   571:         return False
   574:         return False
   583:         :param reverse: if passed, reverses the order of keys returned by the
   587:             ``from_bytes()`` method on the returned values.
   588:         :return: a :class:`whoosh.columns.ColumnReader` object.
   624:         return self._codec
   627:         return self._segment
   630:         return self._storage
   635:         return self._perdoc.has_deletions()
   640:         return self._perdoc.doc_count()
   645:         return self._perdoc.doc_count_all()
   650:         return self._perdoc.is_deleted(docnum)
   653:         return self._gen
   656:         return "%s(%r, %r)" % (self.__class__.__name__, self._storage,
   664:             return False
   666:         return (fieldname, text) in self._terms
   688:         return dict(item for item in iteritems(sfs) if item[0] in schema)
   695:         return self._perdoc.all_doc_ids()
   700:         return self._perdoc.iter_docs()
   705:         return self._perdoc.all_stored_fields()
   710:         return self._perdoc.field_length(fieldname)
   715:         return self._perdoc.min_field_length(fieldname)
   720:         return self._perdoc.max_field_length(fieldname)
   725:         return self._perdoc.doc_field_length(docnum, fieldname, default)
   730:         return self._perdoc.has_vector(docnum, fieldname)
   743:         return self._terms.indexed_field_names()
   749:         return ((fieldname, text) for fieldname, text in self._terms.terms()
   756:         return ((fname, text) for fname, text
   764:             return self._terms.term_info(fieldname, text)
   771:         return IndexReader.expand_prefix(self, fieldname, prefix)
   775:         return IndexReader.lexicon(self, fieldname)
   781:         return ((term, terminfo) for term, terminfo in self._terms.items()
   797:             return self._terms.frequency(fieldname, text)
   799:             return 0
   805:             return self._terms.doc_frequency(fieldname, text)
   807:             return 0
   822:         return matcher
   832:         return self._perdoc.vector(docnum, fieldname, vformat)
   838:         return self._terms.cursor(fieldname, fieldobj)
   848:         return auto.terms_within(fieldcur, text, maxdist, prefix)
   856:         return coltype and self._perdoc.has_column(fieldname)
   875:             # a fake column reader that always returns the default value.
   885:         return creader
   895:         return False
   898:         return iter([])
   903:         return EmptyCursor()
   906:         return []
   909:         return iter([])
   915:         return iter([])
   918:         return iter([])
   921:         return iter([])
   924:         return iter([])
   927:         return False
   930:         return False
   936:         return iter([])
   939:         return 0
   942:         return 0
   945:         return 0
   948:         return 0
   951:         return 0
   954:         return 0
   957:         return 0
   960:         return default
   966:         return False
   972:         return iter([])
   975:         return iter([])
  1000:         return max(0, bisect_right(self.doc_offsets, docnum) - 1)
  1005:         return segmentnum, docnum - offset
  1008:         return MultiCursor([r.cursor(fieldname) for r in self.readers])
  1011:         return False
  1014:         return zip_(self.readers, self.doc_offsets)
  1027:         return self._gen
  1033:                 return fmt
  1039:                 return vfmt
  1044:         return any(r.__contains__(term) for r in self.readers)
  1066:         # If only one iterator is active, just yield from it and return
  1073:             return
  1098:         return iter(names)
  1101:         return self._merge_terms([r.all_terms() for r in self.readers])
  1104:         return self._merge_terms([r.terms_from(fieldname, prefix)
  1114:         # If only one reader had the term, return its terminfo with the offset
  1119:         return combine_terminfos(tis)
  1122:         return sum(r.frequency(fieldname, text) for r in self.readers)
  1125:         return sum(r.doc_frequency(fieldname, text) for r in self.readers)
  1144:         return MultiMatcher(postreaders, docoffsets)
  1156:                     return self.doc_offsets[i] + id
  1163:         return any(r.has_deletions() for r in self.readers)
  1167:         return self.readers[segmentnum].is_deleted(segmentdoc)
  1171:         return self.readers[segmentnum].stored_fields(segmentdoc)
  1176:         return any(r.has_column(fieldname) for r in self.readers)
  1188:         return columns.MultiColumnReader(crs, doc_offsets)
  1198:         return sum(dr.doc_count_all() for dr in self.readers)
  1201:         return sum(dr.doc_count() for dr in self.readers)
  1204:         return sum(dr.field_length(fieldname) for dr in self.readers)
  1207:         return min(r.min_field_length(fieldname) for r in self.readers)
  1210:         return max(r.max_field_length(fieldname) for r in self.readers)
  1215:         return reader.doc_field_length(segmentdoc, fieldname, default=default)
  1219:         return self.readers[segmentnum].has_vector(segmentdoc, fieldname)
  1223:         return self.readers[segmentnum].vector(segmentdoc, fieldname)
  1227:         return self.readers[segmentnum].vector_as(astype, segmentdoc,
  1236:         return ti
  1249:     return TermInfo(w, df, ml, xl, xw, mid, xid)
  1274:         return lowterm
  1279:         return self._find_low()
  1284:         return self._find_low()
  1289:         return self._find_low()
  1293:         return combine_terminfos(tis) if tis else None
  1296:         return any(c.is_valid() for c in self._cursors)

PythonVenv\Lib\site-packages\whoosh\scoring.py:
   42:     a method, ``scorer``, which returns an instance of
   54:         """Returns the inverse document frequency of the given term.
   60:         return log(dc / (n + 1)) + 1
   63:         """Returns an instance of :class:`whoosh.scoring.Scorer` configured
   70:         """Returns a final score for each document. You can use this method
   85:         return score
  101:         """Returns True if this class supports quality optimizations.
  104:         return False
  107:         """Returns a score for the current document of the matcher.
  113:         """Returns the *maximum limit* on the possible score the matcher can
  122:         """Returns the *maximum limit* on the possible score the matcher can
  136: # Scorer that just returns term weight
  139:     """A scorer that simply returns the weight as the score. This is useful
  140:     for more complex weighting models to return when they are asked for a
  148:         return True
  151:         return matcher.weight()
  154:         return self._maxweight
  157:         return matcher.block_max_weight()
  162:         return cls(ti.max_weight())
  171:     Subclasses should override the ``_score(weight, length)`` method to return
  196:                     return (weight / (length + 1)) * self.parm
  201:             return WeightScorer(ti.max_weight())
  207:         return True
  210:         return self._score(matcher.weight(), self.dfl(matcher.id()))
  213:         return self._maxquality
  216:         return self._score(matcher.block_max_weight(),
  233:         return DebugScorer(searcher, fieldname, text, self.log)
  247:         return True
  255:         return w
  258:         return self._maxweight
  261:         return matcher.block_max_weight()
  273:     return idf * ((tf * (K1 + 1)) / (tf + K1 * ((1 - B) + B * fl / avgfl)))
  303:         return True
  307:             return WeightScorer.for_(searcher, fieldname, text)
  314:         return BM25FScorer(searcher, fieldname, text, B, self.K1, qf=qf)
  321:         parent = searcher.get_parent()  # Returns self if no parent
  332:         return s
  348:     return qf * norm * (tf * (log(prior * invpriorcol))
  360:         return True
  364:             return WeightScorer.for_(searcher, fieldname, text)
  366:         return DFreeScorer(searcher, fieldname, text, qf=qf)
  373:         parent = searcher.get_parent()  # Returns self if no parent
  381:         return dfree(weight, self.cf, self.qf, length, self.fl)
  401:     return norm * qf * (TF * log(1.0 / f)
  418:             return WeightScorer.for_(searcher, fieldname, text)
  420:         return PL2Scorer(searcher, fieldname, text, self.c, qf=qf)
  427:         parent = searcher.get_parent()  # Returns self if no parent
  437:         return pl2(weight, self.cf, self.qf, self.dc, length, self.avgfl,
  446:         return WeightScorer(maxweight)
  452:         parent = searcher.get_parent()  # Returns self if no parent
  456:         return TF_IDFScorer(maxweight, idf)
  465:         return True
  468:         return matcher.weight() * self.idf
  471:         return self._maxquality
  474:         return matcher.block_max_weight() * self.idf
  486:         return self.CompatibilityScorer(searcher, fieldname, text, self.score)
  499:             return self.scoremethod(self.searcher, self.fieldname, self.text,
  516:             return 1.0 / (poses[0] + 1)
  533:         return self.FunctionScorer(self.fn, searcher, fieldname, text, qf=qf)
  544:             return self.fn(self.searcher, self.fieldname, self.text, matcher)
  571:         return w.scorer(searcher, fieldname, text, qf=qf)
  584:         return ReverseWeighting.ReverseScorer(subscorer)
  591:             return self.subscorer.supports_block_quality()
  594:             return 0 - self.subscorer.score(matcher)
  597:             return 0 - self.subscorer.max_quality()
  600:             return 0 - self.subscorer.block_quality(matcher)
  608: #        return PositionWeighting.PositionScorer()
  614: #                return p
  616: #                return 0 - p

PythonVenv\Lib\site-packages\whoosh\searching.py:
    91:         return "%s(%r)" % (self.__class__.__name__, self.__dict__)
    96:         return ctx
   159:         return self
   165:         return self.__class__(reader, fromindex=self._ix,
   171:                 return offset
   175:             return [(self, 0)]
   177:             return self.subsearchers
   180:         return self.reader().is_atomic()
   183:         return self.parent is not None
   186:         """Returns the parent of this searcher (if has_parent() is True), or
   192:             return self.parent()
   194:             return self
   197:         """Returns the number of UNDELETED documents in the index.
   200:         return self.ixreader.doc_count()
   203:         """Returns the total number of documents, DELETED OR UNDELETED, in
   207:         return self._doccount
   211:             return self.get_parent().field_length(fieldname)
   213:             return self.reader().field_length(fieldname)
   217:             return self.get_parent().max_field_length(fieldname)
   219:             return self.reader().max_field_length(fieldname)
   222:         """Returns True if this Searcher represents the latest version of the
   228:         return self._ix.latest_generation() == self.ixreader.generation()
   231:         """Returns a fresh searcher for the latest version of the index::
   236:         searcher is simply returned.
   246:             return self
   252:         return self.__class__(newreader, fromindex=self._ix,
   262:             return default
   263:         return self.field_length(fieldname) / (self._doccount or 1)
   266:         """Returns the underlying :class:`~whoosh.reading.IndexReader`.
   268:         return self.ixreader
   277:         return SearchContext(**kwargs)
   280:         """Shortcut returns a SearchContext set for unscored (boolean)
   284:         return self.context(needs_current=False, weighting=None)
   287:         """Returns a :class:`whoosh.matching.Matcher` for the postings of the
   297:             return self.ixreader.postings(fieldname, text, scorer=globalscorer)
   317:             return MultiMatcher(matchers, docoffsets, globalscorer)
   331:             return cache[term]
   335:         return idf
   338:         """Convenience method returns the stored fields of a document
   346:         Where Searcher.documents() returns a generator, this function returns
   359:             return p
   362:         """Convenience method returns the stored fields of a document
   366:         Returns a generator of dictionaries containing the stored fields of any
   376:         return (ixreader.stored_fields(docnum)
   392:         return q
   395:         """Returns the document number of the document matching the given
   401:         Where Searcher.document_numbers() returns a generator, this function
   402:         returns either an int or None. Use it when you assume the given keyword
   416:                 return self.reader().first_id(k, v)
   418:                 return None
   422:                 return m.id()
   425:         """Returns a generator of the document numbers for documents matching
   435:         return self.docs_for_query(self._query_for_kw(kw))
   444:         return delset
   447:         return BitSet(self.docs_for_query(fq), size=self.doc_count_all())
   451:             return None
   464:         return c
   467:         """Returns a sorted list of suggested corrections for the given
   481:         :param limit: only return up to this many suggestions. If there are not
   483:             returned list will be shorter than this number.
   494:         return c.suggest(text, limit=limit, maxdist=maxdist, prefix=prefix)
   498:         """Returns the 'numterms' most important terms from the documents
   509:         This method returns a list of ("term", score) tuples. The score may be
   519:         :param numterms: Return this number of important terms.
   523:         :returns: a list of ("term", score) tuples.
   529:         return expander.expanded_terms(numterms, normalize=normalize)
   533:         """Return the 'numterms' most important terms from the given text.
   535:         :param numterms: Return this number of important terms.
   542:         return expander.expanded_terms(numterms, normalize=normalize)
   546:         """Returns a :class:`Results` object containing documents similar to
   565:         :param top: the number of results to return.
   586:         return self.search(q, limit=top, filter=filter, mask=set([docnum]))
   589:         """This method is Like the :meth:`Searcher.search` method, but returns
   633:         :returns: :class:`ResultsPage`
   640:         return ResultsPage(results, pagenum, pagelen)
   646:         return self.search(q, **kwargs)
   649:         """Returns an iterator of document numbers for documents matching the
   673:         """Low-level method: returns a configured
   730:         return c
   734:         returns a :class:`Results` object. See :doc:`/searching` for more
   787:         # Return the results object from the collector
   788:         return c.results()
   804:         Note that this method does not return a :class:`Results` object. You
   824:         Returns a corrected version of the given user query using a default
   840:         Returns a :class:`whoosh.spelling.Correction` object with a ``query``
   867:             second item in the returned tuple will also be None.
   931:         return sqc.correct_query(q, qstring)
   935:     """This object is returned by a Searcher. This object represents the
   967:         return "<Top %s Results for %r runtime=%s>" % (len(self.top_n),
   972:         """Returns the total number of documents that matched the query. Note
   987:         return self._total
   992:             return [Hit(self, self.top_n[i][1], i, self.top_n[i][0])
   998:             return Hit(self, self.top_n[n][1], n, self.top_n[n][0])
  1008:         """Returns True if the given document number matched the query.
  1011:         return docnum in self.docs()
  1014:         return not self.is_empty()
  1019:         """Returns True if not documents matched the query.
  1022:         return self.scored_length() == 0
  1025:         """Returns an iterator of (docnum, score) pairs for the scored
  1029:         return ((docnum, score) for score, docnum in self.top_n)
  1032:         """Returns the stored fields for the document at the ``n`` th position
  1037:         return self.searcher.stored_fields(self.top_n[n][1])
  1040:         """Returns the available facet names, for use with the ``groups()``
  1044:         return self._facetmaps.keys()
  1065:         By default, this returns a dictionary mapping category names to a list
  1094:         return self._facetmaps[name].as_dict()
  1097:         """Returns True if this results object already knows the exact number
  1102:             return self.collector.computes_count()
  1104:             return self._total is not None
  1112:             return len(self)
  1114:             return self.q.estimate_size(self.searcher.reader())
  1122:             return len(self)
  1124:             return self.q.estimate_min_size(self.searcher.reader())
  1127:         """Returns the number of scored documents in the results, equal to or
  1137:         query, which is what ``len(Results)`` returns.
  1140:         return len(self.top_n)
  1143:         """Returns a set-like object containing the document numbers that
  1149:         return self.docset
  1152:         """Returns a deep copy of this results object.
  1160:         return r
  1163:         """Returns the score for the document at the Nth position in the list
  1164:         of ranked documents. If the search was not scored, this may return
  1168:         return self.top_n[n][0]
  1171:         """Returns the document number of the result at position n in the list
  1174:         return self.top_n[n][1]
  1177:         return self.q.existing_terms(self.searcher.reader(),
  1181:         """Returns True if the search recorded which terms matched in which
  1190:         return hasattr(self, "docterms") and hasattr(self, "termdocs")
  1193:         """Returns the set of ``("fieldname", "text")`` tuples representing
  1213:         return set(self.termdocs.keys())
  1216:         return self.highlighter.fragmenter
  1224:         return self.highlighter.formatter
  1232:         return self.highlighter.scorer
  1240:         return self.highlighter.order
  1249:         """Returns the 'numterms' most important terms from the top 'docs'
  1257:         :param numterms: Return this number of important terms.
  1260:         :returns: list of unicode strings.
  1264:             return []
  1273:         return expander.expanded_terms(numterms, normalize=normalize)
  1294:             return
  1313:             return
  1335:             return
  1388:         """Returns a dictionary of the stored fields of the document this
  1394:         return self._fields
  1397:         """Returns the set of ``("fieldname", "text")`` tuples representing
  1415:         return self.results.docterms.get(self.docnum, [])
  1418:         """Returns highlighted snippets from the given field::
  1446:         :param top: the maximum number of fragments to return.
  1452:         return hliter.highlight_hit(self, fieldname, text=text, top=top,
  1457:         """Returns a new Results object containing documents similar to this
  1474:         :param top: the number of results to return.
  1483:         return self.searcher.more_like(self.docnum, fieldname, text=text,
  1488:         return "<%s %r>" % (self.__class__.__name__, self.fields())
  1492:             return self.fields() == other.fields()
  1494:             return self.fields() == other
  1496:             return False
  1499:         return len(self.fields())
  1502:         return iterkeys(self.fields())
  1506:             return self._fields[fieldname]
  1511:             return cr[self.docnum]
  1516:         return (key in self.fields()
  1520:         return list(self.fields().items())
  1523:         return list(self.fields().keys())
  1526:         return list(self.fields().values())
  1529:         return iteritems(self.fields())
  1532:         return iterkeys(self.fields())
  1535:         return itervalues(self.fields())
  1538:         return self.fields().get(key, default)
  1554:     """Represents a single page out of a longer list of results, as returned
  1624:             return self.results.__getitem__(slice(start + offset,
  1627:             return self.results.__getitem__(n + offset)
  1630:         return iter(self.results[self.offset:self.offset + self.pagelen])
  1633:         return self.total
  1636:         return self.results.scored_length()
  1639:         """Returns the score of the hit at the nth position on this page.
  1641:         return self.results.score(n + self.offset)
  1644:         """Returns the document number of the hit at the nth position on this
  1647:         return self.results.docnum(n + self.offset)
  1650:         """Returns True if this object represents the last page of results.
  1653:         return self.pagecount == 0 or self.pagenum == self.pagecount

PythonVenv\Lib\site-packages\whoosh\sorting.py:
    44:         """Returns a :class:`Categorizer` corresponding to this facet.
    58:             return OrderedList()
    60:             return t()
    62:             return t
    65:         return "facet"
   111:         """Returns a key for the current match.
   123:             return self.key_for_id(segment_docnum)
   125:             return self.key_for_matcher(matcher)
   145:             return self.keys_for_id(segment_docnum)
   150:         """Returns a representation of the key to be used as a dictionary key
   156:         return key
   171:     This facet returns different categorizers based on the field type.
   190:         return self.fieldname
   202:             return OverlappingCategorizer(global_searcher, fieldname)
   213:         return c
   228:         return "%s(%r, %r, reverse=%r)" % (self.__class__.__name__,
   239:         return self._creader.sort_key(segment_docnum)
   242:         return self._fieldobj.from_column_value(key)
   263:         return 0 - order
   268:         return ColumnCategorizer.key_to_name(self, key)
   316:                 return list(v.all_ids())
   318:                 return []
   320:             return self._creader[docid]
   322:             return self._lists[docid] or [None]
   328:                 return v.id()
   330:                 return None
   332:             return self._creader.sort_key(docid)
   336:                 return ls[0]
   338:                 return None
   390:         return i
   394:             return None
   397:         return self.values[i]
   421:         return self.QueryCategorizer(self.querydict, self.other, self.allow_overlap)
   440:                     return qname
   441:             return self.other
   491:         return self.fieldname
   496:         return query.NumericRange
   499:         return (startval, endval)
   532:         return QueryFacet(self.querydict).categorizer(global_searcher)
   560:         return query.DateRange
   574:         return self.ScoreCategorizer(global_searcher)
   593:             return 0 - score
   620:         return self.FunctionCategorizer(global_searcher, self.fn)
   631:             return self.fn(self.global_searcher, docid + self.offset)
   645:         # string and returns a sort key
   675:         return self.TranslateCategorizer(self.fn, catters)
   689:             return self.fn(*keys)
   724:         return self.fieldname
   727:         return self.StoredFieldCategorizer(self.fieldname, self.allow_overlap,
   743:                 return self.split_fn(value)
   745:                 return value.split()
   749:             return d.get(self.fieldname)
   783:         return "%s(%r, %r)" % (self.__class__.__name__,
   798:         return multi
   810:         return self
   815:         return self
   819:         return self
   826:         return self
   836:         return catter
   844:             return any(c.needs_current for c in self.catters)
   851:             return tuple(catter.key_for(matcher, docid)
   855:             return tuple(catter.key_to_name(keypart)
   898:         return facets
   901:         """Returns an iterator of the facet names in this object.
   904:         return iter(self.facets)
   907:         """Returns a list of (facetname, facetobject) tuples for the facets in
   911:         return self.facets.items()
   919:         return self
   930:         return self
   939:         return self
   951:         return self
   983:         """Returns a dictionary object mapping group names to
   996:     The ``as_dict`` method returns a dictionary mapping group names to lists
  1004:         return "<%s %r>" % (self.__class__.__name__, self.dict)
  1013:         return d
  1022:     The ``as_dict`` method returns a dictionary mapping group names to lists
  1030:         return "<%s %r>" % (self.__class__.__name__, self.dict)
  1036:         return dict(self.dict)
  1042:     The ``as_dict`` method returns a dictionary mapping group names to
  1050:         return "<%s %r>" % (self.__class__.__name__, self.dict)
  1056:         return dict(self.dict)
  1063:     The ``as_dict`` method returns a dictionary mapping group names to
  1072:         return "<%s %r>" % (self.__class__.__name__, self.bestids)
  1080:         return self.bestids

PythonVenv\Lib\site-packages\whoosh\spelling.py:
   51:         :param limit: only return up to this many suggestions. If there are not
   53:             returned list will be shorter than this number.
   74:         return [sug for _, sug in sugs]
  146:                 return w
  150:                 return self.data[pos]
  152:                 return None
  173:         return iteritems(seen)
  219:         return "%s(%r, %r)" % (self.__class__.__name__, self.query,
  228:         :return: the output of the formatter (usually a string).
  232:             return ''
  237:         return formatter.format_fragment(fragment, replace=True)
  252:         Returns a :class:`Correction` object representing the corrected
  266:         return self.fieldname
  314:         # words and it returns a copy of the query tree.
  333:                     # Return a new copy of the original query with this word
  343:         return Correction(q, qstring, corrected_q, corrected_tokens)

PythonVenv\Lib\site-packages\whoosh\writing.py:
    63: # written), and returns an updated segment list (not including the segment
    69:     return segments
   103:         return unchanged_segments
   105:         return segments
   118:     return []
   126:     return []
   148:         return path, f
   151:         return self.tempstore.open_file(path).raw_file()
   154:         return self.tempstore.delete_file(path)
   176:         return self.items()
   204:         return self
   213:         """Returns a context manager that calls
   233:         return groupmanager(self)
   289:         """Returns a reader for the existing index.
   297:         return Searcher(self.reader(), **kwargs)
   304:         :returns: the number of documents deleted.
   310:         return self.delete_by_query(q, searcher=searcher)
   315:         :returns: the number of documents deleted.
   332:         return count
   410:             return float(fields["_boost"])
   412:             return default
   417:             return float(fields[boostkw])
   419:             return default
   425:         return unique_fields
   551:         return "<%s %r>" % (self.__class__.__name__, self.newsegment)
   565:         #Returns the index.Segment object containing the given document
   569:             return 0
   570:         return bisect_right(offsets, docnum) - 1
   573:         #Returns an (index.Segment, segment_docnum) pair for the segment
   579:         return segment, docnum - offset
   594:         return self._tempstorage
   610:         Returns True if the current index has documents that are marked deleted
   614:         return any(s.has_deletions() for s in self.segments)
   625:         :returns: the total number of deleted documents in the index.
   628:         return sum(s.deleted_count() for s in self.segments)
   632:         return segment.is_deleted(segdocnum)
   638:         return FileIndex._reader(self.storage, self.schema, self.segments,
   642:         return self.pool.iter_postings()
   700:         return docmap
   744:                 # Ask the field to return a list of (text, weight, vbytes)
   791:         return self.docnum - self.docbase
   796:         return newsegment
   801:         return self.codec.per_document_reader(self.storage, self.get_segment())
   827:         return mergetype(self, self.segments)
   862:         return self.get_segment()
   872:         return self.get_segment()
   911:             segment list as arguments, and returning a new segment list. If you
   925:             # list of remaining segments returned by the merge policy
   993:         return self.index.reader()
   997:         return Searcher(self.reader(), fromindex=self.index, **kwargs)
  1189:         return self.codec.reader(self.schema)
  1193:         return self.writer.schema
  1209:         return reader
  1214:         return Searcher(self.reader(), fromindex=self.index, **kwargs)
  1269:             return self.writer.is_deleted(docnum)
  1271:             return self._get_ram_reader().is_deleted(docnum - base)

PythonVenv\Lib\site-packages\whoosh\analysis\__init__.py:
  37:   Every tokenizer is a callable that takes a string and returns an iterator of
  44:   Every filter is a callable that takes a token generator and returns a token
  51:   Every analyzer is a callable that takes a string and returns a token

PythonVenv\Lib\site-packages\whoosh\analysis\acore.py:
   42:     return (t for t in tokenstream if not t.stopped)
  128:         return "%s(%s)" % (self.__class__.__name__, parms)
  132:         return Token(**self.__dict__)
  145:         return CompositeAnalyzer(self, other)
  153:         return self.__class__.__name__ + "(%s)" % attrs
  156:         return self.is_morph

PythonVenv\Lib\site-packages\whoosh\analysis\analyzers.py:
   49:         return "%s()" % self.__class__.__name__
   52:         return (other
   74:         # (because analyzers take a string and return a generator of tokens,
   75:         # and filters take and return generators of tokens)
   82:         return "%s(%s)" % (self.__class__.__name__,
   93:         return gen
   96:         return self.items.__getitem__(item)
   99:         return len(self.items)
  102:         return (other
  112:         return any(item.is_morph for item in self.items)
  115: # Functions that return composed analyzers
  125:     return tokenizer
  146:     return tokenizer
  153:     return RegexTokenizer(expression=expression, gaps=gaps)
  168:     return RegexTokenizer(expression=expression, gaps=gaps) | LowercaseFilter()
  194:     return chain
  225:     return chain | StemFilter(stemfn=stemfn, ignore=ignore,
  248:     return (RegexTokenizer(expression=expression, gaps=gaps)
  296:     return chain

PythonVenv\Lib\site-packages\whoosh\analysis\filters.py:
   66:     objects, and yield a series of Token objects in return.
   73:         return (other
   78:         return not self == other
   89:         return tokens
  136:         return (other
  144:         return filter(chain([t], tokens))
  178:         return (self.__class__ is other.__class__
  288:         return (other
  363:         return (other
  414:         return (other and self.__class__ is other.__class__
  469:         return (other and self.__class__ is other.__class__

PythonVenv\Lib\site-packages\whoosh\analysis\intraword.py:
   70:             return [s]
   72:             return memo[s]
   82:                     return result
   84:         return None
  206:             return tk
  330:         return other and self.__class__ is other.__class__\

PythonVenv\Lib\site-packages\whoosh\analysis\morph.py:
   95:         return dict([(k, self.__dict__[k]) for k in self.__dict__
  133:             return None
  134:         return self._stem.cache_info()
  137:         return (other and self.__class__ is other.__class__
  178:         """Returns a list of stemming algorithms provided by the py-stemmer
  184:         return Stemmer.algorithms()
  187:         return None
  194:         return stemmer.stemWord
  199:         return dict([(k, self.__dict__[k]) for k in self.__dict__
  244:         return (other

PythonVenv\Lib\site-packages\whoosh\analysis\ngrams.py:
   68:                 return True
   69:         return False
  150:         return other and self.__class__ is other.__class__\
  231:     return NgramTokenizer(minsize, maxsize=maxsize) | LowercaseFilter()
  237:     return tokenizer | LowercaseFilter() | NgramFilter(minsize, maxsize, at=at)

PythonVenv\Lib\site-packages\whoosh\analysis\tokenizers.py:
   44:         return other and self.__class__ is other.__class__
   99:                 return True
  100:         return False
  220:         return (other
  294:     """Returns a RegexTokenizer that splits tokens by whitespace.
  301:     return RegexTokenizer(r"[^ \t\r\n]+")
  317:     return RegexTokenizer(r"[^,]+") | StripFilter()

PythonVenv\Lib\site-packages\whoosh\automata\fsa.py:
   22:         return "<%s>" % self.name
   38:         return len(self.all_states())
   42:             return False
   44:             return False
   48:             return False
   51:                 return False
   52:         return True
   58:         return stateset
   64:         return labels
   67:         return iter(self.transitions.get(src, []))
   79:         return self.initial
  107:         return self.is_final(state)
  135:         return frozenset(self._expand(set([self.initial])))
  150:         return bool(self.final_states.intersection(states))
  161:         return states
  173:         return frozenset(self._expand(dest_states))
  181:         return labels
  222:         return dfa
  243:         return self.initial
  255:         return state in self.final_states
  259:         return trans.get(label, self.defaults.get(src, None))
  277:             return string
  288:                     return path
  290:         return None
  299:             return label
  308:             return labels[pos]
  309:         return None
  327:         return reached
  417:         return self
  432:         return newnum
  442:     return newdfa
  476:       lookup_func: A single argument function that returns the first word in the
  486:             return
  505:     return nfa
  528:     return dfa
  532:     return product(dfa1, operator.and_, dfa2)
  536:     return product(dfa1, operator.or_, dfa2)
  540:     return basic_nfa(EPSILON)
  544:     return basic_nfa(ANY)
  553:     return nfa
  563:     return nfa
  575:     return nfa
  590:     return nfa
  601:     return nfa
  619:     return nfa
  623:     return concat_nfa(n, star_nfa(n))
  627:     return choice_nfa(n, epsilon_nfa())
  639:         return "<%s, %r>" % (self.n, self.tuple())
  642:         return hash(self.tuple())
  646:         return arcs, self.final
  685:     return dfa

PythonVenv\Lib\site-packages\whoosh\automata\glob.py:
  90:     return nfa

PythonVenv\Lib\site-packages\whoosh\automata\lev.py:
  30:     return nfa

PythonVenv\Lib\site-packages\whoosh\automata\nfa.py:
   33:         return "%s()" % (self.__class__.__name__, )
   45:         return "Char(%r)" % self.c
   56:         return "Lit(%r)" % self.c
   71:         return "Match()"
   83:         return "Jmp(%s)" % self.x
   96:         return "Split(%s, %s)" % (self.x, self.y)
  105:         return id(self)
  108:         return "L(%s)" % hex(id(self))
  112:     return e1 + e2
  117:     return [L1] + e1 + [Jmp(L3), L2] + e2 + [L3]
  122:     return [Split(L1, L2), L1] + e + [L2]
  127:     return [L1, Split(L2, L3), L2] + e + [Jmp(L1), L3]
  132:     return [L1] + e + [Split(L1, L2), L2]
  153:     return program + [Match]
  163:         return bool(self.threads)
  166:         return self.threads.pop()
  189:         return self
  192:         return Thread(pc, self.address, self.sofar, self.accept)
  196:         return "Thread(%s)" % ",".join("%s=%r" % (k, v) for k, v in d.items())
  264:                         return thread.sofar + thread.label
  273:                         return thread.sofar
  275:                 return thread.sofar
  286:                 return thread.sofar
  288:             return thread.sofar
  368: # #                return 1;
  375: # #                    return -1;
  385: # #    return 0;

PythonVenv\Lib\site-packages\whoosh\automata\reg.py:
   50:         return self.statenum
   58:         return nfa
   66:         return nfa
   75:         return e
   83:         return nfa
  100:         return nfa
  110:         return nfa
  124:         return nfa
  127:         return self.concat(n, self.star(n))
  130:         return self.choice(n, self.epsilon())

PythonVenv\Lib\site-packages\whoosh\codec\__init__.py:
  32:     return W3Codec(*args, **kwargs)

PythonVenv\Lib\site-packages\whoosh\codec\base.py:
   78:         return Automata()
  100:         return self._child.per_document_writer(storage, segment)
  103:         return self._child.field_writer(storage, segment)
  106:         return self._child.postings_writer(dbfile, byteids=byteids)
  109:         return self._child.postings_reader(dbfile, terminfo, format_, term=term,
  113:         return self._child.automata(storage, segment)
  116:         return self._child.terms_reader(storage, segment)
  119:         return self._child.per_document_reader(storage, segment)
  122:         return self._child.new_segment(storage, indexname)
  280:         """Returns True if this object has already written to disk.
  333:         return self.term_info(fieldname, text).weight()
  337:         return self.term_info(fieldname, text).doc_frequency()
  354:         return lev.levenshtein_automaton(uterm, maxdist, prefix).to_dfa()
  362:             return
  369:                 return
  377:         return self.find_matches(dfa, fieldcur)
  410:         Returns an iterator of all (undeleted) document IDs in the reader.
  414:         return (docnum for docnum in xrange(self.doc_count_all())
  424:         return False
  427:         return False
  432:     # Don't need to override this if supports_columns() returns False
  439:         return None
  462:         return False
  464:     # Don't need to override this if has_vector() always returns False
  508:         return random_name(size=size)
  511:         return "<%s %s>" % (self.__class__.__name__, self.segment_id())
  517:         return self.indexname
  522:             return self.name
  524:             return "%s_%s" % (self.index_name(), self.segid)
  528:             return False
  529:         return self.compound
  534:         return "%s%s" % (self.segment_id(), ext)
  538:         return [name for name in storage.list() if name.startswith(prefix)]
  547:         return storage.create_file(fname, **kwargs)
  556:         return storage.open_file(fname, **kwargs)
  570:         return CompoundStorage(dbfile, use_mmap=storage.supports_mmap)
  577:         Returns the total number of documents, DELETED OR UNDELETED, in this
  585:         Returns the number of (undeleted) documents in this segment.
  588:         return self.doc_count_all() - self.deleted_count()
  595:         Returns True if any documents in this segment are deleted.
  598:         return self.deleted_count() > 0
  603:         Returns the total number of deleted documents in this segment.
  626:         Returns True if the given document number is deleted.
  632:         return True
  642:         return self._child.codec()
  645:         return self._child.index_name()
  648:         return self._child.segment_id()
  651:         return self._child.is_compound()
  654:         return self._child.should_assemble()
  657:         return self._child.make_filename(ext)
  660:         return self._child.list_files(storage)
  663:         return self._child.create_file(storage, ext, **kwargs)
  666:         return self._child.open_file(storage, ext, **kwargs)
  669:         return self._child.create_compound_file(storage)
  672:         return self._child.open_compound_file(storage)
  675:         return self._child.delete_document(docnum, delete=delete)
  678:         return self._child.has_deletions()
  681:         return self._child.deleted_count()
  684:         return self._child.deleted_docs()
  687:         return self._child.is_deleted(docnum)
  693:         return self._child.doc_count()
  696:         return self._child.doc_count_all()
  719:         return self._doccount
  725:         return total
  728:         return max(0, bisect_right(self._doc_offsets, docnum) - 1)
  733:         return rnum, docnum - offset
  738:         return any(r.has_deletions() for r in self._readers)
  742:         return self._readers[x].is_deleted(y)
  757:         return any(r.has_column(fieldname) for r in self._readers)
  773:             return colreaders[0]
  775:             return columns.MultiColumnReader(colreaders)
  781:         return self._readers[x].doc_field_length(y, fieldname, default)
  787:         return total
  790:         return min(r.min_field_length() for r in self._readers)
  793:         return max(r.max_field_length() for r in self._readers)
  828:         return None
  831:         return None
  834:         return None
  837:         return None
  840:         return None
  843:         return False

PythonVenv\Lib\site-packages\whoosh\codec\memory.py:
   53:         return MemWriter(ix, _lk=False, codec=self,
   57:         return SegmentReader(self.storage, schema, self.segment, codec=self)
   60:         return MemPerDocWriter(self.storage, self.segment)
   63:         return MemFieldWriter(self.storage, self.segment)
   66:         return MemPerDocReader(self.storage, self.segment)
   69:         return MemTermsReader(self.storage, self.segment)
   72:         return self.segment
   84:         return fieldname in self._colwriters
   91:         return self._colwriters[fieldname][1]
  131:         return self._segment.doc_count()
  134:         return self._segment.doc_count_all()
  137:         return self._segment.has_deletions()
  140:         return self._segment.is_deleted(docnum)
  143:         return self._segment.deleted_docs()
  146:         return True
  150:         return self._storage.file_exists(filename)
  156:         return column.reader(colfile, 0, length, self._segment.doc_count_all())
  159:         return self._segment._lengths[docnum].get(fieldname, default)
  162:         return sum(lens.get(fieldname, 0) for lens
  166:         return min(lens[fieldname] for lens in self._segment._lengths.values()
  170:         return max(lens[fieldname] for lens in self._segment._lengths.values()
  174:         return (docnum in self._segment._vectors
  180:         return ListMatcher(ids, weights, values, format_)
  183:         return self._segment._stored[docnum]
  256:         return term in self._segment._terminfos
  268:             return
  274:         return self._segment._terminfos[fieldname, text]
  279:         return ListMatcher(ids, weights, values, format_, scorer=scorer)
  282:         return self._invindex.keys()
  301:         return self._codec
  307:         return len(self._stored)
  310:         return self._doccount
  322:             return self._doccount - len(self._stored)
  325:         return docnum not in self._stored
  334:         return False

PythonVenv\Lib\site-packages\whoosh\codec\plaintext.py:
   67:             return largs
   73:                 return
   77:                 return
   91:                 return
   99:             return None
  109:         return (indent, command, args)
  124:         return PlainPerDocWriter(storage, segment)
  127:         return PlainFieldWriter(storage, segment)
  130:         return PlainPerDocReader(storage, segment)
  133:         return PlainTermsReader(storage, segment)
  136:         return PlainSegment(indexname)
  176:         return self._segment.doc_count()
  179:         return self._segment.doc_count()
  182:         return False
  185:         return False
  188:         return frozenset()
  196:                 return True
  198:                 return False
  200:         return False
  215:         return (c.get("len", 0) for c in self._iter_docfields(fieldname))
  223:                     return c.get("len", default)
  227:         return default
  244:             return True
  245:         return False
  248:         return list(self._column_values(fieldname))
  251:         return sum(self._iter_lengths(fieldname))
  254:         return min(self._iter_lengths(fieldname))
  257:         return max(self._iter_lengths(fieldname))
  262:                 return True
  263:         return False
  281:         return ListMatcher(ids, weights, values, format_,)
  292:         return sfs
  297:         return self._read_stored_fields()
  300:         return enumerate(self.all_stored_fields())
  318:         return self._dbfile.is_closed
  375:                 return True
  378:         return False
  382:         return TermInfo(**c)
  386:         return self._find_term(fieldname, btext)
  389:         return self._iter_fields()
  414:         return self._find_terminfo()
  430:         return ListMatcher(ids, weights, values, format_, scorer=scorer)
  443:         return PlainTextCodec()
  449:         return self._doccount
  452:         return False

PythonVenv\Lib\site-packages\whoosh\codec\whoosh3.py:
    86:         return W3PerDocWriter(self, storage, segment)
    90:         return W3FieldWriter(self, storage, segment)
    95:         return W3PostingsWriter(dbfile, blocklimit=self._blocklimit,
   110:         return m
   115:         return W3PerDocReader(storage, segment)
   124:         return W3TermsReader(self, tifile, tilen, postfile)
   131:         return True
   136:         return segment.make_filename(ext)
   141:         return W3Segment(self, indexname)
   147:     return "_%s_vec" % fieldname
   151:     return "_%s_len" % fieldname
   179:         return self._segment.create_file(self._storage, ext)
   182:         return fieldname in self._colwriters
   193:         return self._colwriters[fieldname]
   227:             return
   237:         # finish_postings() returns terminfo object
   255:         return W3Codec.column_filename(self._segment, fieldname)
   299:         return self._segment.create_file(self._storage, ext)
   369:         return self._doccount - self._segment.deleted_count()
   372:         return self._doccount
   377:         return self._segment.has_deletions()
   380:         return self._segment.is_deleted(docnum)
   383:         return self._segment.deleted_docs()
   389:         return self._storage.file_exists(filename)
   395:         return colfile, 0, length
   401:         return column.reader(colfile, offset, length, self._doccount)
   407:             return self._readers[fieldname]
   410:                 return None
   414:             return reader
   424:             return default
   428:             return byte_to_length(lbyte)
   431:         return self._segment._fieldlengths.get(fieldname, 0)
   435:             return cache[fieldname]
   441:         return length
   444:         return self._minmax_length(fieldname, min, self._minlengths)
   447:         return self._minmax_length(fieldname, max, self._maxlengths)
   464:         # Get the length from the length column, if it exists, otherwise return
   472:         return offset, length
   477:             return offset != 0
   478:         return False
   489:         return m
   498:         return v
   520:         return self.next()
   527:         return self.next()
   540:                     return self._text
   543:         return None
   546:         return self._text
   550:             return None
   553:         return W3TermInfo.from_bytes(databytes)
   556:         return self._pos is not None
   574:         return pack_ushort(fnum) + tbytes
   578:         return self._fieldunmap[fieldid], keybytes[_SHORT_SIZE:]
   581:         return self._tindex.range_for_key(self._keycoder(fieldname, tbytes))
   584:         return self._keycoder(*term) in self._tindex
   587:         return self._fieldmap.keys()
   593:         return W3FieldCursor(tindex, fieldname, coder, decoder, fieldobj)
   597:         return (keydecoder(keybytes) for keybytes in self._tindex.keys())
   602:         return (keydecoder(keybytes) for keybytes
   608:         return ((keydecoder(keybytes), tidecoder(valbytes))
   615:         return ((keydecoder(keybytes), tidecoder(valbytes))
   621:             return W3TermInfo.from_bytes(self._tindex[key])
   627:         return W3TermInfo.read_weight(self._dbfile, datapos)
   631:         return W3TermInfo.read_doc_freq(self._dbfile, datapos)
   637:         return m
   665:         return self._blockcount > 0
   733:         # Return the current terminfo object
   734:         return terminfo
   813:         return tuple(ids)
   821:             return None
   823:             return weights[0]
   825:             return tuple(weights)
   839:         return vs
   844:         # Returns the number of unwritten buffered postings
   845:         return len(self._ids)
   849:         return self._ids[0]
   853:         return self._ids[-1]
   857:         return self._minlength
   861:         return self._maxlength
   865:         return self._maxweight
   964:         # Skip blocks as long as the skipwhile() function returns True
   970:         return skipped
   973:         return not self._atend and self._i < self._blocklength
   982:         return self._ids[self._i]
   991:         return self._weights[self._i]
  1000:         return self._values[self._i]
  1010:             return True
  1012:             return False
  1022:             return
  1043:             return 0
  1047:         return self._skip_to_block(lambda: block_quality() <= minquality)
  1052:         return self._ids[0]
  1055:         return self._maxid
  1058:         return self._minlength
  1061:         return self._maxlength
  1064:         return self._maxweight
  1164:         return self._offset, self._length
  1170:         return self._inlined is not None
  1173:         return self._inlined
  1198:         return st
  1225:         return terminfo
  1229:         return dbfile.get_float(datapos + 1)
  1233:         return dbfile.get_uint(datapos + 1 + _FLOAT_SIZE)
  1240:         return ml, xl
  1245:         return dbfile.get_float(weightspos)
  1261:         return self._codec
  1267:         return self._doccount
  1271:             return 0
  1272:         return len(self._deleted)
  1276:             return ()
  1278:             return iter(self._deleted)
  1290:             return False
  1291:         return docnum in self._deleted

PythonVenv\Lib\site-packages\whoosh\filedb\compound.py:
   91:         return "<%s (%s)>" % (self.__class__.__name__, self._name)
  111:         return fileinfo["offset"], fileinfo["length"]
  126:         return f
  129:         return list(self._dir.keys())
  132:         return name in self._dir
  136:         return info["length"]
  140:         return info["modified"]
  145:         return self._locks[name]
  209:         return SubFile(self._file, self._offset + position, length, name=name)
  222:             return self._file.read(size)
  224:             return emptybytes
  233:         return data
  248:         return self._pos
  263:         return StructFile(ss)
  311:             return sum(b[2] for b in self.blocks) + self._buffer.tell()

PythonVenv\Lib\site-packages\whoosh\filedb\filestore.py:
   81:         return iter(self.list())
   85:         return self
  101:         This method returns ``self`` so you can also say::
  108:         :return: a :class:`Storage` instance.
  111:         return self
  142:         :return: a :class:`whoosh.index.Index` instance.
  150:         return indexclass.create(self, schema, indexname)
  170:         :return: a :class:`whoosh.index.Index` instance.
  176:         return indexclass(self, schema=schema, indexname=indexname)
  179:         """Returns True if a non-empty index exists in this storage.
  192:             return gen > -1
  195:         return False
  201:         :return: a :class:`whoosh.filedb.structfile.StructFile` instance.
  210:         :return: a :class:`whoosh.filedb.structfile.StructFile` instance.
  216:         """Returns a list of file names in this storage.
  218:         :return: a list of strings
  223:         """Returns True if the given file exists in this storage.
  232:         """Returns the last-modified time of the given file in this storage (as
  236:         :return: a "ctime" number.
  242:         """Returns the size (in bytes) of the given file in this storage.
  270:         """Return a named lock object (implementing ``.acquire()`` and
  278:         :return: a lock-like object.
  329:         return self.b.create_file(*args, **kwargs)
  333:             return self.a.open_file(name, *args, **kwargs)
  335:             return self.b.open_file(name, *args, **kwargs)
  338:         return list(set(self.a.list()) | set(self.b.list()))
  341:         return self.a.file_exists(name) or self.b.file_exists(name)
  345:             return self.a.file_modified(name)
  347:             return self.b.file_modified(name)
  351:             return self.a.file_length(name)
  353:             return self.b.file_length(name)
  356:         return self.b.delete_file(name)
  362:         return self.b.lock(name)
  373:         return self.b.temp_storage(name=name)
  405:         return "%s(%r)" % (self.__class__.__name__, self.folder)
  415:         This method returns ``self``, you can say::
  429:         :return: a :class:`Storage` instance.
  449:         return self
  476:         :return: a :class:`whoosh.filedb.structfile.StructFile` instance.
  493:         return f
  501:         :return: a :class:`whoosh.filedb.structfile.StructFile` instance.
  505:         return f
  508:         return os.path.abspath(os.path.join(self.folder, fname))
  529:         return files
  532:         return os.path.exists(self._fpath(name))
  535:         return os.path.getmtime(self._fpath(name))
  538:         return os.path.getsize(self._fpath(name))
  558:         return FileLock(self._fpath(name))
  564:         return tempstore.create()
  583:         return list(self.files.keys())
  589:         return sum(self.file_length(f) for f in self.list())
  592:         return name in self.files
  597:         return len(self.files[name])
  600:         return -1
  621:         return f
  627:         return BufferFile(buf, name=name, **kwargs)
  632:         return self.locks[name]
  639:         return tempstore.create()
  662:     return ram

PythonVenv\Lib\site-packages\whoosh\filedb\filetables.py:
   56:     return h
   60:     return int(md5(key).hexdigest(), 16) & 0xffffffff
   64:     return crc32(key) & 0xffffffff
  126:         return self.dbfile.tell()
  215:         return endpos
  285:         return cls(dbfile, length)
  288:         return self.dbfile
  303:         # Returns the key bytes at the given position
  307:         return dbfile.get(pos + _lengths.size, keylen)
  310:         # Returns a (keybytes, datapos, datalen) tuple for the key at the given
  316:             return None
  321:         return keybytes, datapos, datalen
  341:             return value
  353:             return True
  354:         return False
  373:             return value
  374:         return default
  400:             return
  414:                 return
  435:             return item
  477:         """Returns the closest key equal to or greater than the given key. If
  479:         returns None.
  484:             return None
  485:         return self.key_at(pos)
  494:             return
  543:         # Given a key, return the position of that key OR the next highest key
  564:         # If we went off the end, return None
  566:             return None
  567:         # Return the closest key
  568:         return _get_pos(indexbase + lo * indexsize)
  621:         return self.fieldmap[fieldname][0]
  647:             return True
  649:             return False
  655:                 return datapos, datalen
  660:         return self.dbfile.get(datapos, datalen)
  664:             return self.term_data(fieldname, btext)
  666:             return default
  669:         # Given a key, return the position of that key OR the next highest key
  702:         # If we went off the end, return None
  704:             return None
  705:         # Return the closest key
  706:         return startpos + get_pos(ixpos + lo * ixsize)
  711:             return None
  712:         return self.key_at(pos)
  717:             return

PythonVenv\Lib\site-packages\whoosh\filedb\gae.py:
   52:         return file
   64:         return self.data.tell()
   67:         return self.data.write(data)
   70:         return self.data.read(length)
   73:         return self.data.seek(*args)
   76:         return self.data.readline()
   79:         return self.data.getvalue()
   96:         return val
  112:         return FileIndex(self, schema, indexname)
  115:         return FileIndex(self, schema=schema, indexname=indexname)
  122:         return keys
  128:         return sum(self.file_length(f) for f in self.list())
  131:         return DatastoreFile.get_by_key_name(name) is not None
  134:         return DatastoreFile.get_by_key_name(name).mtime
  137:         return len(DatastoreFile.get_by_key_name(name).value)
  141:         return DatastoreFile.get_by_key_name(name).delete()
  154:         return f
  157:         return StructFile(DatastoreFile.loadfile(name))
  160:         return MemcacheLock(name)
  164:         return tempstore.create()

PythonVenv\Lib\site-packages\whoosh\filedb\structfile.py:
   59:     """Returns a "structured file" object that wraps the given file object and
   75:         return "%s(%r)" % (self.__class__.__name__, self._name)
   78:         return self._name
   81:         return self
   87:         return iter(self.file)
   90:         return self.file
   93:         return self.file.read(*args, **kwargs)
   96:         return self.file.readline(*args, **kwargs)
   99:         return self.file.write(*args, **kwargs)
  102:         return self.file.tell(*args, **kwargs)
  105:         return self.file.seek(*args, **kwargs)
  108:         return self.file.truncate(*args, **kwargs)
  134:         return StructFile(SubFile(self.file, offset, length), name=name)
  153:         return self.read(self.read_varint())
  157:         return self.read(l)
  161:         return self.read(l)
  166:         return self.get(base, l), base + l
  171:         return self.get(base, l), base + l
  191:         return read_varint(self.read)
  197:         return decode_signed_varint(read_varint(self.read))
  222:             return self.read_ushort()
  224:             return self.read_uint()
  226:             return tb
  235:         return ord(self.read(1))
  245:         return load_pickle(self.file)
  284:         return unpack_sbyte(self.read(1))[0]
  287:         return unpack_int(self.read(_INT_SIZE))[0]
  290:         return unpack_uint(self.read(_INT_SIZE))[0]
  293:         return unpack_uint_le(self.read(_INT_SIZE))[0]
  296:         return unpack_ushort(self.read(_SHORT_SIZE))[0]
  299:         return unpack_ushort_le(self.read(_SHORT_SIZE))[0]
  302:         return unpack_long(self.read(_LONG_SIZE))[0]
  305:         return unpack_ulong(self.read(_LONG_SIZE))[0]
  308:         return unpack_float(self.read(_FLOAT_SIZE))[0]
  318:         return a
  322:         return self.read(length)
  325:         return unpack_byte(self.get(position, 1))[0]
  328:         return unpack_sbyte(self.get(position, 1))[0]
  331:         return unpack_int(self.get(position, _INT_SIZE))[0]
  334:         return unpack_uint(self.get(position, _INT_SIZE))[0]
  337:         return unpack_ushort(self.get(position, _SHORT_SIZE))[0]
  340:         return unpack_long(self.get(position, _LONG_SIZE))[0]
  343:         return unpack_ulong(self.get(position, _LONG_SIZE))[0]
  346:         return unpack_float(self.get(position, _FLOAT_SIZE))[0]
  350:         return self.read_array(typecode, length)
  365:         return BufferFile(self.get(position, length), name=name)
  368:         return bytes_type(self._buf[position:position + length])
  375:         return a
  395:         return b
  402:         return self._check & 0xffffffff

PythonVenv\Lib\site-packages\whoosh\lang\__init__.py:
   91:         return name
   93:         return aliases[name]
   94:     return None
  101:         return bool(stemmer_for_language(lang))
  103:         return False
  108:         return bool(stopwords_for_language(lang))
  110:         return False
  118:         return porter_stem
  124:         return ISRIStemmer().stem
  128:         return snowball_classes[tlc]().stem
  138:         return stoplists[tlc]

PythonVenv\Lib\site-packages\whoosh\lang\dmetaphone.py:
  412:         return (primary, None)
  414:         return (primary, secondary)

PythonVenv\Lib\site-packages\whoosh\lang\isri.py:
   23: stemmer returned normalized form, rather than returning the original
   49:     isri.stem(token) returns Arabic root for the given token.
  149:         if self.stm in self.stop_words: return self.stm     # exclude stop words from being processed
  154:         if len(self.stm) <= 3: return self.stm     # return stem if less than or equal to three
  158:             return self.stm
  162:             return self.stm
  166:             return self.stm
  174:                 return self.stm
  175:         return self.stm              # if word length >7 , then no stemming
  188:             return self.stm
  191:             return self.stm
  195:             return self.stm
  203:                     return self.stm
  208:                             return self.stm
  216:                     return self.stm
  221:                             return self.stm
  228:             return self.stm
  234:             return self.stm
  237:             return self.stm
  240:             return self.stm
  243:             return self.stm
  248:             return self.stm
  254:             return self.stm
  257:             return self.stm
  260:             return self.stm
  263:             return self.stm
  266:             return self.stm
  269:             return self.stm
  272:             return self.stm
  275:             return self.stm
  278:             return self.stm
  281:             return self.stm
  284:             return self.stm
  287:             return self.stm
  290:             return self.stm
  293:             return self.stm
  296:             return self.stm
  301:             return self.stm
  307:             return self.stm
  310:             return self.stm
  313:             return self.stm
  318:             return self.stm
  321:             return self.stm
  324:             return self.stm
  330:             return self.stm
  333:             return self.stm
  336:             return self.stm
  339:             return self.stm
  342:             return self.stm
  347:             return self.stm
  353:             return self.stm
  356:             return self.stm
  361:             return self.stm
  365:             return self.stm
  368:             return self.stm
  375:                 return self.stm
  382:                 return self.stm

PythonVenv\Lib\site-packages\whoosh\lang\lovins.py:
   14:     return True
   19:     return len(base) > 2
   24:     return len(base) > 3
   29:     return len(base) > 4
   34:     return base[-1] != "e"
   39:     return len(base) > 2 and base[-1] != "e"
   44:     return len(base) > 2 and base[-1] == "f"
   50:     return c2 == "t" or (c2 == "l" and c1 == "l")
   56:     return c != "o" and c != "e"
   62:     return c != "a" and c != "e"
   69:     return len(base) > 2 and (c == "l" or c == "i" or (c == "e" and cc == "u"))
   75:     return c2 != "u" and c2 != "x" and (c2 != "s" or c1 == "o")
   81:     return c != "a" and c != "c" and c != "e" and c != "m"
   86:     return len(base) > 3 or (len(base) == 3 and base[-1] != "s")
   92:     return c == "l" or c == "i"
   97:     return base[-1] != "c"
  103:     return len(base) > 2 and (c != "l" and c != "n")
  109:     return c == "n" or c == "r"
  115:     return l2 == "rd" or (base[-1] == "t" and l2 != "tt")
  121:     return c2 == "s" or (c2 == "t" and c1 != "o")
  127:     return c == "l" or c == "m" or c == "n" or c == "r"
  132:     return base[-1] == "c"
  138:     return c != "s" and c != "u"
  145:     return c == "l" or c == "i" or (c == "e" and cc == "u")
  150:     return base[-2:] == "in"
  155:     return base[-1] != "f"
  162:     return (c == "d" or c == "f" or l2 == "ph" or l2 == "th" or c == "l"
  168:     return len(base) > 2 and not (base.endswith("met")
  174:     return base[-1] == "l"
  498:                     return base
  500:     return word
  560:                     return word
  562:             return word[:0 - len(target)] + newend
  564:     return word
  568:     """Returns the stemmed version of the argument string.
  570:     return fix_ending(remove_ending(word))

PythonVenv\Lib\site-packages\whoosh\lang\morph_en.py:
  899:     """Given an English word, returns a collection of morphological variations
  908:         return _exdict[word].split(" ")
  931:             return set(out)
  933:     return [word]

PythonVenv\Lib\site-packages\whoosh\lang\paicehusk.py:
   70:             return yp
   71:         return vp
   77:                 return word[len(prefix):]
   78:         return word
   81:         """Returns a stemmed version of the argument string.
   87:             return word
  118:         return stem

PythonVenv\Lib\site-packages\whoosh\lang\phonetic.py:
   38:     return r
   81:     return r
  119:     return r

PythonVenv\Lib\site-packages\whoosh\lang\porter.py:
   88:         return w
  175:     return w

PythonVenv\Lib\site-packages\whoosh\lang\porter2.py:
   24:         return 5
   26:         return 6
   31:         return match.start(1)
   32:     return len(word)
   38:         return match.start(1)
   39:     return len(word)
   45:             return True
   47:         return True
   48:     return False
   54:             return True
   55:     return False
   60:         return word[1:]
   61:     return word
   67:     return ccy_exp.sub('\g<1>Y', word)
   72:         return word[:-3]
   74:         return word[:-2]
   76:         return word[:-1]
   77:     return word
   82:         return word[:-4] + 'ss'
   85:             return word[:-3] + 'i'
   87:             return word[:-3] + 'ie'
   89:         return word
   93:             return preceding
   94:         return word
   95:     return word
  104:             return True
  105:     return False
  110:         return word + 'e'
  112:         return word[:-1]
  114:         return word + 'e'
  115:     return word
  124:             return word[:-3]
  125:         return word
  128:             return word[:-1]
  129:         return word
  135:                 return step_1b_helper(preceding)
  136:             return word
  138:     return word
  145:                 return word[:-1] + 'i'
  146:     return word
  153:                     return word[:-len(end)] + repl
  156:                         return word[:-len(end)] + repl
  157:             return word
  158:         return None
  191:             return attempt
  192:     return word
  199:                 return word[:-len(end)] + repl
  202:                     return word[:-len(end)] + repl
  203:         return word
  204:     return None
  222:             return attempt
  223:     return word
  234:                 return word[:-len(end)]
  235:             return word
  239:             return word[:-3]
  241:     return word
  247:             return word[:-1]
  248:         return word
  252:             return word[:-1]
  254:             return word[:-1]
  256:     return word
  260:     return word.replace('Y', 'y')
  288:         return word
  293:         return exceptional_forms[word]
  303:         return word
  313:     return word

PythonVenv\Lib\site-packages\whoosh\lang\wordnet.py:
   42:     """Parses the WordNet wn_s.pl prolog file and returns two dictionaries:
   66:     return word2nums, num2words
   71:     synonyms taken from word2nums and num2words. Returns the Index
   82:     return ix
   87:     for the given word. Returns a list of synonym strings.
   97:     return sorted(syns)
  172:         return thes
  186:             return cls.from_file(f)
  210:         return thes
  232:         """Returns a list of synonyms for the given word.
  240:             return self.searcher.document(word=word)["syns"]
  242:             return synonyms(self.w2n, self.n2w, word)

PythonVenv\Lib\site-packages\whoosh\lang\snowball\bases.py:
   14:         Return the region R1 that is used by the Scandinavian stemmers.
   26:         :return: the region R1 for the respective word.
   41:                     return word
   44:         return r1
   55:         Return the standard interpretations of the string regions R1 and R2.
   70:         :return: (r1,r2), the regions R1 and R2 for the respective word.
   93:         return (r1, r2)
   97:         Return the standard interpretation of the string region RV.
  109:         :return: the region RV for the respective word.
  133:         return rv

PythonVenv\Lib\site-packages\whoosh\lang\snowball\danish.py:
   52:         Stem a Danish word and return the stemmed form.
   56:         :return: The stemmed form.
  115:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\dutch.py:
   27:         Stem a Dutch word and return the stemmed form.
   31:         :return: The stemmed form.
   70:                     return word
  173:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\english.py:
  100:         Stem an English word and return the stemmed form.
  104:         :return: The stemmed form.
  111:             return self.__special_words[word]
  465:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\finnish.py:
   58:         Stem a Finnish word and return the stemmed form.
   62:         :return: The stemmed form.
  266:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\french.py:
   57:         Stem a French word and return the stemmed form.
   61:         :return: The stemmed form.
  313:         return word
  317:         Return the region RV that is used by the French stemmer.
  331:         :return: the region RV for the respective French word.
  348:         return rv

PythonVenv\Lib\site-packages\whoosh\lang\snowball\german.py:
   40:         Stem a German word and return the stemmed form.
   44:         :return: The stemmed form.
   71:                     return word
  144:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\hungarian.py:
   85:         Stem an Hungarian word and return the stemmed form.
   89:         :return: The stemmed form.
  224:         return word
  228:         Return the region R1 that is used by the Hungarian stemmer.
  245:         :return: the region R1 for the respective word.
  256:                     return r1
  268:         return r1

PythonVenv\Lib\site-packages\whoosh\lang\snowball\italian.py:
   65:         Stem an Italian word and return the stemmed form.
   69:         :return: The stemmed form.
  230:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\norwegian.py:
  42:         Stem a Norwegian word and return the stemmed form.
  46:         :return: The stemmed form.
  84:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\portugese.py:
   69:         Stem a Portuguese word and return the stemmed form.
   73:         :return: The stemmed form.
  205:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\romanian.py:
   89:         Stem a Romanian word and return the stemmed form.
   93:         :return: The stemmed form.
  257:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\russian.py:
  121:         Stem a Russian word and return the stemmed form.
  125:         :return: The stemmed form.
  283:         return word
  287:         Return the regions RV and R2 which are used by the Russian stemmer.
  300:         :return: the regions RV and R2 for the respective Russian word.
  336:         return (rv, r2)
  348:         :return: the transliterated word.
  387:         return word
  399:         :return: word, the transliterated word.
  422:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\spanish.py:
   77:         Stem a Spanish word and return the stemmed form.
   81:         :return: The stemmed form.
  248:         return word

PythonVenv\Lib\site-packages\whoosh\lang\snowball\swedish.py:
  40:         Stem a Swedish word and return the stemmed form.
  44:         :return: The stemmed form.
  80:         return word

PythonVenv\Lib\site-packages\whoosh\matching\binary.py:
   46:         return "%s(%r, %r)" % (self.__class__.__name__, self.a, self.b)
   49:         return [self.a, self.b]
   52:         return self.__class__(self.a.copy(), self.b.copy())
   55:         return 1 + max(self.a.depth(), self.b.depth())
   62:         return ra or rb
   65:         return (self.a.supports_block_quality()
   69:         return self.a.supports(astype) and self.b.supports(astype)
   83:         return q
   91:         return bq
   94:         return (self.a.weight() + self.b.weight())
   97:         return (self.a.score() + self.b.score())
  100:         return self.__class__ is type(other)
  103:         return type(other) is self.__class__
  106:         return not self.__eq__(other)
  109:         return not (self.__lt__(other) or self.__eq__(other))
  112:         return self.__eq__(other) or self.__lt__(other)
  115:         return self.__eq__(other) or self.__gt__(other)
  136:                 return IntersectionMatcher(a, b).replace(minquality)
  138:                 return AndMaybeMatcher(b, a)
  140:                 return AndMaybeMatcher(a, b)
  144:             return mcore.NullMatcher()
  146:             return b.replace(minquality)
  148:             return a.replace(minquality)
  152:         # If one of the sub-matchers changed, return a new union
  154:             return self.__class__(a, b)
  157:             return self
  160:         return self.a.is_active() or self.b.is_active()
  171:         return ra or rb
  176:             return _id
  187:         return _id
  192:     #    return iter(sorted(set(self.a.all_ids()) | set(self.b.all_ids())))
  206:             return b.next()
  208:             return a.next()
  219:         return ar or br
  223:             return self.b.spans()
  225:             return self.a.spans()
  230:             return self.a.spans()
  232:             return self.b.spans()
  234:             return sorted(set(self.a.spans()) | set(self.b.spans()))
  241:             return b.weight()
  243:             return a.weight()
  248:             return a.weight()
  250:             return b.weight()
  252:             return (a.weight() + b.weight())
  259:             return b.score()
  261:             return a.score()
  266:             return a.score()
  268:             return b.score()
  270:             return (a.score() + b.score())
  282:             return b.skip_to_quality(minquality)
  284:             return a.skip_to_quality(minquality)
  297:         return skipped
  302:     match the same posting, returns the weight/score of the higher-scoring
  316:         return self.__class__(self.a.copy(), self.b.copy(),
  333:                 # contribute, return an inactive matcher
  334:                 return mcore.NullMatcher()
  336:                 # If the b matcher can't contribute, return a
  337:                 return a.replace(minquality)
  339:                 # If the a matcher can't contribute, return b
  340:                 return b.replace(minquality)
  343:             return mcore.NullMatcher()
  345:             return b.replace(minquality)
  347:             return a.replace(minquality)
  357:         # returning a replacement with an inactive sub-matcher
  359:             return mcore.NullMatcher()
  361:             return b
  363:             return a
  365:             # If one of the sub-matchers changed, return a new DisMax
  366:             return self.__class__(a, b)
  368:             return self
  372:             return self.b.score()
  374:             return self.a.score()
  376:             return max(self.a.score(), self.b.score())
  379:         return max(self.a.max_quality(), self.b.max_quality())
  382:         return max(self.a.block_quality(), self.b.block_quality())
  391:             return sk
  393:             return a.skip_to_quality(minquality)
  405:         return skipped
  435:             return mcore.NullMatcher()
  442:                 # return an inactive matcher
  443:                 return mcore.NullMatcher()
  456:             return mcore.NullMatcher()
  458:             return b
  460:             return a
  462:             return self.__class__(a, b)
  464:             return self
  467:         return self.a.is_active() and self.b.is_active()
  481:                     return
  487:                     return
  490:         return r
  493:         return self.a.id()
  498:         return iter(sorted(set(self.a.all_ids()) & set(self.b.all_ids())))
  509:             return ra or rb or rn
  548:         return skipped
  559:             return ar or nr
  562:         return sorted(set(self.a.spans()) | set(self.b.spans()))
  586:         return self.a.is_active()
  592:             return
  608:         return r
  611:         return self.a.supports_block_quality()
  615:             # The a matcher is required, so if it's inactive, return an
  617:             return mcore.NullMatcher()
  621:             # contribute, return an inactive matcher
  622:             return mcore.NullMatcher()
  626:             return self.a.replace(minquality)
  631:             # If one of the sub-matchers was replaced, return a new AndNot
  632:             return self.__class__(a, b)
  634:             return self
  637:         return self.a.max_quality()
  640:         return self.a.block_quality()
  645:         return skipped
  648:         return self.a.id()
  657:         return ar or nr
  663:             return
  671:         return self.a.weight()
  674:         return self.a.score()
  677:         return self.a.supports(astype)
  680:         return self.a.value()
  683:         return self.a.value_as(astype)
  707:         return self.a.is_active()
  710:         return self.a.id()
  720:         return ar or br
  730:         return ra or rb
  739:             return mcore.NullMatcher()
  743:                 # enough to possibly contribute, return an inactive matcher
  744:                 return mcore.NullMatcher()
  749:                 return IntersectionMatcher(self.a, self.b)
  751:             return a.replace(minquality)
  756:             # If one of the sub-matchers changed, return a new AndMaybe
  757:             return self.__class__(new_a, new_b)
  759:             return self
  769:             return a.skip_to_quality(minquality)
  782:         return skipped
  786:             return self.a.weight() + self.b.weight()
  788:             return self.a.weight()
  792:             return self.a.score() + self.b.score()
  794:             return self.a.score()
  797:         return self.a.supports(astype)
  800:         return self.a.value()
  803:         return self.a.value_as(astype)

PythonVenv\Lib\site-packages\whoosh\matching\combo.py:
   41:         return all(m.supports_block_quality() for m in self._submatchers)
   44:         return max(m.max_quality() for m in self._submatchers
   48:         return all(m.supports(astype) for m in self._submatchers)
   51:         return iter(self._submatchers)
   54:         return sum(m.score() for m in self._submatchers) * self._boost
   99:         return self._docnum - self._offset < len(self._a)
  102:         return self._docnum
  105:         return self._a[self._docnum - self._offset]
  118:         return max(self._a[self._docnum - self._offset:])
  121:         return self.max_quality()
  125:             return
  143:         return skipped
  147:         return False
  187:         return ("%s(%r, boost=%f, scored=%r, partsize=%d)"
  194:             return min(subm.id() for subm in active)
  196:             return self._doccount
  241:         return False
  244:         return self._docnum < self._doccount
  247:         return max(m.max_quality() for m in self._submatchers)
  250:         return max(self._a)
  255:             return
  260:             return
  284:         return skipped
  287:         return self._docnum
  309:         return self._find_next()
  312:         return self._a[self._docnum - self._offset]

PythonVenv\Lib\site-packages\whoosh\matching\mcore.py:
   40: method, which returns the appropriate matcher to implement the query (for
   42: :meth:`~whoosh.query.Or.matcher()` method returns a
   49: method will return ``True``.
   82:         """Returns True if this matcher is still "active", that is, it has not
   90:         """Returns to the start of the posting list.
  100:         """Returns a ``("fieldname", "termtext")`` tuple for the term this
  104:         return None
  107:         """Returns an iterator of term matchers in this tree.
  118:         """Returns an iterator of ``("fieldname", "termtext")`` tuples for the
  123:             return
  128:             return
  139:         return not bool(self.children())
  142:         """Returns an (possibly empty) list of the submatchers of this
  146:         return []
  149:         """Returns a possibly-simplified version of this matcher. For example,
  151:         this method on the UnionMatcher will return the other child.
  154:         return self
  158:         """Returns a copy of this matcher.
  164:         """Returns the depth of the tree under this matcher, or 0 if this
  168:         return 0
  171:         """Returns True if this matcher supports the use of ``quality`` and
  175:         return False
  178:         """Returns the maximum possible quality measurement for this matcher,
  187:         """Returns a quality measurement of the current block of postings,
  197:         """Returns the ID of the current posting.
  203:         """Returns a generator of all IDs in the matcher.
  205:         What this method returns for a matcher that has already read some
  222:         """Returns a generator of all (ID, encoded value) pairs in the matcher.
  224:         What this method returns for a matcher that has already read some
  241:         """Returns a generator of all (ID, decoded value) pairs in the matcher.
  243:         What this method returns for a matcher that has already read some
  255:         """Returns the encoded value of the current posting.
  262:         """Returns True if the field's format supports the named data type,
  271:         """Returns the value(s) of the current posting as the given type.
  278:         """Returns a list of :class:`~whoosh.query.spans.Span` objects for the
  286:             return [Span(pos, startchar=startchar, endchar=endchar)
  289:             return [Span(pos) for pos in self.value_as("positions")]
  316:         """Returns the weight of the current posting.
  319:         return self.value_as("weight")
  323:         """Returns the score of the current posting.
  329:         return self.__class__ is type(other)
  332:         return type(other) is self.__class__
  335:         return not self.__eq__(other)
  338:         return not (self.__lt__(other) or self.__eq__(other))
  341:         return self.__eq__(other) or self.__lt__(other)
  344:         return self.__eq__(other) or self.__gt__(other)
  354:         return True
  357:         return self._score
  360:         return self._score
  367:         return self._score
  377:         return self
  380:         return "<NullMatcher>"
  383:         return True
  386:         return 0
  389:         return 0
  392:         return 0
  395:         return False
  401:         return []
  404:         return self
  443:         return "<%s>" % self.__class__.__name__
  446:         return self._i < len(self._ids)
  455:             return
  461:         return self._term
  464:         return self.__class__(self._ids, self._weights, self._values,
  470:             return NullMatcher()
  472:             return NullMatcher()
  474:             return self
  477:         return (self._scorer is not None
  484:             return self._scorer.block_quality(self)
  486:             return self.block_max_weight()
  489:         return self._scorer.block_quality(self)
  494:         return 0
  497:         return self._ids[self._i]
  500:         return iter(self._ids)
  507:         return izip(self._ids, values)
  529:             return v
  531:             return ''
  535:         return decoder(self.value())
  538:         return self._format.supports(astype)
  545:             return self._all_weights
  547:             return self._weights[self._i]
  549:             return 1.0
  552:         return self._terminfo.min_length()
  555:         return self._terminfo.max_length()
  559:             return self._all_weights
  561:             return max(self._weights)
  563:             return self._terminfo.max_weight()
  565:             return 1.0
  569:             return self._scorer.score(self)
  571:             return self.weight()
  582:         return "%s(%r, %s)" % (self.__class__.__name__, self.term(),
  586:         return self._term
  594:         return self.format.supports(astype)
  598:         return decoder(self.value())
  604:             return [Span(pos, startchar=startchar, endchar=endchar)
  607:             return [Span(pos) for pos in self.value_as("positions")]
  613:         return self.scorer and self.scorer.supports_block_quality()
  616:         return self.scorer.max_quality()
  619:         return self.scorer.block_quality(self)
  622:         return self.scorer.score(self)

PythonVenv\Lib\site-packages\whoosh\matching\wrappers.py:
   43:         return "%s(%r, boost=%s)" % (self.__class__.__name__, self.child,
   50:         return self.__class__(self.child.copy(), **kwargs)
   53:         return 1 + self.child.depth()
   56:         return self.__class__(newchild, boost=self.boost)
   62:             # If the child changed, return a new wrapper on the new child
   63:             return self._replacement(r)
   65:             return self
   68:         return self.child.id()
   71:         return self.child.all_ids()
   74:         return self.child.is_active()
   80:         return [self.child]
   83:         return self.child.supports(astype)
   86:         return self.child.value()
   89:         return self.child.value_as(astype)
   92:         return self.child.spans()
   95:         return self.child.skip_to(id)
  101:         return self.child.supports_block_quality()
  104:         return self.child.skip_to_quality(minquality / self.boost)
  107:         return self.child.max_quality() * self.boost
  110:         return self.child.block_quality() * self.boost
  113:         return self.child.weight() * self.boost
  116:         return self.child.score() * self.boost
  137:         return "%s(%r, %r, current=%s)" % (self.__class__.__name__,
  142:         return self.current < len(self.matchers)
  150:         return [self.matchers[self.current]]
  159:         return self.__class__([mr.copy() for mr in self.matchers],
  164:             return 1 + max(mr.depth() for mr in self.matchers[self.current:])
  166:             return 0
  180:             return mcore.NullMatcher()
  185:         return m
  189:         return self.matchers[current].id() + self.offsets[current]
  198:         return self.matchers[self.current].spans()
  201:         return self.matchers[self.current].supports(astype)
  204:         return self.matchers[self.current].value()
  207:         return self.matchers[self.current].value_as(astype)
  221:             return
  236:         return r
  239:         return all(mr.supports_block_quality() for mr
  243:         return max(m.max_quality() for m in self.matchers[self.current:])
  246:         return self.matchers[self.current].block_quality()
  249:         return self.matchers[self.current].weight()
  252:         return self.scorer.score(self)
  256:     return FilterMatcher(child, excluded, exclude=True, boost=boost)
  280:         return "%s(%r, %r, %r, boost=%s)" % (self.__class__.__name__,
  289:         return self.__class__(self.child.copy(), self._ids, self._exclude,
  293:         return self.__class__(newchild, self._ids, exclude=self._exclude,
  307:         return r
  320:             return (id for id in self.child.all_ids() if id not in ids)
  322:             return (id for id in self.child.all_ids() if id in ids)
  327:             return (item for item in self.child.all_items()
  330:             return (item for item in self.child.all_items() if item[0] in ids)
  347:         return self.__class__(self.child.copy(), self.limit,
  352:         return self.__class__(newchild, self.limit, missing=self.missing,
  356:         return self._id < self.limit
  364:         return False
  374:             return
  398:         return self._id
  401:         return mcore.Matcher.all_ids(self)
  413:             return
  418:         return self._weight
  421:         return self._weight
  437:         return self.__class__(self.a.copy(), self.b.copy())
  440:         return self.a.supports_block_quality()
  445:             return mcore.NullMatcher()
  448:             # to possibly contribute, return an inactive matcher
  449:             return mcore.NullMatcher()
  454:             return mcore.NullMatcher()
  456:             # If one of the sub-matchers changed, return a new Require
  457:             return self.__class__(new_a, self.b)
  459:             return self
  462:         return self.a.max_quality()
  465:         return self.a.block_quality()
  470:         return skipped
  473:         return self.a.weight()
  476:         return self.a.score()
  479:         return self.a.supports(astype)
  482:         return self.a.value()
  485:         return self.a.value_as(astype)
  494:         return self.__class__(self.child.copy(), score=self._score)
  497:         return self.__class__(newchild, score=self._score)
  500:         return self._score
  503:         return self._score
  506:         return self._score
  519:         return self._term
  522:         return self
  530:     when compared to another matcher returning the unmodified score.
  540:         return self.__class__(newchild, scale=self._scale)
  556:         return sqr
  559:         return self._sqr(self.child.max_quality(), self._termcount)
  562:         return self._sqr(self.child.block_quality(), self._termcount)
  572:         return self._sqr(score, matching)

PythonVenv\Lib\site-packages\whoosh\qparser\common.py:
  45:     """Returns the first token from an analyzer's output.
  49:         return t
  60:     return q

PythonVenv\Lib\site-packages\whoosh\qparser\dateparse.py:
   65:         return repr(self.__dict__)
   68:         return self.__dict__.get(key, default)
   77:             return Regex(e)
   79:             return e
   89:         return d
  107:         return "%s<%s>%r" % (self.__class__.__name__, self.name or '',
  182:             return (d, pos)
  185:             return (None, None)
  198:         :param fn: a function to run on all dates found. It should return a
  200:             the default behavior accepts two dates and returns a timespan.
  228:                     return (None, None)
  238:                 return (None, None)
  245:                 return (None, None)
  251:             return (None, None)
  253:         return (self.dates_to_timespan(dates), pos)
  257:             return self.fn(dates)
  259:             return timespan(dates[0], dates[1])
  265:     """Returns the date from the first of its sub-elements that matches.
  279:                 return (d, newpos)
  281:         return (None, None)
  341:                         return (None, None)
  360:             return (None, None)
  363:         return (d, pos)
  374:         return "%s(%r)" % (self.__class__.__name__, self.element)
  383:             return (d, pos)
  385:             return (adatetime(), pos)
  397:         return "%s(%r)" % (self.__class__.__name__, self.element)
  406:             return (d, pos)
  408:             return (None, None)
  421:       and the base datetime and returns an adatetime/datetime.
  434:         return "<%r>" % (self.pattern,)
  439:             return (None, None)
  450:             return (d, m.end())
  452:             return (None, None)
  462:         return Props(**d)
  470:             return self.fn(props, dt)
  475:             return adatetime(**args)
  525:         return dt + delta
  553:         return adatetime(year=d.year, month=d.month, day=d.day)
  576:         return adatetime(hour=hr, minute=p.mins, second=p.secs, microsecond=p.usecs)
  619:         return self.all
  628:         return (d, newpos)
  641:         return d
  678:             return adatetime(year=d.year, month=d.month, day=d.day)
  683:             return adatetime(year=d.year, month=d.month, day=d.day)
  765:             return [(DateTagger(self, self.freeexpr), -1)]
  767:             return ()
  771:         return [(self.do_dates, 110)]
  776:         return syntax.ErrorNode(message, node)
  783:                 return self.errorize(text, node)
  791:         return n
  800:                 return self.errorize(node.start, node)
  804:                 return self.errorize(node.end, node)
  820:         return drn
  825:             return group
  845:         return group
  858:         return repr(self.dt)
  868:             return query.Term(fieldname, btext, boost=self.boost)
  870:             return query.DateRange(fieldname, dt.start, dt.end,
  887:         return "%r-%r" % (self.start, self.end)
  893:         return query.DateRange(fieldname, self.start, self.end,
  922:                         return node

PythonVenv\Lib\site-packages\whoosh\qparser\default.py:
   90:         """Returns the default list of plugins to use.
   95:         return [plugins.WhitespacePlugin(),
  154:         # methodname is "taggers" or "filters". Returns a priorized list of
  164:         # Return the sorted list without the priorities
  165:         return [item for item, _ in items_and_priorities]
  168:         """Returns a query for multiple texts. This method implements the
  180:             applied to the returned query object.
  186:             return termclass(fieldname, texts[0], boost=boost)
  189:             return self.phraseclass(fieldname, texts, boost=boost)
  200:             return qclass([termclass(fieldname, t, boost=boost)
  205:         """Returns the appropriate query object for a single term in the query
  213:             # and return early
  217:                     return q
  220:                     return query.error_query(e)
  228:             # If the analyzer returned more than one token, use the field's
  232:                 return self.multitoken_query(field.multitoken_query, texts,
  235:             # It's possible field.process_text() will return an empty list (for
  238:                 return None
  241:         return termclass(fieldname, text, boost=boost)
  244:         """Returns a priorized list of tagger objects provided by the parser's
  248:         return self._priorized("taggers")
  251:         """Returns a priorized list of filter functions provided by the
  255:         return self._priorized("filters")
  258:         """Returns a group of syntax nodes corresponding to the given text,
  280:             return n
  316:         return group
  333:                 raise Exception("Filter %r did not return anything" % f)
  334:         return nodes
  337:         """Returns a group of syntax nodes corresponding to the given text,
  346:         return nodes
  349:         """Parses the input string and returns a :class:`whoosh.query.Query`
  354:             before returning it. This should be left on unless you're trying to
  376:         return q
  385:     """Returns a QueryParser configured to search in multiple fields.
  403:     return p
  407:     """Returns a QueryParser configured to support only +, -, and phrase
  417:     return QueryParser(fieldname, schema, plugins=pins, group=orgroup,
  422:     """Returns a QueryParser configured to support only +, -, and phrase
  439:     return QueryParser(None, schema, plugins=pins, group=orgroup, **kwargs)

PythonVenv\Lib\site-packages\whoosh\qparser\plugins.py:
    44:         """Should return a list of ``(Tagger, priority)`` tuples to add to the
    48:         return ()
    51:         """Should return a list of ``(filter_function, priority)`` tuples to
    55:         return a group node.
    58:         return ()
    77:         return [(self, self.priority)]
    80:         return ()
    86:         return self.nodetype(**kwargs)
   103:         return [(self.remove_whitespace, 500)]
   112:         return newgroup
   142:             return "%r*" % self.text
   157:         return [(self.do_wildcards, 50)]
   187:         return group
   197:             return "Wild %r" % self.text
   216:             return "Regex %r" % self.text
   237:             return "^ %s" % self.boost
   251:         return node
   254:         return [(self.clean_boost, 0), (self.do_boost, 510)]
   267:         return group
   287:         return newgroup
   298:             return "("
   302:             return ")"
   309:         return [(FnTagger(self.openexpr, self.OpenBracket, "openB"), 0),
   313:         return [(self.do_groups, 0)]
   350:         return top
   358:         return self.EveryNode()
   362:             return "*:*"
   365:             return query.Every()
   374:             return syntax.FieldnameNode(match.group("text"), match.group(0))
   387:         return [(self.FieldnameTagger(self.expr), 0)]
   390:         return [(self.do_fieldnames, 100)]
   446:         return newgroup
   500:             return "<~%d/%d>" % (self.maxdist, self.prefixlength)
   515:             return "%r ~%d/%d" % (self.text, self.maxdist, self.prefixlength)
   525:             return q
   534:         return self.FuzzinessNode(maxdist, prefixlength, match.group(0))
   537:         return [(self.do_fuzzyterms, 0)]
   557:         return newgroup
   590:             return "#%s<%r>(%r)" % (self.name, self.args, self.nodes)
   597:             # TODO: If this call raises an exception, return an error query
   598:             return self.fn(qs, *self.args, **self.kwargs)
   602:         :param fns: a dictionary mapping names to functions that return a
   618:             return self.FunctionNode(name, fn, args, kwargs)
   643:         return args, kwargs
   646:         return [(self.do_functions, 600)]
   668:         return newgroup
   688:             return "%s %r~%s" % (self.__class__.__name__, self.text, self.slop)
   691:             return self.__class__(self.type, [fn(node) for node in self.nodes],
   731:             return attach(q, self)
   739:             return PhrasePlugin.PhraseNode(text, textstartchar, slop)
   745:         return [(self.PhraseTagger(self.expr), 0)]
   780:         return [(FnTagger(self.expr, self.QuoteNode, "quote"), 0)]
   783:         return [(self.do_quotes, 550)]
   822:         return newgroup
   871:             return rn
   880:         return [(tagger, 1)]
   916:             return "<%s %r (%s)>" % (self.__class__.__name__,
   920:             return self.optype(match.group(0), self.grouptype, self.leftassoc)
   956:         return self.ops
   959:         return [(self.do_operators, 600)]
   996:         return group
  1005:     This is the basis for the parser configuration returned by
  1022:         return [(FnTagger(self.plusexpr, self.Plus, "plus"), 0),
  1026:         return [(self.do_plusminus, 510)]
  1061:         return group
  1088:             return "(%s)" % self.rel
  1095:         return [(self.do_gtlt, 99)]
  1124:         return newgroup
  1136:         return n.set_range(node.startchar, node.endchar)
  1167:         return [(self.do_multifield, 110)]
  1184:         return group
  1210:         return [(self.do_aliases, 90)]
  1220:         return group
  1267:         return [(self.do_copyfield, 109)]
  1288:         return newgroup
  1298:     :class:`whoosh.qparser.SyntaxNode` and returns a
  1318:                 return node
  1322:                 # node. Alternatively you could just ``return node`` here to
  1324:                 return None
  1336:                 return node
  1359:                 return group
  1378:             :class:`whoosh.qparser.SyntaxNode` as an argument, and return a
  1379:             :class:`~whoosh.qparser.SyntaxNode`. If the function returns None,
  1387:         return [(self.do_pseudofield, 99)]
  1413:         return newgroup

PythonVenv\Lib\site-packages\whoosh\qparser\syntax.py:
   67:         return r
   70:         """Returns a basic representation of this node. The base class's
   75:         return "%s %r" % (self.__class__.__name__, self.__dict__)
   78:         return self
   82:             return fn(n.apply(fn_wrapper))
   84:         return fn_wrapper(self)
   87:         """Returns a :class:`whoosh.query.Query` instance corresponding to this
   94:         """Returns True if this node is ignorable whitespace.
   97:         return False
  100:         return False
  111:             return
  115:         return self
  124:             return
  126:         return self
  134:         return self
  140:             return self._parent()
  145:             return p.node_after(self)
  150:             return p.node_before(self)
  161:         return self.__class__.__name__
  169:         return " "
  172:         return True
  186:         return "<%r:>" % self.fieldname
  200:         wrap this class around the queries returned by the subnodes.
  216:         return "%s %s" % (self.__class__.__name__,
  222:             return None
  223:         return self.nodes[0].startchar
  228:             return None
  229:         return self.nodes[-1].endchar
  232:         return self.__class__(self.type, [fn(node) for node in self.nodes],
  243:         return attach(q, self)
  246:         """Returns an empty copy of this group.
  250:         certain criteria, then returns the new group::
  257:                 return newgroup
  267:         return c
  277:         return self
  282:         return bool(self.nodes)
  287:         return iter(self.nodes)
  290:         return len(self.nodes)
  293:         return self.nodes.__getitem__(n)
  311:         return self.nodes.pop(*args, **kwargs)
  317:         return self.nodes.index(v)
  330:             return
  332:             return self.nodes[i - 1]
  338:             return
  340:             return self.nodes[i + 1]
  366:         return attach(q, self)
  378:             return attach(self.qclass(q), self)
  387:         return "ERR %r %r" % (self.node, self.message)
  391:         return self.node.startchar
  395:         return self.node.endchar
  403:         return attach(query.error_query(self.message, q), self)
  421:         return ScaledOrGroup
  466:         return "%s%r %r%s" % (b1, self.start, self.end, b2)
  481:                         return attach(q, self)
  484:                     return attach(query.error_query(e), self)
  495:         return attach(q, self)
  529:         return "%s %r" % (self.__class__.__name__, self.text)
  532:         return True
  540:         return attach(q, self)
  551:         return repr(self.text)
  579:         return "OP %r" % self.text
  583:         operator occurs in that group. Should return a group with the operator
  597:         return position
  605:         return position
  629:                 return position - 1
  636:         return position
  645:     return node

PythonVenv\Lib\site-packages\whoosh\qparser\taggers.py:
  40:         the given position. If it matches, it should return
  65:                 return node
  90:         return "<%s %r (%s)>" % (self.__class__.__name__, self.expr, self.memo)
  93:         return self.fn(**match.groupdict())

PythonVenv\Lib\site-packages\whoosh\query\compound.py:
   54:         return r
   60:         return r
   65:         return (other
   71:         return self.subqueries.__getitem__(i)
   74:         return len(self.subqueries)
   77:         return iter(self.subqueries)
   83:         return h
   86:         return False
   89:         return iter(self.subqueries)
   92:         return self.__class__([fn(q) for q in self.subqueries],
   99:                 return f
  103:         return min(est, ixreader.doc_count())
  117:                 return size
  118:         return 0
  134:             return qcore.NullQuery
  139:             return Every()
  180:             return qcore.NullQuery
  187:             return sub
  189:         return self.__class__(subqs, boost=self.boost)
  198:         return q
  206:             return matching.NullMatcher()
  212:         return m
  221:         # q_weight_fn is a function which is called on each query and returns a
  240:         return m
  261:         return s
  264:         return min(q.estimate_size(ixreader) for q in self.subqueries)
  269:         return self._tree_matcher(subs, matching.IntersectionMatcher, searcher,
  318:         return r
  327:         return norm
  331:             return self.subqueries[0].requires()
  333:             return set()
  368:         return cls(subs, boost=self.boost, minmatch=self.minmatch,
  386:         return m
  399:             return matching.NullMatcher()
  401:             return subs[0].matcher(searcher, context)
  431:             # If there are no big queries, just return the prescored matcher
  436:         return m
  452:         return am
  470:         return r
  478:         return norm
  482:             return self.subqueries[0].requires()
  484:             return set()
  489:         return self._tree_matcher(subs, matching.DisjunctionMaxMatcher,
  511:         return (other and self.__class__ is other.__class__
  515:         return (hash(self.__class__.__name__) ^ hash(self.a) ^ hash(self.b))
  518:         return self.a.needs_spans() or self.b.needs_spans()
  521:         return self.__class__(fn(self.a), fn(self.b))
  526:             return f
  529:         return self.__class__(self.a.with_boost(boost),
  536:             return qcore.NullQuery
  538:             return b
  540:             return a
  542:         return self.__class__(a, b)
  545:         return self.matcherclass(self.a.matcher(searcher, context),
  557:         return self.__class__(self.a.with_boost(boost), self.b)
  564:             return qcore.NullQuery
  566:             return a
  568:         return self.__class__(a, b)
  571:         return self.a.requires()
  576:         return matching.AndNotMatcher(scoredm, notm)
  590:         return m
  594:     """Binary query returns results from the first query that also appear in
  603:         return self.a.requires() | self.b.requires()
  606:         return self.b.estimate_size(ixreader)
  609:         return self.b.estimate_min_size(ixreader)
  612:         return self.__class__(self.a.with_boost(boost), self.b)
  618:             return qcore.NullQuery
  619:         return self.__class__(a, b)
  622:         return And(self.subqueries).docs(searcher)
  627:         return matching.AndNotMatcher(scoredm, requiredm)
  643:             return qcore.NullQuery
  645:             return a
  646:         return self.__class__(a, b)
  649:         return self.a.requires()
  652:         return self.subqueries[0].estimate_min_size(ixreader)
  655:         return self.subqueries[0].docs(searcher)
  659:     return AndNot(AndMaybe(And(required), Or(should)),

PythonVenv\Lib\site-packages\whoosh\query\nested.py:
   79:             in these results will be returned as the match.
   84:             sub-documents to calculate the score returned for the parent
  101:             return qcore.NullQuery
  103:         return self.__class__(p, q)
  106:         return self.child.requires()
  111:             return matching.NullMatcher
  114:             return matching.NullMatcher
  116:         return self.NestedParentMatcher(bits, m, self.per_parent_limit,
  123:             return
  148:             return self._nextdoc is not None
  151:             return False
  158:             # The next document returned by this matcher is the parent of the
  161:             # wouldn't return deleted documents.
  182:             return self._nextdoc
  185:             return self._nextscore
  208:             return []
  213:     a query that matches children but returns the parent, this query matches
  214:     parents but returns the children.
  216:     This is useful, for example, to search for an album title and return the
  251:             # A query that matches the desired albums but returns the tracks
  271:             return matching.NullMatcher
  275:             return matching.NullMatcher
  277:         return self.NestedChildMatcher(bits, m, searcher.doc_count_all(),
  294:             return "%s(%r, %r)" % (self.__class__.__name__,
  308:             return self._nextchild < self._nextparent
  311:             return self
  320:             # A function that returns True if a doc ID is deleted
  352:             return self._nextchild
  376:                 return
  386:                 return
  412:             return self.boost
  415:             return []

PythonVenv\Lib\site-packages\whoosh\query\positional.py:
   66:         return (other and type(self) is type(other)
   71:         return "%s(%r, slop=%d, boost=%f)" % (self.__class__.__name__,
   79:         return h
   84:         return self.__class__([q.normalize() for q in self.subqueries],
   88:         return compound.And(self.subqueries)
   91:         return self._and_query().estimate_size(ixreader)
   94:         return self._and_query().estimate_min_size(ixreader)
  105:         return m
  117:         return self._tree_matcher(subs, SpanBefore._Matcher, searcher,
  144:         return (other and self.__class__ is other.__class__
  151:         return "%s(%r, %r, slop=%s, boost=%f)" % (self.__class__.__name__,
  156:         return u('%s:"%s"') % (self.fieldname, u(" ").join(self.words))
  164:         return h
  167:         return True
  187:             return qcore.NullQuery
  192:             return t
  195:         return self.__class__(self.fieldname, words, slop=self.slop,
  204:         return q
  207:         return compound.And([terms.Term(self.fieldname, word)
  211:         return self._and_query().estimate_size(ixreader)
  214:         return self._and_query().estimate_min_size(ixreader)
  221:             return matching.NullMatcher()
  235:                 return matching.NullMatcher()
  239:                 return matching.NullMatcher()
  249:         return m

PythonVenv\Lib\site-packages\whoosh\query\qcolumns.py:
   45:             in the column, and for documents where callable(docvalue) returns
   46:             True are returned as matching documents. If this is not a callable,
   54:         return True
   65:                 return v == condition
   69:             return NullMatcher()
   72:         return ColumnMatcher(creader, comp)
   90:         return self._i < len(self.creader)
  103:         return self._i
  112:         return False
  117:             return True

PythonVenv\Lib\site-packages\whoosh\query\qcore.py:
   49:     """Returns the query in the second argument (or a :class:`NullQuery` if the
   57:     return q
   61:     """Returns the terms in the query tree, with the query hierarchy
   68:             return list(q.tokens())
   77:         return ls
   89:             return 0
   90:         return -1
   93:         return self.__class__ is type(other)
   96:         return type(other) is not self.__class__
   99:         return not self.__eq__(other)
  102:         return not (self.__lt__(other) or self.__eq__(other))
  105:         return self.__eq__(other) or self.__lt__(other)
  108:         return self.__eq__(other) or self.__gt__(other)
  118:             return 0
  119:         return 1
  122:         return self.__class__ is type(other)
  125:         return type(other) is self.__class__
  128:         return not self.__eq__(other)
  131:         return not (self.__lt__(other) or self.__eq__(other))
  134:         return self.__eq__(other) or self.__lt__(other)
  137:         return self.__eq__(other) or self.__gt__(other)
  181:         return Or([self, query]).normalize()
  189:         return And([self, query]).normalize()
  197:         return And([self, Not(query)]).normalize()
  203:         return not self.__eq__(other)
  206:         """Returns True if this is a leaf node in the query tree, or False if
  210:         return True
  213:         """Returns an iterator of the subqueries of this object.
  216:         return iter([])
  219:         """Returns True if this object searches for values within a range.
  222:         return False
  225:         """Returns True if this specific object represents a search for a
  231:         return False
  236:                 return True
  237:         return False
  241:         and returns a new copy of this node with the new children returned by
  242:         the function. If this is a leaf node, simply returns this object.
  250:                     return Variations(q.fieldname, q.text)
  252:                     return q.apply(term2var)
  264:         return self
  273:                 return q
  287:             return fn(q)
  289:         return fn_wrapper(self)
  292:         """Returns a copy of this query with oldtext replaced by newtext (if
  295:         Note that this returns a *new* query with the given text replaced. It
  302:             return copy.copy(self)
  304:             return self.apply(methodcaller("replace", fieldname, oldtext,
  311:         return copy.deepcopy(self)
  314:         """Returns a set of all terms in this query tree.
  323:         return set(self.iter_all_terms(phrases=phrases))
  333:         return iter(())
  336:         return self.terms(phrases=phrases)
  339:         """Returns a set of all byteterms in this query tree that exist in
  345:             will return all matching expansions.
  375:         return termset
  378:         """Returns an iterator of all the leaf queries in this query tree as a
  390:         """Returns an iterator of (fieldname, text) pairs for all terms in
  416:         """Returns an iterator of :class:`analysis.Token` objects corresponding
  450:         return iter(())
  453:         """Returns a set of queries that are *known* to be required to match
  472:         return set([self])
  475:         """Returns the field this query matches in, or None if this query does
  479:         return self.fieldname
  482:         """Returns a COPY of this query with the boost set to the given value.
  490:         return q
  493:         """Returns an estimate of how many documents this query could
  501:         """Returns an estimate of the minimum number of documents this query
  505:         return self.estimate_size(ixreader)
  508:         """Returns a :class:`~whoosh.matching.Matcher` object you can use to
  517:         """Returns an iterator of docnums matching this query.
  528:             return self.matcher(searcher, context).all_ids()
  530:             return iter([])
  533:         """Returns an iterator of docnums matching this query for the purpose
  541:         return self.docs(searcher)
  544:         """Returns a recursively "normalized" form of this query. The
  556:         Note that this returns a *new, normalized* query. It *does not* modify
  559:         return self
  562:         """Returns a recursively simplified form of this query, where
  566:         return self
  580:         return u("<_NullQuery>")
  583:         return self
  586:         return "<%s>" % (self.__class__.__name__)
  589:         return isinstance(other, _NullQuery)
  592:         return not self.__eq__(other)
  595:         return id(self)
  598:         return self
  601:         return self
  604:         return None
  607:         return 0
  610:         return self
  613:         return self
  616:         return []
  619:         return matching.NullMatcher()
  679:         return "%s(%r, boost=%s)" % (self.__class__.__name__, self.fieldname,
  683:         return (other and self.__class__ is other.__class__
  688:         return u("%s:*") % self.fieldname
  693:         return hash(self.fieldname)
  696:         return ixreader.doc_count()
  715:         return matching.ListMatcher(doclist, all_weights=self.boost)

PythonVenv\Lib\site-packages\whoosh\query\ranges.py:
   39:         return ('%s(%r, %r, %r, %s, %s, boost=%s, constantscore=%s)'
   49:         return u("%s:%s%s TO %s%s") % (self.fieldname, startchar, start, end,
   55:         return (other and self.__class__ is other.__class__
   64:         return (hash(self.fieldname) ^ hash(self.start) ^ hash(self.startexcl)
   68:         return True
   72:             return (qcore.Lowest, 0)
   75:             return (self.start, second)
   79:             return (qcore.Highest, 0)
   82:             return (self.end, second)
   86:             return False
   88:             return False
   95:         return ((start1 >= start2 and start1 <= end2)
  129:         return self.__class__(self.fieldname, startval, endval, startexcl,
  167:             return Every(self.fieldname, boost=self.boost)
  170:                 return qcore.NullQuery
  171:             return terms.Term(self.fieldname, self.start, boost=self.boost)
  173:             return TermRange(self.fieldname, self.start, self.end,
  184:     #    return q
  198:                 return
  206:                 return
  243:         :param constantscore: If True, the compiled query returns a constant
  259:         return self._compile_query(ixreader).simplify(ixreader)
  262:         return self._compile_query(ixreader).estimate_size(ixreader)
  265:         return self._compile_query(ixreader).estimate_min_size(ixreader)
  269:         return q.docs(searcher)
  307:             return qcore.NullQuery
  311:         return q
  315:         return q.matcher(searcher, context)
  343:         return '%s(%r, %r, %r, %s, %s, boost=%s)' % (self.__class__.__name__,

PythonVenv\Lib\site-packages\whoosh\query\spans.py:
   69:             return "<%d-%d %d:%d>" % (self.start, self.end, self.startchar,
   72:             return "<%d-%d>" % (self.start, self.end)
   75:         return (self.start == span.start
   81:         return self.start != span.start or self.end != span.end
   84:         return self.start < span.start
   87:         return self.start > span.start
   90:         return hash((self.start, self.end))
  119:         return spans
  137:         return self.__class__(minpos, maxpos, minchar, maxchar)
  140:         return ((self.start >= span.start and self.start <= span.end)
  146:         return self.start < span.start and self.end > span.end
  149:         return self.start >= span.start and self.end <= span.end
  152:         return self.end < span.start
  155:         return self.start > span.end
  158:         return self.start == span.end + 1 or self.end == span.start - 1
  162:             return 0
  164:             return span.start - self.end
  166:             return self.start - span.end
  178:     return lo
  186:     matching spans, i.e. where ``_get_spans()`` returns a non-empty list.
  188:     Subclasses must implement the ``_get_spans()`` method, which returns a list
  201:         return m
  204:         return self.__class__(newchild)
  208:             return
  217:                 return True
  221:         return r
  224:         return self._spans
  243:         return self.__class__(self.a.copy(), self.b.copy())
  246:         return 1 + max(self.a.depth(), self.b.depth())
  251:             return mcore.NullMatcher()
  252:         return self
  265:     wrapped query, and ``matcher()`` to return a span-aware matcher object.
  269:         return self.q.matcher(s, context)
  272:         return "%s(%r)" % (self.__class__.__name__, self.q)
  275:         return (other and self.__class__ is other.__class__
  279:         return hash(self.__class__.__name__) ^ hash(self.q)
  282:         return None
  285:         return True
  290:         return False
  293:         return self.__class__(fn(self.q), limit=self.limit)
  296:         return self.q.field()
  316:         return (other and self.__class__ is other.__class__
  320:         return hash(self.q) ^ hash(self.limit)
  324:         return SpanFirst.SpanFirstMatcher(m, limit=self.limit)
  332:             return self.__class__(self.child.copy(), limit=self.limit)
  335:             return self.__class__(newchild, limit=self.limit)
  338:             return [span for span in self.child.spans()
  397:         return ("%s(%r, slop=%d, ordered=%s, mindist=%d)"
  402:         return (other and self.__class__ == other.__class__
  408:         return (hash(self.a) ^ hash(self.b) ^ hash(self.slop)
  412:         return False
  415:         return self.__class__(fn(self.a), fn(self.b), slop=self.slop,
  421:         return SpanNear.SpanNearMatcher(ma, mb, slop=self.slop,
  427:         """Returns a tree of SpanNear queries to match a list of terms.
  443:         return make_binary_tree(cls, terms, slop=slop, ordered=ordered)
  456:             return self.__class__(self.a.copy(), self.b.copy(), slop=self.slop,
  462:                 return mcore.NullMatcher()
  463:             return self
  490:             return sorted(spans)
  540:         return ("%s(%r, slop=%d, ordered=%s, mindist=%d)"
  545:         return (other and self.__class__ == other.__class__
  554:         return h
  557:         return q.And(self.qs)
  560:         return self._and_query().estimate_size(ixreader)
  563:         return self._and_query().estimate_min_size(ixreader)
  566:         return False
  569:         return self.qs
  572:         return self.__class__([fn(q) for q in self.qs], slop=self.slop,
  577:         return self.SpanNear2Matcher(ms, slop=self.slop, ordered=self.ordered,
  590:             return self.__class__([m.copy() for m in self.ms], slop=self.slop,
  596:                 return mcore.NullMatcher()
  597:             return self
  642:                 return aspans
  644:                 return []
  662:         return False
  665:         return self.__class__([fn(sq) for sq in self.subqs])
  669:         return make_binary_tree(SpanOr.SpanOrMatcher, matchers)
  699:             return spans
  706:         return False
  709:         return self.__class__(fn(self.a), fn(self.b))
  714:         return self._Matcher(ma, mb)
  762:                 return spans
  764:                 return self.a.spans()
  812:             return spans
  847:             return [aspan for aspan in self.a.spans() if aspan.end < bminstart]
  855:     those conditions affect the spans returned.
  876:             return self.a.spans()

PythonVenv\Lib\site-packages\whoosh\query\terms.py:
   56:         return (other
   67:         return r
   80:         return t
   85:         return hash(self.fieldname) ^ hash(self.text) ^ hash(self.boost)
   88:         return True
  103:         return q
  108:             return 0
  114:             return 0
  116:         return ixreader.doc_frequency(fieldname, text)
  122:             return matching.NullMatcher()
  128:             return matching.NullMatcher()
  141:             return m
  143:             return matching.NullMatcher()
  178:             return qcore.NullQuery()
  187:             return existing[0]
  190:             return Or(existing)
  192:             return qcore.NullQuery
  196:         return sum(ixreader.doc_frequency(fieldname, btext)
  201:         return min(ixreader.doc_frequency(fieldname, text)
  214:             return matching.NullMatcher()
  230:         return m
  246:         return (other and self.__class__ is other.__class__
  256:         return r
  259:         return (hash(self.fieldname) ^ hash(self.text) ^ hash(self.boost)
  273:         return text[:i]
  300:         return "%s:%s*" % (self.fieldname, self.text)
  305:         return ixreader.expand_prefix(self.fieldname, self.text)
  311:             return eq.matcher(searcher, context)
  313:             return PatternQuery.matcher(self, searcher, context)
  326:         return "%s:%s" % (self.fieldname, self.text)
  331:         return fnmatch.translate(self.text)
  339:             return Every(self.fieldname, boost=self.boost)
  342:             return Term(self.fieldname, self.text, boost=self.boost)
  347:             return Prefix(self.fieldname, self.text[:-1], boost=self.boost)
  349:             return self
  355:             return eq.matcher(searcher, context)
  357:             return PatternQuery.matcher(self, searcher, context)
  371:         return '%s:r"%s"' % (self.fieldname, self.text)
  376:         return self.text
  380:             return ""
  395:         return prefix
  401:             return eq.matcher(searcher, context)
  403:             return PatternQuery.matcher(self, searcher, context)
  414:         return True
  450:         return (other and self.__class__ is other.__class__
  460:         return r % (self.__class__.__name__, self.fieldname, self.text,
  469:         return r
  474:         return (hash(self.fieldname) ^ hash(self.text) ^ hash(self.boost)
  479:         return ixreader.terms_within(self.fieldname, self.text, self.maxdist,
  486:         return q
  504:         return r
  507:         return (other and self.__class__ is other.__class__
  512:         return hash(self.fieldname) ^ hash(self.text) ^ hash(self.boost)
  527:         return u("%s:<%s>") % (self.fieldname, self.text)
  535:         return q

PythonVenv\Lib\site-packages\whoosh\query\wrappers.py:
   41:         return "%s(%r)" % (self.__class__.__name__, self.child)
   44:         return hash(self.__class__.__name__) ^ hash(self.child)
   47:         return self.__class__(child)
   50:         return False
   56:         return self._rewrap(fn(self.child))
   59:         return self.child.requires()
   62:         return self.child.field()
   65:         return self._rewrap(self.child.with_boost(boost))
   68:         return self.child.estimate_size(ixreader)
   71:         return self.child.estimate_min_size(ixreader)
   74:         return self.child.matcher(searcher, context)
  102:         return other and self.__class__ is other.__class__ and\
  106:         return "%s(%s)" % (self.__class__.__name__, repr(self.query))
  109:         return u("NOT ") + text_type(self.query)
  114:         return (hash(self.__class__.__name__)
  119:         return False
  125:         return self.__class__(fn(self.query))
  130:             return q
  132:             return self.__class__(q, boost=self.boost)
  135:         return None
  138:         return ixreader.doc_count()
  141:         return 1 if ixreader.doc_count() else 0
  148:         return matching.InverseMatcher(child, reader.doc_count_all(),
  164:         return (other and self.__class__ is other.__class__
  168:         return hash(self.child) ^ hash(self.score)
  171:         return self.__class__(child, self.score)
  179:             return m
  182:             return matching.ListMatcher(ids, all_weights=self.score,
  198:         return self.child.matcher(searcher, context)

PythonVenv\Lib\site-packages\whoosh\support\base85.py:
   35:     return rems
   44:     return acc
   66:         return out
   73:     return out[0:olen]
  103:     return out

PythonVenv\Lib\site-packages\whoosh\support\bench.py:
   66:         return self.__class__.__name__
   82:             return method(d)
   85:             return d
  179:         return self.parser.parse(qstring)
  182:         return self.srch.search(q, limit=int(self.options.limit),
  199:         return conn
  218:         return xappy.SearchConnection(path)
  221:         return conn.query_parse(" ".join(self.args))
  224:         return conn.search(q, 0, int(self.options.limit))
  268:         return self.qp.parse_query(" ".join(self.args))
  272:         return self.enq.get_mset(0, int(self.options.limit))
  312:         return " ".join(self.args)
  315:         return self.solr.search(q, limit=int(self.options.limit))
  380:         return " ".join(self.args)
  383:         return self.cat.searchResults(body=q)
  440:         return " ".join(self.args)
  443:         return self.archive.dictionaries(q)
  585:         return p

PythonVenv\Lib\site-packages\whoosh\support\charset.py:
  1294:         return int(string[2:], 16)
  1296:         return ord(string)
  1303:     returns a mapping object (a defaultdict, actually) of the kind expected by
  1379:     return dict(map)

PythonVenv\Lib\site-packages\whoosh\support\levenshtein.py:
   9:     """Returns the Levenshtein edit distance between two strings.
  26:             return limit + 1
  28:     return thisrow[len(seq2) - 1]
  32:     """Returns the Damerau-Levenshtein edit distance between two strings.
  53:             return limit + 1
  55:     return thisrow[len(seq2) - 1]
  59:     """Returns the relative distance between two strings, in the range
  67:     return r

PythonVenv\Lib\site-packages\whoosh\support\relativedelta.py:
   25:             return self
   27:             return self.__class__(self.weekday, n)
   32:                 return False
   34:             return False
   35:         return True
   40:             return s
   42:             return "%s(%+d)" % (s, self.n)
  289:         return ret
  292:         return self.__neg__().__radd__(other)
  297:         return relativedelta(years=other.years + self.years,
  317:         return relativedelta(years=other.years - self.years,
  335:         return relativedelta(years= -self.years,
  353:         return not (not self.years and
  374:         return relativedelta(years=self.years * f,
  393:             return False
  396:                 return False
  398:                 return False
  401:                 return False
  402:         return (self.years == other.years and
  418:         return not self.__eq__(other)
  421:         return self.__mul__(1 / float(other))
  435:         return "%s(%s)" % (self.__class__.__name__, ", ".join(l))

PythonVenv\Lib\site-packages\whoosh\support\unicode.py:
  239:     """Return the Unicode block name for ch, or None if ch has no block.
  254:         return None
  255:     return _names[i]
  259:     """Returns the unicode block number for ch, or None if ch has no block.
  273:         return None
  274:     return i

PythonVenv\Lib\site-packages\whoosh\util\__init__.py:
   49:     return "".join(random.choice(IDCHARS) for _ in xrange(size))
   55:         return bytes(gen)
   57:         return array("B", gen).tostring()
   62:     arguments and returns a binary tree of results/instances.
   75:         return args[0]
   78:     return fn(make_binary_tree(fn, args[:half], **kwargs),
   84:     (weight, argument) tuples and returns a huffman-like weighted tree of
   96:     return ls[0][1]
  105:     """Returns the nth value in the Fibonacci sequence.
  109:         return n
  111:         return _fib_cache[n]
  114:     return result
  127:             return func(self, *args, **kwargs)
  129:     return synchronized_wrapper
  141:         return method(self, *args, **kwargs)
  142:     return unclosed_wrapper

PythonVenv\Lib\site-packages\whoosh\util\cache.py:
   44:             return 0
   56:             return cache[args]
   60:             return result
   62:     return caching_wrapper
  101:             return result
  104:             return stats[0], stats[1], maxsize, len(data)
  113:         return wrapper
  114:     return decorating_function
  153:             return result
  156:             return stats[0], stats[1], maxsize, len(data)
  164:         return wrapper
  165:     return decorating_function
  201:             return result
  204:             return stats[0], stats[1], maxsize, len(data)
  211:         return wrapper
  212:     return decorating_function
  244:                 return a[key]
  247:                 return b[key]
  255:                 return result
  258:             return stats[3], stats[4], maxsize, len(stats[0]) + len(stats[1])
  269:         return wrapper
  270:     return decorating_function
  345:                 return result
  358:                 return result
  361:             return stats[0], stats[1], maxsize, len(data)
  373:         return wrapper
  374:     return decorating_function

PythonVenv\Lib\site-packages\whoosh\util\filelock.py:
   43:     """Calls ``fn`` every ``delay`` seconds until it returns True or
   44:     ``timeout`` seconds elapse. Returns True if the lock was acquired, or False
   48:         lock. 0 means return immediately. Only used when blocking is False.
   58:     return v
   78:         """Acquire the lock. Returns True if the lock was acquired.
  107:             return True
  114:             return False
  141:             return True
  148:             return False

PythonVenv\Lib\site-packages\whoosh\util\loading.py:
  52:         return obj
  56:     """Imports and returns an object given a fully qualified name.
  84:     return cls

PythonVenv\Lib\site-packages\whoosh\util\numeric.py:
   59:     """Returns the number of bits required to represent the given (unsigned)
   63:     return max(1, math.ceil(math.log(maxnum, 2)))
   68:         return "B"
   70:         return "H"
   72:         return "i"
   74:         return "I"
   76:         return "q"
   78:         return "Q"
   82:     """Returns the maximum (unsigned) integer representable in the given number
   86:     return ~(~0 << bitcount)
   91:     return r
  108:         return x
  110:         return float_to_sortable_long(x, signed)
  117:         return x
  119:         return sortable_long_to_float(x, signed)
  129:     return x
  138:     return x
  202:         return ((start, end, 0),)
  205:     return split_ranges(intsize, shift_step, start, end)
  231:     return b(result)
  240:         return 0.0
  244:     return unpack("f", pack("i", bits))[0]
  252: #    """Returns a logarithmic approximation of the given number, in the range
  262: #    # equal to or greater than that limit, just return 255.
  264: #        return 255
  269: #    return int(round(log((length / 27.0) + 1, 1.033)))
  271: #    return int(round((pow(1.033, n) - 1) * 27))
  311:         return 0
  313:         return 255
  315:         return bisect_left(_length_byte_cache, length)

PythonVenv\Lib\site-packages\whoosh\util\numlists.py:
   30:         return "%s(%r)" % (self.__class__.__name__, self.array)
   33:         return len(self.array)
   36:         return iter(self.array)
   70:             return self.array.typecode
   72:             return "q"
   95:         return self.write_nums(f, list(delta_encode(numbers)))
   98:         return delta_decode(self.read_nums(f, n))
  105:         return n
  129:         return self._decode(f.read(self.size))
  233:                 return value, num
  276:         return value & (2 ** self._bits[key][offset] - 1)
  303:         """Returns a list of the sizes of the next four numbers given a key
  307:         return [(key >> (i * 2) & 3) + 1 for i in xrange(4)]
  373: #        return n

PythonVenv\Lib\site-packages\whoosh\util\testing.py:
   53:         return self.dir
   73:                 return False
   87:         return self.store
   98:         return fstore.create_index(self.schema, indexname=self.basename)
  102:     """Returns True if the given object has __isabstractmethod__ == True.
  105:     return (hasattr(attr, "__isabstractmethod__")

PythonVenv\Lib\site-packages\whoosh\util\text.py:
   33: # Note: these functions return a tuple of (text, length), so when you call
   44:     Returns the position of the first differing character in the sequences a
   46:     limits the return value to 255 so the difference can be encoded in a single
   53:     return i
   63:     return byte(i) + b[i:]
   99:         return int(i)
  101:         return i.lower()
  117:     return tuple(_nkconv(m) for m in _nkre.findall(s))
  129:         return pattern
  132:     return re.compile(pattern, re.UNICODE | flags)

PythonVenv\Lib\site-packages\whoosh\util\times.py:
   40:     """Returns the number of days (positive or negative) to the "next" or
   55:         return 7 * dir
   58:         return (wday + 7 - current_wday) % 7
   60:         return (current_wday + 7 - wday) % 7 * -1
   67:     return total
   75:     return timedelta_to_usecs(dt.replace(tzinfo=None) - dt.min)
   89:     return datetime.min + timedelta(days=days, seconds=seconds, microseconds=x)
  137:                 return fix(self) == other
  139:                 return False
  140:         return all(getattr(self, unit) == getattr(other, unit)
  144:         return "%s%r" % (self.__class__.__name__, self.tuple())
  147:         """Returns the attributes of the ``adatetime`` object as a tuple of
  151:         return (self.year, self.month, self.day, self.hour, self.minute,
  155:         return date(self.year, self.month, self.day)
  158:         return adatetime(year=self.year, month=self.month, day=self.day,
  163:         """Returns a copy of this object with the attributes given as keyword
  177:         return newadatetime
  180:         """Returns a ``datetime`` version of this object with all unspecified
  208:         return datetime(y, m, d, h, mn, s, ms)
  211:         """Returns a ``datetime`` version of this object with all unspecified
  239:         return datetime(y, m, d, h, mn, s, ms)
  242:         """Returns either a ``datetime`` or unambiguous ``timespan`` version
  246:         microsecond, this method will return a timespan built from the "floor"
  258:             return fix(dt)
  259:         return timespan(dt, dt).disambiguated(basedate)
  286:             return False
  287:         return self.start == other.start and self.end == other.end
  290:         return "%s(%r, %r)" % (self.__class__.__name__, self.start, self.end)
  293:         """Returns an unambiguous version of this object.
  381:         return timespan(start, end)
  388:         return at
  389:     return at.floor()
  394:         return at
  395:     return at.ceil()
  399:     """Returns a copy of ``at`` with any unspecified (None) units filled in
  404:         return at
  412:     return fix(adatetime(**args))
  416:     """Returns True if the given object is an ``adatetime`` where ``year``,
  421:         return False
  422:     return at.year is None and at.month is None and at.day is None
  426:     """Returns True if the given object is an ``adatetime`` where ``hour``,
  431:         return False
  432:     return (at.hour is None and at.minute is None and at.second is None
  437:     """Returns True if the given object is an ``adatetime`` with any of its
  442:         return False
  443:     return any((getattr(at, attr) is None) for attr in adatetime.units)
  447:     """Returns True if the given object is an ``adatetime`` with all of its
  452:         return False
  453:     return all((getattr(at, attr) is None) for attr in adatetime.units)
  458:     all its attributes are specified, that is, not equal to None), returns a
  459:     ``datetime`` version of it. Otherwise returns the ``adatetime`` object
  464:         return at
  465:     return datetime(year=at.year, month=at.month, day=at.day, hour=at.hour,

PythonVenv\Lib\site-packages\whoosh\util\varints.py:
   45:     return array_tobytes(a)
   59:         return _varint_cache[i]
   60:     return _varint(i)
   73:     return i
   81:         return varint(i << 1)
   82:     return varint((i << 1) ^ (~0))
   90:         return i >> 1
   91:     return (i >> 1) ^ (~0)
  110:     return i

PythonVenv\Lib\site-packages\whoosh\util\versions.py:
   42:         return obj
   46:         return "%s(%s)" % (self.__class__.__name__, vs)
   49:         return tuple(getattr(self, slot) for slot in self.__slots__)
   54:         return self.tuple() == other.tuple()
   59:         return self.tuple() < other.tuple()
   66:         return self.tuple() > other.tuple()
   71:         return self.tuple() >= other.tuple()
   76:         return self.tuple() <= other.tuple()
   81:         return self.tuple() != other.tuple()
  154:         return n
  165:         return cls(major, minor, release, ex, exnum)

PythonVenv\Lib\site-packages\whyhow\apis\graph.py:
   90:         return response.message
  140:         return json.dumps(
  168:         return response.message
  201:         return response.message
  238:         return response.message
  257:         Returns
  278:         # retval = QueryGraphReturn(answer=response.answer)
  280:         return response
  304:         Returns
  329:         return response

PythonVenv\Lib\site-packages\whyhow\schemas\base.py:
   1: """Base classes for request, response, and return schemas."""
  24: class BaseReturn(BaseModel, ABC):
  25:     """Base class for return schemas."""

PythonVenv\Lib\site-packages\whyhow\schemas\common.py:
   55:         return data
   74:         return Node(labels=[self.label], properties=properties)
   85:         return cls(
  112:         return Relationship(
  130:         return cls(
  174:         """Return an entity by name if it exists in the schema."""
  177:                 return entity
  178:         return None  # Return None if no entity with that name is found
  181:         """Return a relation by name if it exists in the schema."""
  184:                 return relation
  185:         return None  # Return None if no relation with that name is found

PythonVenv\Lib\site-packages\whyhow\schemas\graph.py:
   5: from whyhow.schemas.base import BaseRequest, BaseResponse, BaseReturn
  83: class QueryGraphReturn(BaseReturn):
  84:     """Schema for the return value of the query graph endpoint."""

PythonVenv\Lib\site-packages\win10toast\__init__.py:
  115:         return None
  131:                 return False
  135:         return True
  141:             return True
  142:         return False
  156:         return None

PythonVenv\Lib\site-packages\win32\Demos\BackupSeek_streamheaders.py:
  104:     return (

PythonVenv\Lib\site-packages\win32\Demos\cerapi.py:
   23:         return 0
   27:     return 1
  190:         return

PythonVenv\Lib\site-packages\win32\Demos\CopyFileEx.py:
  28:     ##    return win32file.PROGRESS_STOP
  29:     return win32file.PROGRESS_CONTINUE

PythonVenv\Lib\site-packages\win32\Demos\desktopmanager.py:
  149:         return
  198:             win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY,
  219:         return 0
  221:         return win32gui.DefWindowProc(hwnd, msg, wp, lp)

PythonVenv\Lib\site-packages\win32\Demos\eventLogDemo.py:
   77:         return
   92:         return 1
  100:             return

PythonVenv\Lib\site-packages\win32\Demos\EvtSubscribe_push.py:
  15:     return 0

PythonVenv\Lib\site-packages\win32\Demos\getfilever.py:
  21: ## backslash as parm returns dictionary of numeric info corresponding to VS_FIXEDFILEINFO struc
  26: ## \VarFileInfo\Translation returns list of available (language, codepage) pairs that can be used to retreive string info
  27: ## any other must be of the form \StringfileInfo\%04X%04X\parm_name, middle two are language/codepage pair returned from above

PythonVenv\Lib\site-packages\win32\Demos\NetValidatePasswordPolicy.py:
    6: which might return:
   22: which always (with and without '-m') seems to return:
   79:         help="Print the NET_VALIDATE_PERSISTED_FIELDS returned",
  109:             return 1
  112:             return 1
  123:     return 0

PythonVenv\Lib\site-packages\win32\Demos\OpenEncryptedFileRaw.py:
  12:     ## python 2.3 throws an error if return value is a plain int
  13:     return winerror.ERROR_SUCCESS
  19:     ## returning 0 as len terminates WriteEncryptedFileRaw
  22:     return winerror.ERROR_SUCCESS, output_len

PythonVenv\Lib\site-packages\win32\Demos\rastest.py:
   59:     return None
   99:     return hras, rc
  139:         return
  151:         return

PythonVenv\Lib\site-packages\win32\Demos\win32clipboard_bitmapdemo.py:
  57:         return 0

PythonVenv\Lib\site-packages\win32\Demos\win32clipboardDemo.py:
  114:         return cmp(self.__dict__, other.__dict__)
  117:         return self.__dict__ == other.__dict__

PythonVenv\Lib\site-packages\win32\Demos\win32comport_demo.py:
  40:             # just return 0 for the status flags.  We only care that it has _any_ status
  43:                 return port
  46:     return None

PythonVenv\Lib\site-packages\win32\Demos\win32gui_demo.py:
   62:     return 0
  103:     return 0

PythonVenv\Lib\site-packages\win32\Demos\win32gui_devicenotify.py:
  35:     return True

PythonVenv\Lib\site-packages\win32\Demos\win32gui_dialog.py:
   97:         return struct.pack(*(full_fmt,) + tuple(vals))
  160:         return className
  213:         return dlg
  228:         return fn(self.hinst, template, 0, message_map)
  363:         return 1
  380:         return 1
  438:         return self._DoCreate(win32gui.DialogBoxIndirect)

PythonVenv\Lib\site-packages\win32\Demos\win32gui_menu.py:
  195:         # "GetSysColorBrush returns a cached brush instead of allocating a new
  261:         return 1
  344:         return True
  407:             # Return the text and background colors to their

PythonVenv\Lib\site-packages\win32\Demos\win32gui_taskbar.py:
  118:         return 1

PythonVenv\Lib\site-packages\win32\Demos\win32rcparser_demo.py:
  28:         return self._DoCreate(win32gui.DialogBoxIndirect)
  37:         return fn(0, self.dlg_template, 0, message_map)

PythonVenv\Lib\site-packages\win32\Demos\winprocess.py:
    4: winprocess.run launches a child process and returns the exit code.
   30:     Login as specified user and return handle.
   36:     return win32security.LogonUser(
  135:         return win32event.WaitForSingleObject(self.hProcess, mSec)
  158:         Return process exit code.
  160:         return win32process.GetExitCodeProcess(self.hProcess)
  165:     Run cmd as a child process and return exit code.
  183:     return child.exitCode()

PythonVenv\Lib\site-packages\win32\Demos\dde\ddeserver.py:
  32:         return str(len(aString))

PythonVenv\Lib\site-packages\win32\Demos\security\GetTokenInformation.py:
   71:         return None
  102:     return lt

PythonVenv\Lib\site-packages\win32\Demos\security\localized_names.py:
  23:     return name
  48:     return name

PythonVenv\Lib\site-packages\win32\Demos\security\query_information.py:
  21:     return dom

PythonVenv\Lib\site-packages\win32\Demos\security\security_enums.py:
   30:                 return k
   34:         """Returns the names of all recognized flags in input, and any flags not found in the enum."""
   41:         return flag_names, unknown_flags
  330: # Privilege flags returned by TokenPrivileges

PythonVenv\Lib\site-packages\win32\Demos\security\sspi\simple_auth.py:
  14:             return k

PythonVenv\Lib\site-packages\win32\Demos\security\sspi\socket_server.py:
  38:         return win32api.GetUserName()
  44:         # So just return the repr(), and avoid codecs completely.
  45:         return repr(win32api.GetUserNameEx(win32api.NameSamCompatible))
  58:         return None
  60:     return s.recv(cb)
  74:                 return False
  79:                 return False
  84:         return True

PythonVenv\Lib\site-packages\win32\Demos\service\pipeTestService.py:
   35:         return fn(*args)
   37:         return None
   68:         return sa
  114:                     return self.DoProcessClient(pipeHandle, th)

PythonVenv\Lib\site-packages\win32\Demos\service\pipeTestServiceClient.py:
   43:             return fn(*args)
  145:         return

PythonVenv\Lib\site-packages\win32\Demos\service\serviceEvents.py:
  55:         return rc

PythonVenv\Lib\site-packages\win32\Demos\win32wnet\testwnet.py:
  67:             return maybe
  74:         return

PythonVenv\Lib\site-packages\win32\include\PyWinTypes.h:
   29: // (Regardless, *some*, eg, PYWIN_MODULE_INIT_RETURN_* should be re-inlined!)
   35: #define PYWIN_MODULE_INIT_RETURN_ERROR return NULL;
   38: #define PYWIN_MODULE_INIT_RETURN_SUCCESS return module;
   45:         return NULL;                                                                                        \
   47:         return NULL;                                                                                        \
   49:         return NULL;
  128:     return val <= MAXDWORD;
  134:         return failResult; \
  155:     return PyWinObject_AsWCHAR(stringObject, (WCHAR **)pResult, bNoneOK, pResultLen);
  178:     WCHAR *u2w() { return *this = u; }
  186:         return tmp;
  193:         return t;
  195:     WCHAR **operator&() { return &tmp; }
  196:     boolean operator==(WCHAR *t) { return tmp == t; }
  197:     operator WCHAR *() { return tmp; }
  237:                                                     DWORD *chars_returned = NULL);
  266:     bool ok() { return m_view.obj != NULL; }
  267:     void* ptr() { return m_view.buf; }
  268:     DWORD len() { return static_cast<DWORD>(m_view.len); }
  307: inline PyObject *PyWinObject_FromULONG_PTR(ULONG_PTR v) { return PyWinLong_FromVoidPtr((void *)v); }
  308: inline BOOL PyWinLong_AsULONG_PTR(PyObject *ob, ULONG_PTR *r) { return PyWinLong_AsVoidPtr(ob, (void **)r); }
  310: inline PyObject *PyWinObject_FromDWORD_PTR(DWORD_PTR v) { return PyLong_FromVoidPtr((void *)v); }
  311: inline BOOL PyWinLong_AsDWORD_PTR(PyObject *ob, DWORD_PTR *r) { return PyWinLong_AsVoidPtr(ob, (void **)r); }
  337: // return a native PyIID object representing an IID
  340: // return a string/Unicode object representing an IID
  374: // functions to return WIN32_FIND_DATA tuples, used in shell, win32api, and win32file
  422:         return t;
  429:             return false;
  432:         return true;
  436:         return _pa = t;
  438:     operator WPARAM() { return _pa; }
  439:     operator LPARAM() { return (LPARAM)_pa; }
  443: inline PyObject *PyWinObject_FromPARAM(WPARAM param) { return PyWinObject_FromULONG_PTR(param); }
  444: inline PyObject *PyWinObject_FromPARAM(LPARAM param) { return PyWinObject_FromULONG_PTR(param); }
  447: inline BOOL PyWinObject_AsSimplePARAM(PyObject *ob, LPARAM *pparam) { return PyWinObject_AsSimplePARAM(ob, (WPARAM *)pparam); }
  521: // For handles that aren't returned as PyHANDLE or a subclass thereof (HDC, HWND, etc).
  522: // Return as python ints or longs
  552:      // [out] Returned socket handle
  575:     operator BSTR() { return m_bstr; }
  585:         return TRUE;
  589:         return FALSE;
  591:     return TRUE;
  675:             return;
  719:         return tmp;
  722:     boolean operator==(PyObject *ob) { return tmp == ob; }
  723:     operator PyObject *() { return tmp; }

PythonVenv\Lib\site-packages\win32\lib\afxres.py:
  59:     return 1 << (nIDC - AFX_IDW_CONTROLBAR_FIRST)

PythonVenv\Lib\site-packages\win32\lib\commctrl.py:
    70: NM_RETURN = NM_FIRST - 4
   530: )  # returns in lparam = lprc the amount of edges added to band wparam
   778: )  # wParam = return (TRUE ? low : high). lParam = PPBRANGE or NULL
  1273: CBENF_RETURN = 2
  1547:     return i << 8
  1551:     return i << 12

PythonVenv\Lib\site-packages\win32\lib\dbi.py:
  4: Dates are now returned as datetime.datetime objects, but will still accept PyTime

PythonVenv\Lib\site-packages\win32\lib\mmsystem.py:
  221:     return (BYTE)(((x) >> 24) & 0xFF)
  225:     return (DWORD)((x) & 0x00FFFFFF)
  463: JOY_RETURNX = 0x00000001
  464: JOY_RETURNY = 0x00000002
  465: JOY_RETURNZ = 0x00000004
  466: JOY_RETURNR = 0x00000008
  467: JOY_RETURNU = 0x00000010
  468: JOY_RETURNV = 0x00000020
  469: JOY_RETURNPOV = 0x00000040
  470: JOY_RETURNBUTTONS = 0x00000080
  471: JOY_RETURNRAWDATA = 0x00000100
  472: JOY_RETURNPOVCTS = 0x00000200
  473: JOY_RETURNCENTERED = 0x00000400
  475: JOY_RETURNALL = (
  476:     JOY_RETURNX
  477:     | JOY_RETURNY
  478:     | JOY_RETURNZ
  479:     | JOY_RETURNR
  480:     | JOY_RETURNU
  481:     | JOY_RETURNV
  482:     | JOY_RETURNPOV
  483:     | JOY_RETURNBUTTONS
  711:     return (BYTE)(msf)
  715:     return (BYTE)(((WORD)(msf)) >> 8)
  719:     return (BYTE)((msf) >> 16)
  723:     return (BYTE)(tmsf)
  727:     return (BYTE)(((WORD)(tmsf)) >> 8)
  731:     return (BYTE)((tmsf) >> 16)
  735:     return (BYTE)((tmsf) >> 24)
  739:     return (BYTE)(hms)
  743:     return (BYTE)(((WORD)(hms)) >> 8)
  747:     return (BYTE)((hms) >> 16)
  954:     return MAKELONG((n), 0x10FF)

PythonVenv\Lib\site-packages\win32\lib\netbios.py:
  188:         return win32wnet.Netbios(ncb)
  238:     return NCBStruct(ADAPTER_STATUS_ITEMS)
  242:     return NCBStruct(NAME_BUFFER_ITEMS)
  246:     return NCBStruct(SESSION_HEADER_ITEMS)
  250:     return NCBStruct(SESSION_BUFFER_ITEMS)
  254:     return NCBStruct(LANA_ENUM_ITEMS)
  258:     return NCBStruct(FIND_NAME_HEADER_ITEMS)
  262:     return NCBStruct(FIND_NAME_BUFFER_ITEMS)
  266:     return NCBStruct(ACTION_HEADER_ITEMS)
  270:     """Given an element in a binary buffer, return its integer value"""
  273:         return b
  274:     return ord(b)  # its a char from a string in py2k.

PythonVenv\Lib\site-packages\win32\lib\ntsecuritycon.py:
  538: DS_REPL_NBR_RETURN_OBJECT_PARENTS = 0x00000800
  621: DS_RETURN_DNS_NAME = 0x40000000
  622: DS_RETURN_FLAT_NAME = -2147483648
  639:     | DS_RETURN_FLAT_NAME
  640:     | DS_RETURN_DNS_NAME

PythonVenv\Lib\site-packages\win32\lib\pywin32_testutil.py:
   20:     return sval.encode("latin1")
   27:         return buffer(sval)
   29:     return memoryview(sval.encode("latin1"))
   35:         return buffer(ob)
   37:     return memoryview(ob)
   67:         return self.num_test_cases
   80:             return
  100:             return  # can't do leak tests in this build
  127:         """Return a suite of all tests cases contained in testCaseClass"""
  133:         return self.suiteClass(leak_tests)
  138:             return test
  141:             return self._getTestWrapper(test)
  148:             return test
  149:         return LeakTestCase(test)
  156:         return self.fixupTestsForLeakTests(tests)
  166:         return test
  198:     return _is_admin
  216:             return fname
  255:         returned by sys.exc_info().
  297:             return
  309:         return TestResult(self.stream, self.descriptions, self.verbosity)

PythonVenv\Lib\site-packages\win32\lib\rasutil.py:
  40:     return win32ras.Dial(None, None, (rasName,), TestCallback)

PythonVenv\Lib\site-packages\win32\lib\regcheck.py:
   34:             return "'%s' is not a valid directory!" % path
   35:     return None
  103:         return
  142:         return

PythonVenv\Lib\site-packages\win32\lib\regutil.py:
   24:     return "Software\\Python\\PythonCore\\" + sys.winver
   33:         return win32con.HKEY_CURRENT_USER
   35:         return win32con.HKEY_LOCAL_MACHINE
   39:     """A helper to return the default value for a key in the registry."""
   42:     return win32api.RegQueryValue(rootkey, subkey)
   60:     return "Software\\Microsoft\\Windows\\CurrentVersion\\App Paths"
   91:     return win32api.RegQueryValue(GetRootKey(), GetAppPathsKey() + "\\" + exeAlias)
  103:         return
  124:         return
  133:         return win32api.RegQueryValue(GetRootKey(), keyStr)
  139:         return None
  181:     """Given a description, return the registered entry."""
  183:         return GetRegistryDefaultValue(BuildDefaultPythonKey() + "\\Help\\" + helpDesc)
  186:             return GetRegistryDefaultValue(
  192:     return None

PythonVenv\Lib\site-packages\win32\lib\sspi.py:
   42:         return ret
   45:         """Encrypt a string, returning a tuple of (encrypted_data, trailer).
   58:         return encbuf[0].Buffer, encbuf[1].Buffer
   61:         """Decrypt a previously encrypted string, returning the orignal data"""
   70:         return encbuf[0].Buffer
   73:         """sign a string suitable for transmission, returning the signature.
   85:         return sigbuf[1].Buffer
  106:         Return the clear text, and a boolean that is True if the token was encrypted.
  122:         return r, not (pfQOP == sspicon.SECQOP_WRAP_NO_ENCRYPT)
  159:         return r
  255:         return err, sec_buffer_out
  308:         ## input context handle is None initially, then handle returned from last call thereafter
  334:         return err, sec_buffer_out

PythonVenv\Lib\site-packages\win32\lib\sspicon.py:
   7:     return (Status) >= 0
  96: ISC_RET_INTERMEDIATE_RETURN = 4096

PythonVenv\Lib\site-packages\win32\lib\win32con.py:
    20: OFN_NOREADONLYRETURN = 32768
   147: PD_RETURNDC = 256
   148: PD_RETURNIC = 512
   149: PD_RETURNDEFAULT = 1024
   179: PSD_RETURNDEFAULT = 1024  # must be same as PD_*
   348: TPM_RETURNCMD = 256
   619: LR_COPYRETURNORG = 4
   727: ES_WANTRETURN = 4096
   976: VK_RETURN = 13
  2040:     return (lgid) & 1023
  2044:     return (lgid) >> 10
  2519:     return (Ordinal & IMAGE_ORDINAL_FLAG) != 0
  2523:     return Ordinal & 65535
  3507:     return 16777216 | (i)
  3516:     return rgb & 0xFF
  3520:     return (rgb >> 8) & 0xFF
  3524:     return (rgb >> 16) & 0xFF
  3860: # return values from ChangeDisplaySettings and ChangeDisplaySettingsEx
  4225: BROADCAST_QUERY_DENY = 1112363332  # Return this value to deny a query.
  4602: THREAD_PRIORITY_ERROR_RETURN = MAXLONG
  4818: ECO_WANTRETURN = 4096

PythonVenv\Lib\site-packages\win32\lib\win32cryptcon.py:
     3:     return x & (7 << 13)
     7:     return x & (15 << 9)
    11:     return x & (511)
   259:     return (rt) == CRYPT_SUCCEED
   263:     return (rt) == CRYPT_FAILED
   597:     return X & CERT_ENCODING_TYPE_MASK
   601:     return X & CMSG_ENCODING_TYPE_MASK
   943: szOID_CMC_DATA_RETURN = "1.3.6.1.5.5.7.7.4"
  1836: CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 0x00000080

PythonVenv\Lib\site-packages\win32\lib\win32evtlogutil.py:
  143:     function SafeFormatMessage which will return None if the message can
  188:     return data or ""  # Don't want "None" ever being returned.
  192:     """As for FormatMessage, except returns an error message if
  198:         return FormatMessage(eventLogRecord, logType)
  204:         return (

PythonVenv\Lib\site-packages\win32\lib\win32gui_struct.py:
   19: # 'None' is passed, the mask flag will not be set, or on return, None will
   20: # be returned for the value if the mask is not set.
   47:         return nt(*values)
   50:     # no namedtuple support - just return the values as a normal tuple.
   52:         return values
   75:         return array.array("b", data)
   82:         return array.array("b", text + "\0")
   87:     return _make_text_buffer("\0" * cch)
   93:         return str(buffer(ob))
   96:         return sval
  101:         return bytes(memoryview(ob))
  104:         return sval.encode("ascii")
  111:     return _MakeResult("WMNOTIFY hwndFrom idFrom code", struct.unpack(format, buf))
  123:     return _MakeResult(
  226:     return array.array("b", item), extras
  263:     return _MakeResult(
  320:     return array.array("b", buf), extra
  366:     return array.array("b", item)
  384:     return _MakeResult(
  410:     return array.array("b", buf)
  433:         return mask, default
  437:         return mask, val
  444:     return struct.pack(format, parent, insertAfter, tvitem_buf), extra
  479:     return array.array("b", buf), extra
  504:     return array.array("b", buf), extra
  540:     return _MakeResult(
  569:     return _MakeResult(
  581:     return _MakeResult("TVDISPINFO hwndFrom id code item", (hwndFrom, id, code, item))
  648:     return array.array("b", buf), extra
  680:     return _MakeResult(
  703:     return _MakeResult("LVDISPINFO hwndFrom id code item", (hwndFrom, id, code, item))
  725:     return _MakeResult(
  773:     return array.array("b", buf), extra
  799:     return array.array("b", buf), extra
  823:     return _MakeResult(
  850:     return array.array("b", buf), extra
  857:     return array.array("b", buf), None
  863:     return _MakeResult(
  893:     return array.array("b", buf), extra
  909:     return struct.pack(format, *data) + extra_data
  919:     return PackDEV_BROADCAST(
  928:     return PackDEV_BROADCAST(win32con.DBT_DEVTYP_VOLUME, "II", (unitmask, flags))
  946:     return PackDEV_BROADCAST(win32con.DBT_DEVTYP_DEVICEINTERFACE, rest_fmt, rest_data)
  949: # An object returned by UnpackDEV_BROADCAST.
  956:         return "DEV_BROADCAST_INFO:" + str(self.__dict__)
  962:         return None
  999:     return DEV_BROADCAST_INFO(devtype, **extra)

PythonVenv\Lib\site-packages\win32\lib\win32inetcon.py:
  801: WINHTTP_OPTION_PASSPORT_RETURN_URL = 87

PythonVenv\Lib\site-packages\win32\lib\win32pdhquery.py:
   60: paths (a -1 will be returned, or the Query will be totally ignored,
  218:                 return 0
  220:                 return -1
  222:             return -1
  245:                 return 0  # open succeeded
  254:         return 1  # already open
  301:         Returns the formatted current values for the Query
  304:             return self.collectdataslave(format)
  309:             return temp
  316:         returns the values as a list.
  333:             return temp
  337:             return [-1] * len(self.counters)
  344:         return (self.paths,)
  441:             return []  # no instances of this object
  457:         return paths  # should also return the number of elements for naming purposes
  515:                 # starts the query running, returns control to the caller immediately
  555:         return (self.paths,)
  558:         return self.volatilecounters
  569:         return "<Query Error in %s>" % repr(self.query)

PythonVenv\Lib\site-packages\win32\lib\win32pdhutil.py:
   11:   First example returns data which is not associated with any specific instance.
   13:   The second example reads data for a specific instance - hence the list return -
   14:   it would return one result for each instance of Python running.
   48:     return win32pdh.LookupPerfNameByIndex(
   72:             return val
   89:     Given a process name, return a list with the requested attributes.
   90:     Most useful for returning a tuple of PIDs given a process name.
  117:     return ret
  164:     ## BrowseCounters can now return multiple counter paths
  183:     return 0
  191:     win32pdh.BrowseCounters(None, 0, callback, level, title, ReturnMultiple=True)

PythonVenv\Lib\site-packages\win32\lib\win32rcparser.py:
   96:         return self.template
  142:         return s
  159:         return t
  169:         return "StringDef(%r, %r, %r)" % (self.id, self.idNum, self.value)
  194:             self.debug("getToken returns (ungot):", self.token)
  195:             return self.token
  197:         self.debug("getToken returns:", self.token)
  200:         return self.token
  211:         return tok
  214:         return self.getCheckToken(",")
  216:     # Return the *current* token as a number, only consuming a token
  223:         return int(self.token) * mult
  225:     # Return the *current* token as a string literal (ie, self.token will be a
  242:         return sval
  311:                 return
  346:                     return v
  351:         return id
  382:         return self.parse_bitmap_or_icon(name, self.bitmaps)
  385:         return self.parse_bitmap_or_icon(name, self.icons)
  472:         return style, list
  582:     return rcp
  603:         return ParseStreams(rc_file, h_file)
  608:     return rcp
  636:         '\t\treturn "StringDef(%r, %r, %r)" % (self.id, self.idNum, self.value)\n'
  647:     out.write("\treturn FakeParser()\n")

PythonVenv\Lib\site-packages\win32\lib\win32serviceutil.py:
    24: # Returns the full path to an executable for hosting a Python service - typically
    33:         return sys.executable
    36:         return win32api.GetFullPathName(exe)
    42:         return win32api.GetFullPathName(exe)
    72:     return correct
    96:                 return svc
   100:     return None
   106:         return win32service.OpenService(hscm, name, access)
   114:     return win32service.OpenService(hscm, name, access)
   118:     # Return the .exe name of any service.
   126:         return win32api.RegQueryValueEx(hkey, "ImagePath")[0]
   193:         return exeName + " " + exeArgs
   195:         return exeName
   399:             return win32api.RegQueryValueEx(key, option)[0]
   401:             return defaultValue
   440:     return status
   468:     return __ResolveDeps(findName, dict)
   477:     return retList
   481:     """Waits for the service to return the specified status.  You
   540:     return ControlService(serviceName, win32service.SERVICE_CONTROL_STOP, machine)
   581:         return True
   582:     return False
   632:     return modName + "." + cls.__name__
   645:     return status
   951:     return err
   990:         return accepted
   996:             return
  1035:         return self.ServiceCtrlHandlerEx(control, 0, None)
  1041:         return self.SvcOther(control)
  1045:             return self.SvcStop()
  1047:             return self.SvcPause()
  1049:             return self.SvcContinue()
  1051:             return self.SvcInterrogate()
  1053:             return self.SvcShutdown()
  1055:             return self.SvcOtherEx(control, event_type, data)
  1070:         # will automatically tell the SCM it has stopped when this returns.

PythonVenv\Lib\site-packages\win32\lib\win32timezone.py:
    54: calling the displayName member will return the display name as set in the
   275:         return [f[0] for f in self._fields_]
   279:             return False
   281:             return False
   284:                 return False
   285:         return True
   288:         return not self.__eq__(other)
   341:             return
   347:             return
   353:             return
   399:         return value
   405:         return code, class_(*tzi)
   413:         return self.__class__(self)
   416:         return self._locate_day(year, self.daylight_start)
   419:         return self._locate_day(year, self.standard_start)
   466:         return result
   515:         return result
   572:             return
   590:         return result
   593:         return self.displayName
   601:         return result
   605:         Return the most relevant "info" for this time zone
   609:             return self.staticInfo
   613:         return self.dynamicInfo.get(targetYear, self.dynamicInfo[RangeMap.last_item])
   617:         return winInfo.bias + winInfo.standard_bias
   621:         return winInfo.bias + winInfo.daylight_bias
   626:             return
   628:         return -winInfo.bias + self.dst(dt)
   636:             return
   642:         return -result
   671:         return in_dst
   675:         return self.getWinInfo(year).locate_daylight_start(year)
   679:         return self.getWinInfo(year).locate_standard_start(year)
   682:         return cmp(self.__dict__, other.__dict__)
   685:         return self.__dict__ == other.__dict__
   688:         return self.__dict__ != other.__dict__
   692:         """Returns the local time zone as defined by the operating system in the
   717:         return class_(info, fix_standard_time)
   721:         """Returns a time-zone representing UTC.
   731:         return class_._tzutc
   736:         "Return the registry key that stores time zone details"
   740:         return key
   744:         "Returns the names of the (registry keys of the) time zones"
   745:         return TimeZoneInfo._get_time_zone_key().subkeys()
   757:             return key.get(index_key)
   761:         return (
   768:         Return a list of time zone names that can
   772:         return [tz.standardName for tz in tzs]
   776:         return [TimeZoneInfo(n) for n in TimeZoneInfo._get_time_zone_key_names()]
   781:         Return the time zones sorted by some key.
   782:         key must be a function that takes a TimeZoneInfo object and returns
   790:         return zones
   801:         return _RegKeyDict(winreg.OpenKeyEx(*args, **kargs))
   804:         return _RegKeyDict(winreg.OpenKeyEx(self.key, name))
   811:         return self._enumerate_reg_keys(self.key)
   815:         return _RegKeyDict._enumerate_reg(key, winreg.EnumValue)
   819:         return _RegKeyDict._enumerate_reg(key, winreg.EnumKey)
   833:     Return the UTC time now with timezone awareness as enabled
   839:     return now
   844:     Return the local time now with timezone awareness as enabled
   848:     return datetime.datetime.now(TimeZoneInfo.local())
   874:     return locals()
   883:         return self.__cache.setdefault(key, win32api.LoadLibrary(key))
   913:     return result
   922:     A value is returned for a key if it is the first key that matches in
   987:         return result
   991:         Return the value for key if key is in the dictionary, else default.
   996:             return self[key]
   998:             return default
  1002:             return self.match(item, k)
  1006:             return matches[0]
  1011:         return (

PythonVenv\Lib\site-packages\win32\lib\win32verstamp.py:
   25:         return 3  # VS_FF_DEBUG | VS_FF_PRERELEASE
   26:     return 0
   31:         return 2  # VFT_DLL
   32:     return 1  # VFT_APP
   36:     return struct.pack(
   57:         return (str(s) + "\0").encode("unicode-internal")
   59:         return (str(s) + "\0").encode("utf-16le")
   66:         return s + (null_byte * l)
   67:     return s
   71:     return struct.pack("h", len(s) + 2) + s
   80:     return addlen(result)
   90:     return addlen(result)
   98:     return addlen(result)
  105:     return addlen(result)
  114:     return addlen(result)
  123:     return addlen(result)

PythonVenv\Lib\site-packages\win32\lib\winerror.py:
  1634: ERROR_DS_NO_RESULTS_RETURNED = 8257
  1973:     return -2147024896 | (scode & 65535)
  1977:     return (Status) >= 0
  1981:     return Status < 0
  1985:     return (hr) & 65535
  1989:     return (sc) & 65535
  1993:     return ((hr) >> 16) & 8191
  1997:     return ((sc) >> 16) & 8191
  2001:     return ((hr) >> 31) & 1
  2005:     return ((sc) >> 31) & 1
  2012:     return x | FACILITY_NT_BIT
  2016:     return hr
  2020:     return sc
  2679: ERROR_DS_NO_RESULTS_RETURNED = 8257

PythonVenv\Lib\site-packages\win32\lib\winioctlcon.py:
    8:     return (DeviceType << 16) | (Access << 14) | (Function << 2) | Method
   12:     return (ctrlCode & 0xFFFF0000) >> 16
   92: TAPE_RETURN_STATISTICS = 0
   93: TAPE_RETURN_ENV_INFO = 1
  170: RETURN_SMART_STATUS = 0xDA

PythonVenv\Lib\site-packages\win32\lib\winnt.py:
   164:     return (WORD)(lgid) & 1023
   168:     return (WORD)(lgid) >> 10
   175:     return (WORD)(lcid)
   179:     return (WORD)((((DWORD)(lcid)) & NLS_VALID_LOCALE_MASK) >> 16)
   183:     return P
   187:     return P
   191:     return V
   195:     return
   199:     return
   203:     return
   789:     return (x) & N_BTMASK
   793:     return ((x) & N_TMASK) == (IMAGE_SYM_DTYPE_POINTER << N_BTSHFT)
   797:     return ((x) & N_TMASK) == (IMAGE_SYM_DTYPE_FUNCTION << N_BTSHFT)
   801:     return ((x) & N_TMASK) == (IMAGE_SYM_DTYPE_ARRAY << N_BTSHFT)
   805:     return (
   813:     return (((x) >> N_TSHIFT) & ~N_BTMASK) | ((x) & N_BTMASK)
   933:     return (Ordinal & IMAGE_ORDINAL_FLAG) != 0
   937:     return Ordinal & 65535
  1062: ## dispositions returned from RegCreateKeyEx

PythonVenv\Lib\site-packages\win32\scripts\backupEventLog.py:
  32:         return
  36:             return

PythonVenv\Lib\site-packages\win32\scripts\ControlService.py:
   70:         return dialog.Dialog.OnInitDialog(self)
   98:         return dialog.Dialog.OnOK(self)
  240:         return t
  275:         return dialog.Dialog.OnInitDialog(self)
  351:             return None
  353:         return self.data[pos][-2:]
  358:             return
  369:             return
  380:             return
  391:             return
  402:             return
  585:         return t

PythonVenv\Lib\site-packages\win32\scripts\killProcName.py:
  48:     return result

PythonVenv\Lib\site-packages\win32\scripts\rasutil.py:
  15:     Returns a tuple of (bool, handle) on success.
  25:             return 0, info[0]
  48:     return 1, rasHandle

PythonVenv\Lib\site-packages\win32\scripts\regsetup.py:
   12:     """Check if a file exists.  Returns true or false."""
   17:         return 1
   19:         return 0
   30:     return FileExists(os.path.join(os.path.join(path, packageName), knownFileName))
   34:     """Return "_d" if we're running a debug version.
   40:     return "_d" if "_d.pyd" in importlib.machinery.EXTENSION_SUFFIXES else ""
   57:         return pathLook, None  # The currently registered one is good.
   63:             return ret, ret
   85:                     return os.path.abspath(path)
   94:             return os.path.abspath(pathLook)
   97:             return os.path.abspath(pathLook)
  116:         return None  # The currently registered one is good.
  121:             return os.path.abspath(pathLook)
  130:     Returns the full path to the .exe, and a boolean indicating if the current
  160:     return found, registered_ok
  164:     """Given a filename, return a quoted version if necessary"""
  170:         return '"%s"' % fname
  173:         return fname
  218:     return os.path.abspath(retPath)
  222:     """Like LocateFileName, but returns a directory only."""
  225:     return os.path.abspath(os.path.split(LocateFileName(fileName, searchPaths))[0])
  229:     """Like LocatePath, but returns None if the user cancels."""
  231:         return LocatePath(fileName, searchPaths)
  233:         return None
  237:     """Like LocateFileName, but returns None if the user cancels."""
  239:         return LocateFileName(fileName, searchPaths)
  241:         return None
  245:     """Locate and validate the core Python directories.  Returns a list
  280:     return installPath, [libPath, corePath]
  308:         return pathLook
  341:         return
  357:     return fname
  367:         return

PythonVenv\Lib\site-packages\win32\scripts\setup_d.py:
  56:         return 0
  60:         return 1

PythonVenv\Lib\site-packages\win32\scripts\ce\pysynch.py:
   26:         return win32api.GetFileAttributes(file)
   28:         return wincerapi.CeGetFileAttributes(file)
   33:         return win32api.FindFiles(spec)
   35:         return wincerapi.CeFindFiles(spec)
   41:         return attr & win32con.FILE_ATTRIBUTE_DIRECTORY
   43:         return 0
   69:     return bytes
  105:     return files
  110:         return
  112:         return rel_name
  113:     return os.path.split(rel_name)[1]
  188:     return args[1]
  261:         return
  267:         return

PythonVenv\Lib\site-packages\win32\scripts\VersionStamp\BrandProject.py:
  32:         return
  37:     return 1

PythonVenv\Lib\site-packages\win32\scripts\VersionStamp\bulkstamp.py:
  118:     return retvars, descriptions

PythonVenv\Lib\site-packages\win32\scripts\VersionStamp\vssutil.py:
   22:     return ss
   55:     return string.join(map(str, newFields), "")
  105:     return string.join(lines, "\n")
  122:         return
  138:     return num
  148:             return lab
  149:     return None
  166:             return
  188:             return
  192:     return buildNo

PythonVenv\Lib\site-packages\win32\test\handles.py:
  144:         # may well return them. eg:

PythonVenv\Lib\site-packages\win32\test\test_clipboard.py:
  79:         # CF_TEXT returns bytes.

PythonVenv\Lib\site-packages\win32\test\test_exceptions.py:
   26:             return exc
  132:             return exc

PythonVenv\Lib\site-packages\win32\test\test_odbc.py:
  217:         For example, previously the below was returned as ascii 'a'

PythonVenv\Lib\site-packages\win32\test\test_pywintypes.py:
  17:         # it always returned the local timezone.
  33:             return

PythonVenv\Lib\site-packages\win32\test\test_sspi.py:
  19:         return func(*args)
  32:             return func(*args)
  46:         return sspiclient, sspiserver

PythonVenv\Lib\site-packages\win32\test\test_win32api.py:
   86:             ## REG_MULTI_SZ value needs to be a list since strings are returned as a list
  158:             "GetLongPathNameW returned type '%s'" % (type(long_name),),
  183:             "GetLongPathNameW returned type '%s'" % (type(long_name),),

PythonVenv\Lib\site-packages\win32\test\test_win32crypt.py:
  51:     :return: handle to cert store
  74:             return win32crypt.CryptQueryObject(

PythonVenv\Lib\site-packages\win32\test\test_win32file.py:
  108:         self.assertTrue(hr == 0, "Readfile returned %d" % hr)
  127:             "Expected GetFileAttributesEx to return the same size as GetFileSize()",
  131:             "Expected GetFileAttributesEx to return the same attributes as GetFileAttributes",
  182:         # now() is always returning a timestamp with microseconds but the
  214:         # now() is always returning a timestamp with microseconds but the
  402:             return
  671:                     return
  674:                 return  # kill the thread!
  772:             return

PythonVenv\Lib\site-packages\win32\test\test_win32gui.py:
  29:         # Check we can index into the buffer object returned by PyGetMemory
  37:         # Check we can slice the buffer object returned by PyGetMemory

PythonVenv\Lib\site-packages\win32\test\test_win32print.py:
  17:             return

PythonVenv\Lib\site-packages\win32\test\test_win32trace.py:
  123:         # str objects are always returned in py2k (latin-1 encoding was used
  133:         # str objects are always returned in py2k (latin-1 encoding was used
  175:         return self.writeCount == self.BucketCount
  206:         return bucketsAreFull
  218:                         return
  282:         return self.exitCode == 0
  317:         return bucketsAreFull
  329:                         return

PythonVenv\Lib\site-packages\win32\test\test_win32wnet.py:
  155:                 return maybe

PythonVenv\Lib\site-packages\win32\test\testall.py:
   67:                     return None
   80:             return ret
   97:         rc = p.returncode
  131:     return ret
  194:     return suite
  199:         return self.fixupTestsForLeakTests(suite())

PythonVenv\Lib\site-packages\win32com\olectl.py:
  12:     return int((int(-sev) << 31) | ((fac) << 16) | ((code)))
  16:     return MAKE_SCODE(winerror.SEVERITY_ERROR, FACILITY_CONTROL, n)

PythonVenv\Lib\site-packages\win32com\readme.html:
  29: In all builds prior to 204, a COM currency value was returned as a tuple of
  39: pythoncon returns you a currency value.

PythonVenv\Lib\site-packages\win32com\universal.py:
   13:     ret = []  # return a list of (dispid, funcname for our policy's benefit
   84:     return ret
  111:     return cb
  156:         return tuple(l)
  168:         return tuple(l)
  181:         return self._iid
  184:         return [m.cbArgs for m in self._methods]
  187:         return [len(m.args) for m in self._methods]
  199:         # Infer S_OK if they don't return anything bizarre.
  207:         # None is an allowed return value stating that
  210:             # However, if they want to return a specific HRESULT,
  211:             # then they have to return all of the out arguments
  218:                     "Expected %s return values, got: %s"
  226:         return hr

PythonVenv\Lib\site-packages\win32com\util.py:
  23:         return pythoncom.ServerInterfaces[iid]
  27:                 return win32api.RegQueryValue(
  34:         return str(iid)

PythonVenv\Lib\site-packages\win32com\client\__init__.py:
    5: # Note that if the unknown dispatch object then returns a known
   29:     Helper function to return a makepy generated class for a CLSID if it exists,
   38:             ):  # Some objects return NULL, some raise exceptions...
   49:             return klass(dispatch)
   51:     # Return a "dynamic" object - best we can do!
   54:     return dynamic.Dispatch(dispatch, userName, WrapperClass, typeinfo, clsctx=clsctx)
   65:     will return a ready to use Python wrapping of the required COM object.
   84:         return GetActiveObject(Class, clsctx)
   86:         return Moniker(Pathname, clsctx)
   96:     return __WrapDispatch(dispatch, Class, resultCLSID=resultCLSID, clsctx=clsctx)
  105:     return __WrapDispatch(dispatch, Pathname, clsctx=clsctx)
  119:     return __WrapDispatch(dispatch, userName, resultCLSID, typeinfo, clsctx=clsctx)
  149:     return Dispatch(dispatch, userName, resultCLSID, typeinfo, clsctx=clsctx)
  161:         self, ob, userName=None, returnCLSID=None, UnicodeToString=None
  164:         return Dispatch(ob, userName, returnCLSID, None)
  167:         return dynamic.CDispatch.__dir__(self)
  218:         return target_class(ob)  # auto QI magic happens
  231:                 return d[a]
  268:         return getattr(self._obj_, attr)
  287:     It is important to note that the returned instance is not a direct
  297:     Object Lifetimes:  Whenever the object returned from this function is
  355:     return EventsProxy(instance)
  359:     """Similar to DispatchWithEvents - except that the returned
  361:     the returned object is not dispatchable.
  415:     return instance
  420:     either a clsid or progid. It returns a class - you can
  462:     # return default outgoing interface for that class
  465:         return klass.default_source
  469:             return gencache.GetClassForCLSID(klass.coclass_clsid).default_source
  471:             return None
  505:     return pythoncom.GetRecordFromGuids(
  544:         return list(set(lst))
  557:         return "<%s.%s instance at 0x%s>" % (
  566:         return self._oleobj_ == other
  570:         return self._oleobj_ != other
  573:         return self._get_good_object_(
  585:         return self._ApplyTypes_(*args)
  590:             return
  600:         return _get_good_single_object_(obj, obUserName, resultCLSID)
  603:         return _get_good_object_(obj, obUserName, resultCLSID)
  609:         return Dispatch(obj, obUserName, resultCLSID)
  610:     return obj
  615:         return None
  619:         return tuple(map(_get_good_object_, obj, obUserNameTuple, resultCLSIDTuple))
  621:         return _get_good_single_object_(obj, obUserName, resultCLSID)
  642:         return "<win32com.gen_py.%s.%s>" % (__doc__, self.__class__.__name__)
  647:             return getattr(d, attr)
  653:             return
  658:                 return
  672:         return self.__dict__["_dispobj_"].__call__(*args, **kwargs)
  675:         return self.__dict__["_dispobj_"].__str__(*args)
  678:         return self.__dict__["_dispobj_"].__int__(*args)
  681:         return self.__dict__["_dispobj_"].__iter__()
  684:         return self.__dict__["_dispobj_"].__len__()
  687:         return self.__dict__["_dispobj_"].__nonzero__()
  703:         return self._value
  714:         return "win32com.client.VARIANT(%r, %r)" % (self.varianttype, self._value)

PythonVenv\Lib\site-packages\win32com\client\build.py:
    7: This include parameter and return type information, the COM dispid and CLSID, etc.
   35:     return repr(s)
  109:         return (
  118:             return None
  119:         return rc
  121:     # Return a string, suitable for output - either "'{...}'" or "None"
  125:             return "None"
  126:         return repr(
  132:             return None
  133:         return self.resultDocumentation[0]
  272:             # any methods that can't be reached via DISPATCH we return None
  275:                 return None
  276:             return (name, map)
  277:         return None
  305:             return (names[0], map)
  307:             return None
  313:             return
  334:         "Return tuple counting in/outs/OPTS.  Sum of result may not be len(argTuple), as some args may be in/out."
  348:         return ins, out, opts
  353:             return self.MakeDispatchFuncMethod(entry, name, bMakeClass)
  355:             return self.MakeVarArgsFuncMethod(entry, name, bMakeClass)
  402:         # The runtime translation of the return types is expensive, so when we know the
  403:         # return type of the function, there is no need to check the type at runtime.
  404:         # To qualify, this function must return a "simple" type, and have no byref args.
  416:                 s = "%s\treturn self._oleobj_.InvokeTypes(%d, LCID, %s, %s, %s%s)" % (
  445:                     s = s + "%s\t\t\treturn ret\n" % (linePrefix,)
  451:                 s = s + "%s\treturn ret" % (linePrefix)
  456:                     + "%s\treturn self._oleobj_.InvokeTypes(%d, LCID, %s, %s, %s%s)"
  468:             s = "%s\treturn self._ApplyTypes_(%d, %s, %s, %s, %s, %s%s)" % (
  481:         return ret
  500:         s = linePrefix + "\treturn self._get_good_object_(self._oleobj_.Invoke(*(("
  505:         return ret
  567:                 return subrepr, sub_clsid, sub_doc
  569:             return subrepr | pythoncom.VT_BYREF, sub_clsid, sub_doc
  573:             return pythoncom.VT_ARRAY | subrepr, sub_clsid, sub_doc
  576:             # sheesh - return _something_
  577:             return pythoncom.VT_CARRAY, None, None
  587:                     return pythoncom.VT_UNKNOWN, None, None
  594:                 return _ResolveType(tdesc, resultTypeInfo)
  597:                 return pythoncom.VT_I4, None, None
  602:                 return pythoncom.VT_DISPATCH, clsid, retdoc
  608:                 return pythoncom.VT_UNKNOWN, clsid, retdoc
  611:                 return pythoncom.VT_RECORD, None, None
  613:     return typeSubstMap.get(typerepr, typerepr), None, None
  636:     return "," + ", ".join(names)
  647:     return className[i - 1 :] + className[: i - 1]
  661:         return demunge_leading_underscores(className)
  673:         return ret
  680:         return ret
  682:     return "".join([char for char in className if char in valid_identifier_chars])
  685: # Given a default value passed by a type library, return a string with
  687: # Takes a raw ELEMDESC and returns a repr string, or None
  703:             return repr(tuple(val.utctimetuple()))
  713:             return (
  717:         return repr(val)
  718:     return None
  785:     return strval

PythonVenv\Lib\site-packages\win32com\client\CLSIDToClass.py:
  45:     """Given a CLSID, return the globally associated class.
  49:     return mapCLSIDToClass[clsid]
  57:     return clsid in mapCLSIDToClass

PythonVenv\Lib\site-packages\win32com\client\combrowse.py:
   40:         return [
   49:         return cmp(self.name, other.name)
   54:         return self.name
   57:         return 1
   73:         return 0
   76:         return []
   85:         return 0  # Always a folder.
   93:         return rc
  104:         return ret
  113:         return ret
  120:         return "Registered Categories"
  137:         return ret
  147:         return desc
  163:         return ret
  168:         return 0
  175:         return "Help reference in %s" % (base)
  186:         return 6
  260:         return ret
  271:         return name + " - " + typedesc
  281:         return ret
  297:         return ret
  314:         return ret
  326:         return self.name + " - Enum/Module"
  337:         return ret
  348:         return self.name + " - Property"
  362:         return ret
  446:         return self.name + " - Function"
  448:     def MakeReturnTypeName(self, typ):
  457:         return typname
  459:     def MakeReturnType(self, returnTypeDesc):
  460:         if type(returnTypeDesc) == type(()):
  461:             first = returnTypeDesc[0]
  462:             result = self.MakeReturnType(first)
  464:                 result = result + " " + self.MakeReturnType(returnTypeDesc[1])
  465:             return result
  467:             return self.MakeReturnTypeName(returnTypeDesc)
  481:             val = self.MakeReturnType(typ)
  484:             ret.append(browser.MakeHLI(val, "Return Type"))
  488:             val = self.MakeReturnType(typ)
  514:         return ret
  536:             return [browser.MakeHLI("%s can not be loaded" % self.myobject)]
  544:         return ret
  551:         return "Registered Type Libraries"
  593:         return ret

PythonVenv\Lib\site-packages\win32com\client\connect.py:
  29:         return win32com.server.util.wrap(obj, useDispatcher=useDispatcher)

PythonVenv\Lib\site-packages\win32com\client\dynamic.py:
   67:     return types.MethodType(func, inst)
   79:     # quick return for most common case
   81:         return IDispatch
   92:     return IDispatch
  104:     return (_GetGoodDispatch(IDispatch, clsctx), userName)
  114:         return invoke_type
  117:         return invoke_type
  120:     return entry.desc.invkind
  149:     return createClass(IDispatch, olerepr, userName, lazydata=lazydata)
  176:     return olerepr
  191:     return createClass(IDispatch, build.DispatchItem(), userName)
  223:             return self._get_good_object_(
  229:         return True  # ie "if object:" should always be "true" - without this, __len__ is tried.
  234:         return "<COMObject %s>" % (self._username_)
  240:             return str(self.__call__())
  244:             return self.__repr__()
  252:         return list(set(lst))
  259:         return list(items_dict.keys())
  288:         return self._oleobj_ == other
  292:         return self._oleobj_ != other
  295:         return int(self.__call__())
  300:             return self._oleobj_.Invoke(dispid, LCID, invkind, 1)
  310:             return None  # no enumerator for this object.
  313:         return util.WrapEnum(enum, None)
  322:                 return self._get_good_object_(self._enum_.__getitem__(index))
  326:             return self._get_good_object_(
  345:             return self._get_good_object_(
  353:             return item.desc[4], item.dispid
  357:             return item.desc[4], item.dispid
  362:             return None, None
  363:         return pythoncom.DISPATCH_METHOD | pythoncom.DISPATCH_PROPERTYGET, dispid
  369:         return self._get_good_object_(result, user, resultCLSID)
  372:         self, ob, userName=None, returnCLSID=None, UnicodeToString=None
  376:         return Dispatch(ob, userName)
  378:     def _get_good_single_object_(self, ob, userName=None, ReturnCLSID=None):
  381:             return self._wrap_dispatch_(ob, userName, ReturnCLSID)
  387:                 return ob
  388:             return self._wrap_dispatch_(ob, userName, ReturnCLSID)
  389:         return ob
  391:     def _get_good_object_(self, ob, userName=None, ReturnCLSID=None):
  392:         """Given an object (usually the retval from a method), make it a good object to return.
  396:             return None
  398:             return tuple(
  400:                     lambda o, s=self, oun=userName, rc=ReturnCLSID: s._get_good_single_object_(
  407:             return self._get_good_single_object_(ob)
  432:             return newMeth
  436:         return None
  457:             return self._get_good_object_(
  488:                 return 1
  490:             return 0
  495:             return 0
  501:         # we are actually after (ie, we may be after prop_get, but returned
  526:         return res
  536:         and returned None, rather than indicating it is really a method.
  549:         return self._oleobj_.GetIDsOfNames(0, attr)
  554:             # exists, then it must return an iterable object.
  563:             # We must return a callable object.
  571:                     return win32com.client.util.Iterator(self.ob)
  573:             return Factory(enum)
  577:         # If a known method, create new instance and return.
  579:             return MakeMethod(self._builtMethods_[attr], self, self.__class__)
  589:             return self._make_method_(attr)
  603:                             return self._make_method_(attr)
  616:                 return ret
  632:                     return self._make_method_(attr)
  634:             debug_attr_print("OLE returned ", ret)
  635:             return self._get_good_object_(ret)
  647:             return
  660:                 return
  666:                 return
  678:                     return
  686:                     return
  703:                     return

PythonVenv\Lib\site-packages\win32com\client\gencache.py:
   97:             return
  102:             return
  115:             return
  131:     """Given the clsid, lcid, major and  minor for a type lib, return
  134:     return str(clsid).upper()[1:-1] + "x%sx%sx%s" % (lcid, major, minor)
  139:     return tuple(fname.split("x", 4))
  143:     """Returns the name of the path to generate to.
  166:     return win32com.__gen_path__
  175:     Given a Program ID, return a Python class which wraps the COM object
  177:     Returns the Python class, or None if no module is available.
  183:     return GetClassForCLSID(clsid)
  189:     Given a CLSID, return a Python class which wraps the COM object
  191:     Returns the Python class, or None if no module is available.
  199:         return CLSIDToClass.GetClass(clsid)
  202:         return None
  204:         return CLSIDToClass.GetClass(clsid)
  206:         return None
  212:     Given a Program ID, return a Python module which contains the
  215:     Returns the Python module, or None if no module is available.
  223:         return None
  224:     return GetModuleForCLSID(iid)
  230:     Given a CLSID, return a Python module which contains the
  233:     Returns the Python module, or None if no module is available.
  242:         return None
  267:     return mod
  273:     Given the CLSID of a typelibrary, return an imported Python module,
  289:     return mod
  306:     Returns the Python module.  No exceptions are caught.
  324:     return GetModuleForTypelib(typelibCLSID, lcid, major, minor)
  336:     Returns the Python module.
  353:         return None
  359:     return GetModuleForTypelib(guid, lcid, major, minor)
  372:     Returns the Python module.
  390:         return GetModuleForTypelib(guid, lcid, major, minor)
  394:     return MakeModuleForTypelibInterface(
  439:     Returns the Python module.  No exceptions are caught during the generate process.
  581:                 return versionRedirectMap[key]
  597:             # remember and return
  599:             return ret
  614:     return module
  620:     """Given a COM prog_id, return an object that is using makepy support, building if necessary"""
  639:     return disp
  699:         return list(infos.keys())
  720:         return ret
  724:     """Given the name of a module in the gen_py directory, import and return it."""
  727:     return sys.modules[mod_name]

PythonVenv\Lib\site-packages\win32com\client\genpy.py:
    56: # Given a propget function's arg desc, return the default parameters for all
    69:     return tuple(ret)
    75:     return '(%s, %d, %s, %s, "%s", %s)' % (
    87:         return eventName
    89:         return "On" + eventName
   116:         return ret
   121:             return self.doc < other.doc
   122:         return self.order < other.order
   125:         return "OleItem: doc=%s, order=%d" % (repr(self.doc), self.order)
   178:             return
   259:         return num
   331:             return
   420:             "\t\tif iid==self.CLSID_Sink: return win32com.server.util.wrap(self)",
   567:                         "\t\t# Method '%s' returns object of type '%s'"
   662:                     "\tdef __call__(self):\n\t\treturn self._ApplyTypes_(*%s)"
   672:             print("\t\treturn str(self.__call__(*args))", file=stream)
   674:             print("\t\treturn int(self.__call__(*args))", file=stream)
   694:         print('\t\t"Return a Python iterator for this object"', file=stream)
   708:             "\t\treturn win32com.client.util.Iterator(ob, %s)" % resultCLSID,
   729:                 '\t\treturn self._get_good_object_(self._oleobj_.Invoke(*(%d, LCID, %d, 1, key)), "Item", %s)'
   742:                     "\tdef __len__(self):\n\t\treturn self._ApplyTypes_(*%s)" % propArgs
   753:                 "\t#This class has a __len__ - this is needed so 'if object:' always returns TRUE.",
   757:             print("\t\treturn True", file=stream)
   912:         return ret
   939:         return newItem, child_infos
   997:         return oleItem, vtableItem
  1037:         return oleItems, enumItems, recordItems, vtableItems
  1041:         # Does *not* set self.file - just opens and returns a file.
  1042:         # Actually returns a handle to a temp file - finish_writer then deletes
  1049:         return open(temp_filename, "wt", encoding=encoding)
  1084:         return "%s.%d.temp" % (filename, os.getpid())

PythonVenv\Lib\site-packages\win32com\client\makepy.py:
   90:             return
  191:     description, or ProgID of an object) return a list of actual typelibs
  233:         return typelibs
  422:         return 0

PythonVenv\Lib\site-packages\win32com\client\selecttlb.py:
   27:             return self.ver_desc
   43:         return me < them
   46:         return (
   55:             return 0
   58:         return 1
   87:     return ret
   96:     """Return a list of TypelibSpec objects, one for each registered library."""
  152:     return results
  162:     return ret
  166:     """Display a list of all the type libraries, and select one.   Returns None if cancelled"""
  177:         return None
  178:     return items[rc]

PythonVenv\Lib\site-packages\win32com\client\tlbrowse.py:
   63:         return TypeBrowseDialog_Parent.OnAttachedObjectDeath(self)
  104:         return TypeBrowseDialog_Parent.OnInitDialog(self)
  113:             return
  135:             return []
  167:         return infos
  172:             return []
  186:         return ret
  202:             return 1
  207:             return pos - self.attr[7], 1
  209:             return pos, 0
  225:             return 1
  228:         "Return the template used to create this dialog"
  264:         return template

PythonVenv\Lib\site-packages\win32com\client\util.py:
   15:     All VT_DISPATCHs returned by the enumerator are converted to wrapper objects
   21:     return EnumVARIANT(ob, resultCLSID)
   41:         return self.__GetIndex(index)
   44:         return self.__GetIndex(index)
   64:             return self._make_retval_(result[0])
   72:         return tuple(realRets)  # Convert back to tuple.
   75:         return self._oleobj_.Reset()
   78:         return self.__class__(self._oleobj_.Clone(), self.resultCLSID)
   81:         return result
   90:         return _get_good_object_(result, resultCLSID=self.resultCLSID)
   99:         return self
  102:         return _get_good_object_(next(self._iter_), resultCLSID=self.resultCLSID)

PythonVenv\Lib\site-packages\win32com\demos\connect.py:
  59:             return win32com.server.util.wrap(self)

PythonVenv\Lib\site-packages\win32com\demos\eventsApartmentThreaded.py:
  59:             return True
  62:             return False

PythonVenv\Lib\site-packages\win32com\demos\excelAddin.py:
  76:         return cancel

PythonVenv\Lib\site-packages\win32com\demos\excelRTDServer.py:
  107:     method to see if we're still alive. It must return a non-zero value, or
  163:         return result, GetNewValues
  175:         return self.IsAlive
  181:           * Return the current number of topics, via the "ByRef" TopicCount
  182:           * Return a 2d SafeArray of the topic data.
  205:         # TopicCount is meant to be passed to us ByRef, so return it as well, as per
  207:         return tuple(results), TopicCount
  224:         return self.IsAlive
  235:           * GetValue() method which returns an atomic value.
  285:         return self.__currentValue
  292:         return self.__dirty
  341:         # As soon as we set up shop here, we _must_ return control back to excel.
  372:         return TimeTopic(TopicStrings)
  391:             # We could simply return a "# ERROR" type string as the
  404:         return datetime.datetime.now()

PythonVenv\Lib\site-packages\win32com\demos\iebutton.py:
  104:             cmdtext = None  # must return None if nothing requested.
  111:         return result, cmdtext
  124:             # finally ask for the internet explorer application, returned as a dispatch object
  135:         return self._reg_clsid_

PythonVenv\Lib\site-packages\win32com\demos\ietoolbar.py:
  109:         return struct.pack(*(full_fmt,) + tuple(vals))
  180:         return win32gui.SendMessage(
  185:         return self.hwnd
  209:         return self.toolbar.GetSafeHwnd()
  254:             # finally ask for the internet explorer application, returned as a dispatch object
  292:         return self._reg_clsid_
  302:         return (

PythonVenv\Lib\site-packages\win32com\demos\outlookAddin.py:
  54:         return cancel

PythonVenv\Lib\site-packages\win32com\demos\trybag.py:
  22:         return self.data[propName]

PythonVenv\Lib\site-packages\win32com\HTML\GeneratedSupport.html:
  34: <B><P>Returns</P>
  50: <P>Returns:</P>
  66: <P>Given a Program ID, return a Python class which wraps the COM object</P>
  67: <B><P>Returns</P>
  75: <P>Given a Program ID, return a Python module which contains the class which wraps the COM object.</P>
  76: <B><P>Returns</P>
  84: <P>Given a CLSID, return a Python module which contains the class which wraps the COM object.</P>
  85: <B><P>Returns</P>
  93: <B><P>Returns</P>

PythonVenv\Lib\site-packages\win32com\HTML\PythonCOM.html:
  34: <P>This is internal code used by the above areas to managed the conversion to and from Python/COM types and values. This includes code to convert an arbitrary Python object into a COM variant, manages return types, and a few other helpers. </P>
  53: <P>When the only support required by Python is IDispatch, everything is simple - every object returned from QueryInterface is a PyIDispatch object. But this does not extend to other types, such as ITypeLib, IConnectionPoint etc., which are required for full COM support. </P>
  59: <P>Python/COM will therefore maintain a map of UID's to Python type objects. Whenever QueryInterface is called, Python will lookup this map, to determine if the object type is supported. If the object is supported, then an object of that type will be returned. If the object is not supported, then a PyIUnknown object will be returned. </P>
  62: </CODE><P>will return a PyIDispatch object, whereas </P>
  63: <CODE><P>&gt;&gt;&gt; unk=someobj.QueryInterface(SomeUnknownIID) # returns PyIUnknown<BR>
  77: <P>Would correctly return an object defined in the extension module. </P>
  88: <P>For simple calls, there are 2 helpers available which will convert to and from PyObjects and VARIANTS. The call to convert a Python object to a VARIANT is simple in that it returns a VARIANT of the most appropriate type for the Python object - ie, the type of the Python object determines the resulting VARIANT type. </P>

PythonVenv\Lib\site-packages\win32com\HTML\QuickStartClientCom.html:
  60: <P>Hopefully, the answer is <I>you shouldn't need to</I>.  All generated file support is generally available directly via <I>win32com.client.Dispatch</I> and <I>win32com.client.constants</I>.  But should you ever really need the Python module object, the win32com.client.gencache module has functions specifically for this. The functions GetModuleForCLSID and GetModuleForProgID both return Python module objects that you can use in your code. See the docstrings in the gencache code for more details.</P>

PythonVenv\Lib\site-packages\win32com\HTML\QuickStartServerCom.html:
   35: <P>return "Hello" + " " * self.softspace + who</P></DIR>
   48: <CODE><P>return "Hello" + " " * self.softspace + str(who)</P></DIR>
  167: <P>Servers need to be able to provide exception information to their client. In some cases, it may be a simple return code (such as E_NOTIMPLEMENTED), but often it can contain much richer information, describing the error on detail, and even a help file and topic where more information can be found. </P>

PythonVenv\Lib\site-packages\win32com\include\PythonCOM.h:
   36:  Python lock, and must release it before returning.
  166: // method that returns a PyIEnum object
  196:             return 0;
  198:             return -1;
  199:         return 1;
  201:     // These iter are a little special, in that returning NULL means
  203:     virtual PyObject *iter() { return NULL; }
  204:     virtual PyObject *iternext() { return NULL; }
  227: // ALL of these set an appropriate Python error on bad return.
  229: // Given a Python object that is a registered COM type, return a given
  249: // Given an IUnknown and an Interface ID, create and return an object
  253: // Under the principal of least surprise, this will return Py_None is punk is NULL.
  302: // they return NULL back to Python to indicate the error.
  303: // All these functions return NULL so interfaces can generally
  304: // just "return PyCom_BuildPyException(hr, punk, IID_IWhatever)"
  321: // If they do not exist, return None, or raise an error fetching them
  341: // converted into COM error information.  The HRESULT returned should
  342: // be returned by the COM function, and these functions also set the
  351: // Used in gateways to SetErrorInfo() with a simple HRESULT, then return it.
  384: // raised and NULL is returned if an error occurs.
  398: //   pVarResult : The variant for the return value of the Python call.
  435:     static PyIUnknown *PyObConstruct(IUnknown *pInitObj) { return new classname(pInitObj); }
  437:     static PyIUnknown *PyObConstruct(IUnknown *pInitObj) { return new classname(pInitObj); }            \
  440:         return PyCom_BuildPyException(hr, GetI(self), iid);                                             \
  737: // Size info is available (eg, a fn returns a string and also fills in a size variable)
  752:         return FALSE;
  756:         return FALSE;
  761:             return FALSE;
  763:     return TRUE;

PythonVenv\Lib\site-packages\win32com\include\PythonCOMServer.h:
   20: // is simply a function that takes a Python instance as as argument, and returns
   36:             return E_INVALIDARG;                                                                                 \
   42:         return *ppResult ? S_OK : E_OUTOFMEMORY;                                                                 \
   46:     virtual IID GetIID(void) { return theIID; }                                                                  \
   50:             return NULL;                                                                                         \
   52:             return (IInterface *)this;                                                                           \
   54:             return gatewaybaseclass::ThisAsIID(iid);                                                             \
   56:     STDMETHOD_(ULONG, AddRef)(void) { return gatewaybaseclass::AddRef(); }                                       \
   57:     STDMETHOD_(ULONG, Release)(void) { return gatewaybaseclass::Release(); }                                     \
   58:     STDMETHOD(QueryInterface)(REFIID iid, void **obj) { return gatewaybaseclass::QueryInterface(iid, obj); };
  141:             return E_INVALIDARG;
  147:         return *ppResult ? S_OK : E_OUTOFMEMORY;
  152:     virtual IID GetIID(void) { return IID_IUnknown; }

PythonVenv\Lib\site-packages\win32com\makegw\makegw.py:
   36:   other return policies -- By default, Python never sees the return SCODE from
   37:   a COM function.  The interface usually returns None if OK, else a COM exception
   41:     did fail or succeed.  For example, some functions return a BOOLEAN result
   43:   * FAILED(scode) for the interface still has valid data to return (by default,
   44:     the code generated does not process the return values, and raise an exception
  193: 	return (%(name)s *)Py%(base)s::GetI(self);
  211: 		return NULL;
  274:             '\tif ( !PyArg_ParseTuple(args, "%s:%s"%s) )\n\t\treturn NULL;\n'
  280:             f.write("\tif (!bPythonIsHappy) return NULL;\n")
  292: 		return PyCom_BuildPyException(hr, p%(ptr)s, IID_%(interfacename)s );
  317:                 '%s\n%s\tPyObject *pyretval = Py_BuildValue("%s"%s);\n%s\treturn pyretval;'
  321:             f.write("\tPy_INCREF(Py_None);\n\treturn Py_None;\n")
  452:                         f.write("\tif (%s==NULL) return E_POINTER;\n" % arg.name)
  478:                             '\tif (ob%s==NULL) return MAKE_PYCOM_GATEWAY_FAILURE_CODE("%s");\n'
  503:             f.write("\tif (FAILED(hr)) return hr;\n")
  541:                     '\tif (!%s(result, "%s" %s))\n\t\treturn MAKE_PYCOM_GATEWAY_FAILURE_CODE("%s");\n'
  552:         f.write("\treturn hr;\n}\n\n")

PythonVenv\Lib\site-packages\win32com\makegw\makegwenum.py:
   18:     return not (enumtype[0] in string.uppercase and enumtype[2] in string.uppercase)
   58: 	return (IEnum%(enumtype)s *)PyIUnknown::GetI(self);
   67: 		return NULL;
   71: 		return NULL;
   76: 		return NULL;
   91: 		return PyCom_BuildPyException(hr,pIE%(enumtype)s, IID_IE%(enumtype)s);
  114: 	return result;
  122: 		return NULL;
  126: 		return NULL;
  132: 		return PyCom_BuildPyException(hr, pIE%(enumtype)s, IID_IE%(enumtype)s);
  135: 	return Py_None;
  142: 		return NULL;
  146: 		return NULL;
  152: 		return PyCom_BuildPyException(hr, pIE%(enumtype)s, IID_IE%(enumtype)s);
  155: 	return Py_None;
  162: 		return NULL;
  166: 		return NULL;
  173: 		return PyCom_BuildPyException(hr, pIE%(enumtype)s, IID_IE%(enumtype)s);
  175: 	return PyCom_PyObjectFromIUnknown(pClone, IID_IEnum%(enumtype)s, FALSE);
  218: STDMETHODIMP_(ULONG) PyGEnum%(enumtype)s::AddRef(void) {return PyGatewayBase::AddRef();}
  219: STDMETHODIMP_(ULONG) PyGEnum%(enumtype)s::Release(void) {return PyGatewayBase::Release();}
  220: STDMETHODIMP PyGEnum%(enumtype)s::QueryInterface(REFIID iid, void ** obj) {return PyGatewayBase::QueryInterface(iid, obj);}
  221: STDMETHODIMP PyGEnum%(enumtype)s::GetTypeInfoCount(UINT FAR* pctInfo) {return PyGatewayBase::GetTypeInfoCount(pctInfo);}
  222: STDMETHODIMP PyGEnum%(enumtype)s::GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo FAR* FAR* pptInfo) {return PyGatewayBase::GetTypeInfo(itinfo, lcid, pptInfo);}
  223: STDMETHODIMP PyGEnum%(enumtype)s::GetIDsOfNames(REFIID refiid, OLECHAR FAR* FAR* rgszNames, UINT cNames, LCID lcid, DISPID FAR* rgdispid) {return PyGatewayBase::GetIDsOfNames( refiid, rgszNames, cNames, lcid, rgdispid);}
  224: STDMETHODIMP PyGEnum%(enumtype)s::Invoke(DISPID dispid, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS FAR* params, VARIANT FAR* pVarResult, EXCEPINFO FAR* pexcepinfo, UINT FAR* puArgErr) {return PyGatewayBase::Invoke( dispid, riid, lcid, wFlags, params, pVarResult, pexcepinfo, puArgErr);}
  235: 		return hr;
  259: 			return PyCom_SetCOMErrorFromPyException(IID_IEnum%(enumtype)s);
  265: 	return len < (int)celt ? S_FALSE : S_OK;
  270: 	return PyCom_HandleIEnumNoSequence(IID_IEnum%(enumtype)s);
  277: 	return InvokeViaPolicy("Skip", NULL, "i", celt);
  283: 	return InvokeViaPolicy("Reset");
  293: 		return hr;
  301: 		/* the wrong kind of object was returned to us */
  303: 		return PyCom_SetCOMErrorFromSimple(E_FAIL, IID_IEnum%(enumtype)s);
  315: 		return PyCom_SetCOMErrorFromSimple(E_FAIL, IID_IEnum%(enumtype)s);
  319: 	** Get the interface we want. note it is returned with a refcount.
  327: 	return PyCom_CheckIEnumNextResult(hr, IID_IEnum%(enumtype)s);

PythonVenv\Lib\site-packages\win32com\makegw\makegwparse.py:
   48:         return a string prefix so I can pass to a function with the
   52:         it would return "&", so that a variable declared with indirection of 1
   57:             return ""
   59:             return "&"
   61:             return "*"
   63:             return "?? (%d)" % (dif,)
   74:         return self._IndirectPrefix(indirectFrom, indirectionTo) + self.arg.name
   78:         return self.arg.name
   84:             return self.GetIndirectedArgName(None, 1)
   86:         return self.GetIndirectedArgName(self.builtinIndirection, 1)
   99:         The name must always be returned.
  104:         # the first return element is the variable to be passed as
  109:         # the second return element is the variable declaration; it
  111:         return self.GetIndirectedArgName(
  116:         "Return cleanup code for C++ args passed to the interface method."
  118:             return "/* GetInterfaceArgCleanup output goes here: %s */\n" % self.arg.name
  120:             return ""
  123:         """Return cleanup code for C++ args passed to the interface
  126:             return (
  131:             return ""
  134:         return self.arg.unc_type
  140:         return self.arg.indirectionLevel
  143:             return self.arg.indirectionLevel
  145:             return self.declaredIndirection
  151:         # 	return "\t%s %s;\n" % (self.arg.type, self.arg.name)
  154:             return (
  159:             return ""
  164:             return "/* GetParsePostCode code goes here: %s */\n" % self.arg.name
  166:             return ""
  171:             return "/* GetBuildForInterfacePreCode goes here: %s */\n" % self.arg.name
  173:             return ""
  181:         return s
  186:             return "/* GetBuildForInterfacePostCode goes here: %s */\n" % self.arg.name
  187:         return ""
  195:         return s
  198:         return "// @pyparm %s|%s||Description for %s" % (
  205:         "Returns a string with the description of the type.	 Used for doco purposes"
  206:         return None
  210:         return 0
  216:         return "f"
  220:         return "\tdouble dbl%s;\n" % self.arg.name
  223:         return "&dbl" + self.arg.name
  226:         return "float"
  229:         return "&dbl" + self.arg.name
  232:         return "\tdbl" + self.arg.name + " = " + self.arg.name + ";\n"
  235:         return (
  248:         return s
  255:         return "i"
  259:         return "\tINT i%s;\n" % self.arg.name
  262:         return "&i" + self.arg.name
  265:         return "int"
  268:         return "&i" + self.arg.name
  271:         return "\ti" + self.arg.name + " = " + self.arg.name + ";\n"
  274:         return (
  287:         return s
  293:         return "O"
  297:         return "\tPyObject *ob%s;\n" % self.arg.name
  300:         return "&ob" + self.arg.name
  303:         return "int/long"
  306:         return "ob" + self.arg.name
  309:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  312:         return (
  319:         return "\tob%s = PyWinObject_FromULONG_PTR(%s);\n" % (
  325:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  332:         return "O"
  335:     # 	return ArgFormatter.GetInterfaceCppObjectInfo(self)[0], \
  339:         return "\tPyObject *ob%s;\n" % self.arg.name
  342:         return "&ob" + self.arg.name
  345:         return "<o Py%s>" % self.arg.type
  348:         return "ob" + self.arg.name
  351:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  356:         return "<o unicode>"
  359:         return (
  366:         return "\tob%s = MakeBstrToObj(%s);\n" % (self.arg.name, notdirected)
  369:         return "\tSysFreeString(%s);\n" % (
  374:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  379:         return "<o unicode>"
  383:             return self.arg.type[:2] + self.arg.type[3:]
  385:             return self.arg.unc_type
  388:         return (
  394:         return "\tSysFreeString(%s);\n" % self.GetIndirectedArgName(None, 1)
  399:         return "\tob%s = MakeOLECHARToObj(%s);\n" % (self.arg.name, notdirected)
  402:         # memory returned into an OLECHAR should be freed
  403:         return "\tCoTaskMemFree(%s);\n" % (
  408:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  413:         return "string/<o unicode>"
  417:             return self.arg.type[:2] + self.arg.type[3:]
  419:             return self.arg.unc_type
  422:         return (
  428:         return "\tPyWinObject_FreeTCHAR(%s);\n" % self.GetIndirectedArgName(None, 1)
  433:         return "\tob%s = PyWinObject_FromTCHAR(%s);\n" % (self.arg.name, notdirected)
  436:         return "// ??? - TCHAR post code\n"
  439:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  444:         return "<o PyIID>"
  447:         return "\tif (!PyWinObject_AsIID(ob%s, &%s)) bPythonIsHappy = FALSE;\n" % (
  455:         return "\tob%s = PyWinObject_FromIID(%s);\n" % (self.arg.name, notdirected)
  458:         return self.arg.name, "IID %s" % (self.arg.name)
  474:         return "<o PyDateTime>"
  479:         return (
  491:         return "\tob%s = new PyTime(%s);\n" % (self.arg.name, notdirected)
  497:             # memory returned into an OLECHAR should be freed
  499:         return ret + ArgFormatterPythonCOM.GetBuildForInterfacePostCode(self)
  504:         return "<o STATSTG>"
  507:         return (
  514:         return (
  527:         return "<o %s>" % self.arg.type
  530:         return "\tif (!PyObject_As%s(ob%s, &%s) bPythonIsHappy = FALSE;\n" % (
  537:         return "\tPyObject_Free%s(%s);\n" % (self.arg.type, self.arg.name)
  541:         return "\tob%s = PyObject_From%s(%s);\n" % (
  550:         return "<o PyIDL>"
  553:         return (
  559:         return "\tPyObject_FreePIDL(%s);\n" % (self.arg.name,)
  563:         return "\tob%s = PyObject_FromPIDL(%s);\n" % (
  571:         return "<o PyHANDLE>"
  574:         return (
  581:         return "\tob%s = PyWinObject_FromHANDLE(%s);\n" % (
  589:         return "LARGE_INTEGER"
  592:         return "<o %s>" % self.GetKeyName()
  595:         return "\tif (!PyWinObject_As%s(ob%s, %s)) bPythonIsHappy = FALSE;\n" % (
  603:         return "\tob%s = PyWinObject_From%s(%s);\n" % (
  612:         return "ULARGE_INTEGER"
  617:         return self.GetIndirectedArgName(1, self.arg.indirectionLevel), "%s * %s" % (
  629:         return (
  635:         return "\tob%s = PyCom_PyObjectFromIUnknown(%s, IID_%s, FALSE);\n" % (
  643:         return "\tob%s = PyCom_PyObjectFromIUnknown(%s%s, IID_%s, TRUE);\n" % (
  651:         return "\tif (%s) %s->Release();\n" % (self.arg.name, self.arg.name)
  656:         return (
  663:         return "\tob%s = PyCom_PyObjectFromVariant(%s);\n" % (
  669:         return "\tPy_XDECREF(ob%s);\n" % self.arg.name
  703:         return ConvertSimpleTypes[self.arg.type][2]
  706:         return ConvertSimpleTypes[self.arg.type][1]
  781:         return clz(arg, bin, decl)
  784:             return ArgFormatterInterface(arg, 0, 1)
  864:         return typ in self.inout
  870:         return ret
  909:                     "Method %s - Only HRESULT return types are supported." % self.name
  955:     """Find and return an interface in a file
  959:     Upon return, the interface itself has been built,
  975:         return interface
  980:     """Find, parse and return an interface in a file
  984:     Upon return, the interface itself is fully built,
  987:         return find_interface(interfaceName, file)

PythonVenv\Lib\site-packages\win32com\server\connect.py:
  43:         return win32com.server.util.wrap(self)
  56:         return self.cookieNo
  72:             return win32com.server.util.wrap(self)

PythonVenv\Lib\site-packages\win32com\server\dispatcher.py:
   34:     # Note the "return self._HandleException_()" is purely to stop pychecker
   40:             return pythoncom.WrapObject(self, reqIID)
   42:             return self._HandleException_()
   46:             return self.policy._QueryInterface_(iid)
   48:             return self._HandleException_()
   52:             return self.policy._Invoke_(dispid, lcid, wFlags, args)
   54:             return self._HandleException_()
   58:             return self.policy._GetIDsOfNames_(names, lcid)
   60:             return self._HandleException_()
   64:             return self.policy._GetTypeInfo_(index, lcid)
   66:             return self._HandleException_()
   70:             return self.policy._GetTypeInfoCount_()
   72:             return self._HandleException_()
   76:             return self.policy._GetDispID_(name, fdex)
   78:             return self._HandleException_()
   82:             return self.policy._InvokeEx_(
   86:             return self._HandleException_()
   90:             return self.policy._DeleteMemberByName_(name, fdex)
   92:             return self._HandleException_()
   96:             return self.policy._DeleteMemberByDispID_(id)
   98:             return self._HandleException_()
  102:             return self.policy._GetMemberProperties_(id, fdex)
  104:             return self._HandleException_()
  108:             return self.policy._GetMemberName_(dispid)
  110:             return self._HandleException_()
  114:             return self.policy._GetNextDispID_(fdex, flags)
  116:             return self._HandleException_()
  120:             return self.policy._GetNameSpaceParent_()
  122:             return self._HandleException_()
  158:         return rc
  162:         return DispatcherBase._GetIDsOfNames_(self, names, lcid)
  166:         return DispatcherBase._GetTypeInfo_(self, index, lcid)
  170:         return DispatcherBase._GetTypeInfoCount_(self)
  174:         return DispatcherBase._Invoke_(self, dispid, lcid, wFlags, args)
  178:         return DispatcherBase._GetDispID_(self, name, fdex)
  185:         return DispatcherBase._InvokeEx_(
  191:         return DispatcherBase._DeleteMemberByName_(self, name, fdex)
  195:         return DispatcherBase._DeleteMemberByDispID_(self, id)
  199:         return DispatcherBase._GetMemberProperties_(self, id, fdex)
  203:         return DispatcherBase._GetMemberName_(self, dispid)
  207:         return DispatcherBase._GetNextDispID_(self, fdex, flags)
  211:         return DispatcherBase._GetNameSpaceParent_(self)

PythonVenv\Lib\site-packages\win32com\server\exception.py:
   50:         scode -- An integer scode to be returned to the server, if necessary.
   81:         return "<COM Exception - scode=%s, desc=%s>" % (self.scode, self.description)
   94:         return issubclass(t, pythoncom.com_error)
   96:         return t is pythoncon.com_error
  103:         return issubclass(t, COMException)
  105:         return 0

PythonVenv\Lib\site-packages\win32com\server\factory.py:
   8:     Returns a list, which should be passed to RevokeClassFactories
  21:     return ret

PythonVenv\Lib\site-packages\win32com\server\policy.py:
   52:  The general rule is that the **only** exception returned from Python COM 
  153:     return retObj._CreateInstance_(clsid, reqIID)
  220:             return pythoncom.WrapObject(self, reqIID)
  280:             return 1
  281:         return self._query_interface_(iid)
  287:         Returns a result to the COM framework indicating the interface is not supported.
  289:         return 0
  305:         return self._invoke_(dispid, lcid, wFlags, args)
  310:         return S_OK, -1, self._invokeex_(dispid, lcid, wFlags, args, None, None)
  323:         return self._getidsofnames_(names, lcid)
  327:         return (self._getdispid_(names[0], 0),)
  334:         return self._getdispid_(name, fdex)
  339:             return self._name_to_dispid_[name.lower()]
  357:         return self._invokeex_(dispid, lcid, wFlags, args, kwargs, serviceProvider)
  368:         return self._deletememberbyname_(name, fdex)
  374:         return self._deletememberbydispid(id)
  380:         return self._getmemberproperties_(id, fdex)
  386:         return self._getmembername_(dispid)
  392:         return self._getnextdispid_(fdex, dispid)
  400:             return ids[0]
  403:                 return ids[ids.index(dispid) + 1]
  410:         return self._getnamespaceparent()
  453:             return self._dispid_to_func_[dispid]
  455:             return self._dispid_to_get_[dispid]
  457:             return self._dispid_to_put_[dispid]
  485:                   It is the responsibility of the method to ensure the returned
  583:             return []
  593:                     return [type_info]
  596:         return []
  601:         return len(self._typeinfos_)
  608:         return 0, self._typeinfos_[index]
  618:                 return last_dispid
  639:                     return func(*args)
  657:             return retob
  675:             return
  709:         return tuple(ret), kwArgs
  716:         return DesignatedWrapPolicy._invokeex_(
  753:             return self._name_to_dispid_[lname]
  758:             return dispid
  761:         return S_OK, -1, self._invokeex_(dispid, lcid, wFlags, args, None, None)
  774:         return self._obj_._dynamic_(name, lcid, wFlags, args)
  783:     Given a function specified by 'module.function', return a callable object
  794:         return getattr(module, fname)
  796:         return globals()[spec]
  802:     Call a function specified by 'module.function' and return the result.
  805:     return resolve_func(spec)(*args)
  817:     return sys.modules[mname]

PythonVenv\Lib\site-packages\win32com\server\register.py:
   39:         return win32api.RegQueryValue(base, path)
   41:         return None
   88:     return pythoncom.CoCreateInstance(
   98:         return sys.executable
  125:         return None
  126:     return exeName
  150:     return pyfile
  339:     """Given a server, return a list of of ("key", root), which are keys recursively
  358:     return ret
  378:     """Given a CLSID for a server and option name, return the option value"""
  380:     return _get_string(keyNameRoot)
  385:         return getattr(ob, attr)
  393:         return default
  397:             return val
  398:     return default
  533:     return ret
  637:         return UnregisterInfoClasses(*classes, **flags)

PythonVenv\Lib\site-packages\win32com\server\util.py:
   13:     Returns a client side PyI{iid} interface.
   34:     return ob
   40:     Given an interface which wraps up a Gateway, return the object behind
   47:     return ob._obj_
   70:             return 1
   75:         return result
   87:         return self._wrap(self.__class__(self._list_, self.index))
   90:         return wrap(ob)
   97:     return through the COM layers, then a ListEnumeratorGateway can be
   98:     used to wrap those items before returning them (from the Next() method).
  106:         return map(self._wrap, result)
  122:     created, then wrapped up for return through the COM framework.
  128:     return wrap(ob, iid, usePolicy=usePolicy, useDispatcher=useDispatcher)
  155:             return self.data[args[0]]
  162:         return len(self.data)
  181:         return NewEnum(self.data)
  191:     created, then wrapped up for return through the COM framework.
  195:     return pythoncom.WrapObject(
  208:         return self.file.read(amount)
  212:         return len(data)
  215:         return self._wrap(self.__class__(self.file))
  220:         dest.Write(data)  ## ??? Write does not currently return the length ???
  221:         return cbread, cbread
  226:         return self.file.tell()
  229:         return wrap(ob)

PythonVenv\Lib\site-packages\win32com\servers\dictionary.py:
   23: All keys are defined, returning VT_NULL (None) if a value has not been
   26: The object responds to the _NewEnum method by returning an enumerator over
   64:         return pythoncom.WrapObject(self, reqIID)
   90:                     return self._obj_[key]
   92:                     return None  # unknown keys return None (VT_NULL)
  104:             return S_OK
  111:             return len(self._obj_)
  114:             return util.NewEnum(list(self._obj_.keys()))
  123:             return (self._name_to_dispid_[name],)
  133:     return UseCommandLine(DictionaryPolicy)

PythonVenv\Lib\site-packages\win32com\servers\interp.py:
  38:         return eval(str(exp), self.dict)
  50:     return win32com.server.register.UseCommandLine(Interpreter)

PythonVenv\Lib\site-packages\win32com\servers\perfmon.py:
  23:             return win32pdhutil.GetPerformanceAttributes(

PythonVenv\Lib\site-packages\win32com\servers\PythonTools.py:
  13:             return "reload succeeded."
  14:         return "no reload performed."
  19:         return str(sys.path)
  22:         return repr(arg)

PythonVenv\Lib\site-packages\win32com\servers\test_pycomtest.py:
   28:         return str * 2
   31:         return str * 2
   50:         return wrap(self)
   53:         return indisp
   56:         return v * 2
   59:         return v * 2
   79:         return len(ints)
   82:         return len(ints)
   85:         return len(ints)
   88:         return len(buf)
  112:         return not inval
  115:         return inval
  125:             return constants.TestAttr1_1
  127:             return constants.TestAttr1
  129:             return -1
  132:         return inval
  135:         return winerror.S_OK, fval * 2, not bval, lval * 2
  144:         return 1
  147:         return self.longval
  153:         return self.ulongval
  159:         return self.intval

PythonVenv\Lib\site-packages\win32com\test\errorSemantics.py:
    9: #   nominated  scode is returned directly (with the scode also
  210:             return

PythonVenv\Lib\site-packages\win32com\test\GenTestScripts.py:
  22:     return os.path.join(win32api.GetFullPathName(win32com.test.__path__[0]), genDir)

PythonVenv\Lib\site-packages\win32com\test\pippo_server.py:
  32:         return wrap(CPippo())
  35:         return in1, inout1 * 2
  39:         # Yet, we are not allowed to return a tuple, but need to convert it to a list first. (Bug?)
  40:         return list(in1)

PythonVenv\Lib\site-packages\win32com\test\policySemantics.py:
  23:         return win32com.server.util.NewEnum(self.list)
  26:         # should return an array.
  27:         return self.list
  30:         # return the sum
  31:         return sum(self.list)
  34:         return value in self.list
  87:         raise Error("Evaluate returned %d" % rc)

PythonVenv\Lib\site-packages\win32com\test\testAccess.py:
   19:     # Creates a test access database - returns the filename.
  108:     return dbname
  169:             return

PythonVenv\Lib\site-packages\win32com\test\testADOEvents.py:
  91:         return

PythonVenv\Lib\site-packages\win32com\test\testall.py:
   70:             return ""
   73:     return data
   84:     return RemoveRefCountOutput(data)
  207:         return None, None
  209:     return mod, func
  212: # Return a test suite all loaded with the tests we want to run
  253:     return suite, import_failures

PythonVenv\Lib\site-packages\win32com\test\testArrays.py:
  45:         return a
  49:     return ret

PythonVenv\Lib\site-packages\win32com\test\testClipboard.py:
   20:     return wrap(ob, iid=iid, useDispatcher=0)
   42:             return NewEnum(self.supported_fe, iid=iid)
   57:         return ret_stg
   68:         return None  # should check better
   72:         # return fe
   80:         return NewEnum(self.supported_fe, iid=pythoncom.IID_IEnumFORMATETC)
  144:         # it must return it too.

PythonVenv\Lib\site-packages\win32com\test\testCollections.py:
  26:     return win32com.client.Dispatch(o)
  36:     return win32com.client.Dispatch(o)

PythonVenv\Lib\site-packages\win32com\test\testConversionErrors.py:
  16:     return win32com.client.Dispatch(win32com.server.util.wrap(Tester()))

PythonVenv\Lib\site-packages\win32com\test\testDates.py:
  17:         return d
  21:     return win32com.client.Dispatch(win32com.server.util.wrap(Tester()))

PythonVenv\Lib\site-packages\win32com\test\testDCOM.py:
  28:         return

PythonVenv\Lib\site-packages\win32com\test\testDictionary.py:
  16:     return win32com.client.Dispatch("Python.Dictionary")

PythonVenv\Lib\site-packages\win32com\test\testDynamic.py:
  15:             return getattr(self, name)(*args)
  23:                 return ret
  31:             return

PythonVenv\Lib\site-packages\win32com\test\testExchange.py:
   24:             return win32api.RegQueryValueEx(key, "DefaultProfile")[0]
   28:         return None
   51:         return
  106:             return

PythonVenv\Lib\site-packages\win32com\test\testExplorer.py:
   42:         return
   75:         return
  116:                 return

PythonVenv\Lib\site-packages\win32com\test\testGatewayAddresses.py:
  10: # IID_IPersistStorage should all return the same gateway object.
  18: # returned by the QIs follow all the rules.
  30: # "whenever you return an _object_ from _query_interface_(), you must return the
  31: # same object each time for a given IID.  Note that you must return the same
  49:     return addr1 == addr2
  56:     return CheckSameCOMObject(u1, u2)
  90:             return wrap(DelegatedDummy())

PythonVenv\Lib\site-packages\win32com\test\testGIT.py:
  35:         raise ValueError("The interpreter returned the wrong result.")
  56:     return pythoncom.CoCreateInstance(
  90:     Returns the handles the threads will set when complete.
  97:     return ret

PythonVenv\Lib\site-packages\win32com\test\testIterators.py:
   84:             return ob, iter.QueryInterface(pythoncom.IID_IEnumVARIANT)
  106:         return win32com.server.util.NewCollection(self.data)
  115:             return ob, enum.QueryInterface(pythoncom.IID_IEnumVARIANT)
  136:     return suite

PythonVenv\Lib\site-packages\win32com\test\testmakepy.py:
  45:     return num

PythonVenv\Lib\site-packages\win32com\test\testMarshal.py:
   63:         Returns the handles the threads will set when complete.
   81:         return threads, events
   92:         Returns the handles the threads will set when complete.
  108:         return threads, events

PythonVenv\Lib\site-packages\win32com\test\testMSOffice.py:
  26:         # NOTE - using "client.Dispatch" would return an msword8.py instance!

PythonVenv\Lib\site-packages\win32com\test\testMSOfficeEvents.py:
   43:                 return 1
  107:                 return 0
  112:             return 0
  113:     return 1
  122:     return rc

PythonVenv\Lib\site-packages\win32com\test\testPersist.py:
   46:         return result
   60:         return len(data)
   66:         return S_OK
   74:         return S_OK
   83:         print("returning Stat " + str(statflag))
   84:         return (
  125:         return S_OK

PythonVenv\Lib\site-packages\win32com\test\testPippo.py:
  49:             return

PythonVenv\Lib\site-packages\win32com\test\testPyComTest.py:
   64:             "%s with arg %r didn't raise %s - returned %r" % (func, arg, exc, got)
  121:         return out1 + 2, out2 + 2
  153:         return out1 + 2, out2 + 2
  191:     # functions always return from the interface.
  468:         # Yay - is now an instance returned!
  470:             "GetMultipleInterfaces did not return instances - got '%s', '%s'" % (i1, i2)
  529:         raise error("CastTo should have returned the same object")
  575:         return
  582:         # pythoncom always returns arrays as tuples.
  648:                     "Random access into element %d failed - return was %s"
  690:         return

PythonVenv\Lib\site-packages\win32com\test\Testpys.sct:
  42:   return PyProp1
  49:   return PyProp2
  56:   return "PyMethod1 called"
  59:   return "PyMethod2 called"

PythonVenv\Lib\site-packages\win32com\test\testShell.py:
  127:         return ctime, atime, wtime
  136:         # The returned objects *always* have dwFlags and cFileName.

PythonVenv\Lib\site-packages\win32com\test\testStorage.py:
  71:             ## FMTID_UserDefinedProperties can't exist without FMTID_DocSummaryInformation, and isn't returned independently from Enum

PythonVenv\Lib\site-packages\win32com\test\testStreams.py:
  25:         return pythoncom.IID_NULL
  28:         return self.dirty
  39:         return 1024
  56:         return result
  61:         return len(data)
  76:         return self.index
  81:     returned more data than requested.
  85:         return str2bytes("x") * (amount + 1)

PythonVenv\Lib\site-packages\win32com\test\testvb.py:
   34:         "CallbackResultOneByRefButReturnNone",
   35:         "CallbackVoidOneByRefButReturnNone",
   42:         return intVal + 1
   45:         return intVal, intVal + 1
   48:         return int1 + int2, int1 - int2
   51:         return 0, strVal + " has visited Python"
   57:         # returning as a list forces it be processed as a single result
   60:         return ret
   63:         return list(arrayVal[:-1])
   70:         return list(arrayVal), ret
   72:     def CallbackResultOneByRefButReturnNone(self, intVal):
   73:         return
   75:     def CallbackVoidOneByRefButReturnNone(self, intVal):
   76:         return
  164:         # Hence 2 return values - function and byref.
  182:             return r()
  183:         return r
  272:         return
  341:         # The function itself also _returns_ the arram param.
  590:     return suite

PythonVenv\Lib\site-packages\win32com\test\testxslt.xsl:
  32:       return "The jscript test worked";
  41:   return "The Python test worked"
  48:      make sure it's returning the right kind of object -->

PythonVenv\Lib\site-packages\win32com\test\util.py:
   67:             return
  124:         return output
  139:             return
  169:         return "".join(self.captured)
  172:         return len("".join(self.captured).split("\n"))
  200:     return handler.emitted, old_log
  217:     return LeakTestCase(real_test)
  260:         return "exec: " + cmd_repr

PythonVenv\Lib\site-packages\win32comext\adsi\__init__.py:
   47:         return win32com.client.dynamic.Dispatch(ob, name, ADSIDispatch)
   48:     return ob
   59:         return self.__GetIndex(index)
   62:         return self.__GetIndex(index)
   73:             return _get_good_ret(result[0])
   82:         self, ob, userName=None, returnCLSID=None, UnicodeToString=None
   88:         return ADSIDispatch(ob, olerepr, userName)
   92:             return ADSIEnumerator(self)
   95:             return win32com.client.CDispatch._NewEnum(self)
   99:             return getattr(self._oleobj_, attr)
  101:             return win32com.client.CDispatch.__getattr__(self, attr)
  105:         return _get_good_ret(ret)
  114:     return _get_good_ret(ret)
  122:     return _get_good_ret(ret)

PythonVenv\Lib\site-packages\win32comext\adsi\adsicon.py:
  226:     return _sc

PythonVenv\Lib\site-packages\win32comext\adsi\demos\scp.py:
   62: # Returns distinguished name of SCP.
  118:     return new
  239:         | dscon.DS_RETURN_DNS_NAME
  285:     return ret
  303:     return scp.distinguishedName
  315:     return sc
  338:     return spn
  351:     return g_createdSPNLast
  363:     return g_createdSPNLast
  369:     return "Password changed OK"
  384:         return description

PythonVenv\Lib\site-packages\win32comext\adsi\demos\search.py:
  18:     return ADsTypeNameMap.get(type_val, hex(type_val))
  22:     return pywintypes.IID(b, True)
  26:     return str(pywintypes.SID(b))
  51:         return gc
  52:     return None
  71:         return
  75:     log(3, "SetSearchPreference returned %d/%r", hr, statuses)
  87:             # Loop over all columns returned

PythonVenv\Lib\site-packages\win32comext\authorization\demos\EditSecurity.py:
   88:         return flags, hinstance, servername, objectname, pagetitle, objecttype
   96:             return win32security.SECURITY_DESCRIPTOR()
   98:             ## GetFileSecurity sometimes fails to return flags indicating that an ACE is inherited
   99:             return win32security.GetNamedSecurityInfo(
  121:         """Returns a tuple of (AccessRights, DefaultAccess), where AccessRights is a sequence of tuples representing
  196:         return (accessrights, 0)
  202:         return win32security.MapGenericMask(
  214:         Returns a sequence of tuples representing SI_INHERIT_TYPE structs, containing
  218:         return (
  233:         return None
  236:         """Creates an ACL editor dialog based on parameters returned by interface methods"""

PythonVenv\Lib\site-packages\win32comext\authorization\demos\EditServiceSecurity.py:
   94:         return flags, hinstance, servername, objectname, pagetitle, objecttype
   99:             return win32security.SECURITY_DESCRIPTOR()
  101:             return win32security.GetNamedSecurityInfo(
  122:         """Returns a tuple of (AccessRights, DefaultAccess), where AccessRights is a sequence of tuples representing
  200:         return (accessrights, 0)
  204:         return win32security.MapGenericMask(
  218:         return ((IID_NULL, 0, "Only current object"),)
  224:         return None
  227:         """Creates an ACL editor dialog based on parameters returned by interface methods"""

PythonVenv\Lib\site-packages\win32comext\axdebug\adb.py:
   42:         return getattr(self.file, name)
   51:         return "<None>"
   56:         return "Frame at %d, file %s, line: %d%s" % (
  100:             return fname
  101:         return bdb.Bdb.canonic(self, fname)
  113:             return "There is already a breakpoint there!"
  122:         ##                      return 1
  124:             return 1
  127:         return 0
  142:         return self.breakReason is not None
  148:             return 1
  150:         tracev("break_anywhere", _dumpf(frame), "returning", rc)
  151:         return rc
  153:     def dispatch_return(self, frame, arg):
  154:         traceenter("dispatch_return", _dumpf(frame), arg)
  157:             tracev("dispatch_return resetting sys.trace")
  159:             return
  162:         return bdb.Bdb.dispatch_return(self, frame, arg)
  172:             # And return the tracer incase we are about to execute Python code,
  174:             return self.trace_dispatch
  180:             return None
  184:         return bdb.Bdb.dispatch_line(self, frame)
  190:             trace("dispatch_call is self.botframe - returning tracer")
  191:             return self.trace_dispatch
  199:             return None
  200:         return self.trace_dispatch
  203:     #               trace("dispatch_call", _dumpf(frame),"returned",rc)
  204:     #               return rc
  210:             return  # None
  211:         return bdb.Bdb.trace_dispatch(self, frame, event, arg)
  228:     def user_return(self, frame, return_value):
  229:         #               traceenter("user_return",_dumpf(frame),return_value)
  230:         bdb.Bdb.user_return(self, frame, return_value)
  243:             tracev("HandleBreakPoint returned with ", resumeAction)
  265:             self.set_return(frame)
  321:             return
  329:             return
  360:                     return
  436:         #                       return
  453:             # want to hit the debugger the instant we return
  480:     return g_adb

PythonVenv\Lib\site-packages\win32comext\axdebug\codecontainer.py:
   22:  or pass print raise return try while
   56:         return self.text
   62:         return self.fileName
   67:             return self.lineOffsets[cLineNumber]
   84:         return lineNo, (charPos - lastOffset)
   89:             return ""
   92:         return rc
   96:         return self.lines[num]
   99:         return len(self.GetText())
  103:         return len(self.lines)
  112:         return r, newpos
  169:         return self.attrs
  173:         return _wrap(
  186:         return codecontext
  188:     # Returns a DebugCodeContext.  debugDocument can be None for smart hosts.
  200:         return cc
  233:         return self.text
  244:             return name.split(".")[-1]
  246:             return fname
  248:             return os.path.split(fname)[1]
  250:             return "file:%s" % fname

PythonVenv\Lib\site-packages\win32comext\axdebug\contexts.py:
  41:             return self.debugSite.GetDocumentContextFromPosition(
  46:             return _wrap(self, axdebug.IID_IDebugDocumentContext)
  54:         return self.codeContainer.debugDocument
  57:         return _wrap(EnumDebugCodeContexts([self]), axdebug.IID_IEnumDebugCodeContexts)
  62:         return _wrap(obj, axdebug.IID_IDebugCodeContext)

PythonVenv\Lib\site-packages\win32comext\axdebug\debugger.py:
   33:         return "<ModuleTreeNode wrapping %s>" % (self.module)
  101:         return documents.CodeContainerProvider.FromFileName(self, fname)
  117:         return app, root
  127:         return app, root
  208:         return realNode
  215:     return currentDebugger

PythonVenv\Lib\site-packages\win32comext\axdebug\documents.py:
   19:         return win32api.GetFullPathName(fname)
   20:     return fname
   28:         return self.doc.GetName(dnt)
   31:         return self.doc.GetDocumentClassId()
   34:         return self.doc
   66:         return self.codeContainer.GetName(dnt)
   69:         return "{DF630910-1C1D-11d0-AE36-8C0F5E000000}"
   78:         return self.codeContainer.GetNumLines(), self.codeContainer.GetNumChars()
   81:         return self.codeContainer.GetPositionOfLine(cLineNumber)
   84:         return self.codeContainer.GetLineOfPosition(charPos)
   92:         return cont.GetText(), attr
   97:         return context.offset, context.length
   99:     # Return a DebugDocumentContext.
  104:         return rc.QueryInterface(axdebug.IID_IDebugDocumentContext)
  111:     return a CodeContainer interface suitable for use.
  127:         #                       print "FromFileName for %s returning None" % fname
  128:         return cc

PythonVenv\Lib\site-packages\win32comext\axdebug\expressions.py:
   14: # Given an object, return a nice string
   18:     return string.strip(stream.getvalue())
   30:         return _wrap(
   37:         return "Python", "{DF630910-1C1D-11d0-AE36-8C0F5E000000}"
   78:         return self.isComplete
   81:         #               print "GetStrAsResult returning", self.result
   82:         return self.hresult, MakeNiceString(self.result)
   89:         return self.hresult, result
  105:     return _wrap(EnumDebugPropertyInfo(infos), axdebug.IID_IEnumDebugPropertyInfo)
  111:     # returns a tuple
  139:     return name, typ, value, fullname, attrib, dbgprop
  158:         return len(self._list_)
  161:         return ob
  185:         return GetPropertyInfo(
  207:         # Returns IEnumDebugPropertyInfo
  208:         return MakeEnumDebugProperty(
  213:         # return IDebugProperty

PythonVenv\Lib\site-packages\win32comext\axdebug\gateways.py:
  199:         Return value must be (string, attribtues).  attributes may be
  208:         Return value must be (charPos, numChars)
  214:         Return value must be PyIDebugDocumentContext object
  230:         """Return the full path (including file name) to the document's source file.
  241:         """Return just the name of the document, with no path information.  (Used for "Save As...")
  296:         """Return value must be a PyIDebugDocument object"""
  300:         """Return value must be a PyIEnumDebugCodeContexts object"""
  312:         """Return value must be a PyIDebugDocumentContext object"""
  336:         """Returns the current code context associated with the stack frame.
  338:         Return value must be a IDebugCodeContext object
  343:         """Returns a textual description of the stack frame.
  350:         """Returns a short or long textual description of the language.
  357:         """Returns the thread associated with this stack frame.
  437:         return _wrap(self)
  445:         return self.cookieNo
  452:             return Exception(scode=winerror.E_UNEXPECTED)
  461:             return _wrap(self)

PythonVenv\Lib\site-packages\win32comext\axdebug\stackframe.py:
   17:     """A class that given a debugger object, can return an enumerator
   56:         return gateways.EnumDebugStackFrames.Next(self, count)
   61:     #               return 0
   63:         # This enum returns a tuple, with 2 com objects in it.
   68:         return obFrame, min, lim, fFinal, obFinal
   87:             return self.expressionContext
   90:         return 0
   95:         """Returns the thread associated with this stack frame.
  103:         return self.codeContainer.GetCodeContextAtPosition(offset)
  116:         return s
  120:             return "Python ActiveX Scripting Engine"
  122:             return "Python"
  125:         return _wrap(StackFrameDebugProperty(self.frame), axdebug.IID_IDebugProperty)
  140:         return _wrap(
  173:         return expressions.MakeEnumDebugProperty(
  178:         # return IDebugProperty

PythonVenv\Lib\site-packages\win32comext\axdebug\util.py:
   21:         return
   28: # The AXDebugging implementation assumes that the returned COM pointers are in
   41:     return win32com.server.util.wrap(object, iid)
   48:     return win32com.server.util.wrap(object, iid, useDispatcher=dispatcher)
   59:     return
  106:         return rc
  122:             #                       print "Invoke of", dispid, "returning", rc
  123:             return rc

PythonVenv\Lib\site-packages\win32comext\axscript\asputil.py:
  11:         return t
  13:         return f

PythonVenv\Lib\site-packages\win32comext\axscript\client\debug.py:
   28:         return
  111:         return self.debugApplication is not None
  114:         return self.scriptSiteDebug is None
  130:         return fCallOnError
  134:             return self.activeScriptDebug
  136:         return 0
  183:             return self.codeBlock.GetDisplayName()
  185:             return self.codeBlock.GetDisplayName()
  194:         return ob
  222:         return _wrap(self.debugMgr.scriptEngine, iid)
  226:         return container.GetSyntaxColorAttributes()
  231:         return container.GetSyntaxColorAttributes()
  240:         return _wrap(enum, axdebug.IID_IEnumDebugCodeContexts)

PythonVenv\Lib\site-packages\win32comext\axscript\client\error.py:
   24:     return ExpandTabs(AddCR(text))
   28:     return re.sub("\t", "    ", text)
   32:     return re.sub("\n", "\r\n", text)
   48:         return 0
   54:         return self.exception.linetext
   59:         return (
   66:         return self.exception
  142:             return
  168:                 # we return the last line-number we find in one of our script
  234:         return filename, lineno, name, line
  237:         return "AXScriptException Object with description:" + self.description
  255:             return None
  266:         # If the above  returns NOERROR, it is assumed the error has been
  267:         # correctly registered and the value SCRIPT_E_REPORTED is returned.
  269:         return ret
  272:         # via the IDispatch::Invoke's EXCEPINFO parameter (hr returned is DISP_E_EXCEPTION.
  273:         return exceptionInstance

PythonVenv\Lib\site-packages\win32comext\axscript\client\framework.py:
    24:     return re.sub("(\r\n)|\r|(\n\r)", "\n", text)
    51:         # 		return prof.runcall(fn, *args)
    52:         return prof.runcall(*(fn,) + args)
   134:         return "<%s>" % self.name
   137:         return self.name
   148:         return self.codeText[pos + 1 : epos].strip()
   158:         return "<%s at %d: %s>" % (self.__class__.__name__, id(self), self.name)
   203:             return win32com.server.util.wrap(self)
   211:         return self.myInvokeMethod(self.myScriptItem, event, lcid, wFlags, args)
   235:                 return typeinfo.GetRefTypeInfo(href)
   276:             return
   310:         return "<%s at %d: %s%s>" % (
   353:             return
   363:         # 				return
   372:         return self.flags & axscript.SCRIPTITEM_GLOBALMEMBERS
   375:         return (
   383:         return item.parentItem
   392:         return ret
   395:         return self.__class__
   398:         return self.subItems[name.lower()]
   416:         return rc
   424:             return
   467:             return
   558:                     return defTypeInfo.GetRefTypeInfo(href)
   560:                     return defTypeInfo
   619:             return self.debugManager._query_interface_for_debugger_(iid)
   621:         return 0
   676:         return self.DoParseScriptText(
   715:         return None
   759:         return self.scriptSite.QueryInterface(iid)
   764:             return
   812:         return self.scriptState
   870:         return self.baseThreadId
   877:         return self.baseThreadId
   884:         return self.threadState
   910:             return
   931:         return 0
   942:             return supported, self.safetyOptions
   955:         return self.DoProcessScriptItemEvent(item, event, lcid, wFlags, args)
   971:         return self.safetyOptions
   993:             return
  1067:                 return self.debugManager.adb.runcall(fn, *args)
  1069:                 return fn(*args)
  1071:             return fn(*args)
  1078:                 return self._ApplyInScriptedSection(fn, args)
  1090:         return compile(code, name, type)
  1094:             return 1
  1105:                 return 1
  1118:                 return self.debugManager.adb.run(codeObject, globals, locals)
  1146:                 return self.debugManager.adb.runeval(codeBlock, globals, locals)
  1148:                 return eval(codeBlock, globals, locals)
  1150:             return eval(codeBlock, globals, locals)
  1162:                 return self._EvalInScriptedSection(
  1173:         # NOTE - Never returns - raises a ComException
  1208:         # I think that in some cases this should just return - but the code
  1209:         # that could return None above is disabled, so it never happens.
  1232:             return self.subItems[name]
  1237:         return ScriptItem
  1250:     return

PythonVenv\Lib\site-packages\win32comext\axscript\client\pyscript_rexec.py:
  35:         return (

PythonVenv\Lib\site-packages\win32comext\axscript\client\pyscript.py:
   40:     return re.sub("\t", "    ", text)
   44:     return re.sub("\n", "\r\n", text)
   49:         return "PyScript - " + framework.AXScriptCodeBlock.GetDisplayName(self)
   70:         return rc
   77:             return obj.subItems[attr.lower()].attributeObject
   83:                 return self._DoFindAttribute_(item, attr)
   91:                 return self._DoFindAttribute_(item, attr)
   96:         return getattr(self._scriptEngine_.globalNameSpaceModule, attr)
  113:         return "<NamedItemAttribute" + repr(self._scriptItem_) + ">"
  116:         # If a known subitem, return it.
  118:             return self._scriptItem_.subItems[attr.lower()].attributeObject
  122:                 return getattr(self._scriptItem_.dispatchContainer, attr)
  131:                 return setattr(self._scriptItem_.dispatchContainer, attr, value)
  228:         return framework.COMScript.Stop(self)
  238:         return framework.COMScript.Reset(self)
  242:         return self.codeBlockCounter
  287:         # 		if name is not None: return None
  292:         return self.scriptDispatch
  295:         return (
  347:                 return
  370:         return self.ApplyInScriptedSection(codeBlock, function, args)
  394:                     return self.EvalInScriptedSection(codeBlock, globs)
  396:                     return self.ExecInScriptedSection(codeBlock, globs)
  407:         return ScriptItem
  439:     return ret

PythonVenv\Lib\site-packages\win32comext\axscript\client\scriptdispatch.py:
   24:     return type(obj) in [types.FunctionType, types.MethodType]
   52:                 return self.engine.ApplyInScriptedSection(None, func, tuple(realArgs))
   69:             return ret
   83:             return str(self._dyn_dispid_to_name_[dispid])
   93:         return win32com.server.policy.DynamicPolicy._getdispid_(self, name, fdex)
   97:     return win32com.server.util.wrap(
  105:     return win32com.server.util.wrap(obj, usePolicy=StrictDynamicPolicy)
  115:     return _wrap(ScriptDispatch(engine, namespace))

PythonVenv\Lib\site-packages\win32comext\axscript\Demos\client\ie\form.htm:
  11: return Validate()
  19: 		return 1
  20: 	return 0

PythonVenv\Lib\site-packages\win32comext\axscript\Demos\client\ie\mousetrack.htm:
  35:        return result

PythonVenv\Lib\site-packages\win32comext\axscript\server\axsite.py:
   27:         return self.eScript.GetScriptDispatch(name)
   30:         return self.eScript.AddNamedItem(item, flags)
   37:         return self.eParse.ParseScriptText(
  104:         return newEngine
  114:         return self.lcid
  116:     def GetItemInfo(self, name, returnMask):
  124:         if returnMask & axscript.SCRIPTINFO_IUNKNOWN:
  125:             return (self.objModel[name], None)
  127:         return (None, None)
  130:         return "Python AXHost version 1.0"
  139:         return winerror.S_FALSE

PythonVenv\Lib\site-packages\win32comext\axscript\server\error.py:
  16:         return getattr(self.activeScriptError, attr)

PythonVenv\Lib\site-packages\win32comext\axscript\test\leakTest.py:
   30:         return util.Collection._NewEnum(self)
  128:             return
  148:         return

PythonVenv\Lib\site-packages\win32comext\axscript\test\testHost.py:
   26:             return
   41:         return util.Collection._NewEnum(self)
  204:                 return

PythonVenv\Lib\site-packages\win32comext\directsound\test\ds_record.py:
  11:     return struct.pack(

PythonVenv\Lib\site-packages\win32comext\directsound\test\ds_test.py:
  54:     return wfx, datalength
  58:     return struct.pack(

PythonVenv\Lib\site-packages\win32comext\ifilter\demo\filterDemo.py:
   57:                         # each chunk returns a tuple with the following:-
   92:                         # attempt to map each property to a more user friendly name. If we don't know what it is just return
  136:                         self._trace("Unknown flag returned by GetChunk:", flags)
  144:         return properties
  149:         and then return an ifilter interface by calling the appropriate bind/load function
  194:             return

PythonVenv\Lib\site-packages\win32comext\mapi\mapitags.py:
   54:     return ulPropTag & PROP_TYPE_MASK
   58:     return ulPropTag >> 16
   62:     return (ulPropID << 16) | (ulPropType)
   85: PR_CONTENT_RETURN_REQUESTED = PROP_TAG(PT_BOOLEAN, 10)
  111: PR_ORIGINATOR_RETURN_ADDRESS = PROP_TAG(PT_BINARY, 36)
  128: PR_RETURNED_IPM = PROP_TAG(PT_BOOLEAN, 51)
  284: PR_IPM_RETURN_REQUESTED = PROP_TAG(PT_BOOLEAN, 3074)

PythonVenv\Lib\site-packages\win32comext\mapi\mapiutil.py:
   28:                 # property id returns the conditional default.
   31:                 # PT_STRING8 and should not be returned during a lookup.
   48:             return prTable[pt]
   51:             return prTable[mapitags.PROP_ID(pt)]
   61:         return ret
   72:     return mapiErrorTable.get(hr, pythoncom.GetScodeString(hr))
   79:     """Given a mapi type flag, return a string description of the type"""
   85:                 # should not be returned during a lookup.
   92:     return ptTable.get(propType, str(hex(propType)))
   96:     """Given a MAPI object and a list of properties, return a list of property values.
  123:         return None
  125:         return [v[1] for v in data]
  127:         return data[0][1]
  144:     return ret

PythonVenv\Lib\site-packages\win32comext\mapi\demos\mapisend.py:
  60:         return (

PythonVenv\Lib\site-packages\win32comext\shell\shellcon.py:
   300: BIF_RETURNONLYFSDIRS = 1
   303: BIF_RETURNFSANCESTORS = 8
   522:     return -1 * (int)(x)
   842: ASSOCF_NOTRUNCATE = 0x00000020  # dont truncate the return string
  1368: ## Success HRESULTs returned by ITransfer* interface operations
  1584: KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = 0x00040000

PythonVenv\Lib\site-packages\win32comext\shell\demos\create_link.py:
  29:             return getattr(self._base, name)

PythonVenv\Lib\site-packages\win32comext\shell\demos\IFileOperationProgressSink.py:
   15:         return "TSF_NORMAL"
   23:     return flag_txt
  179:     return pythoncom.WrapObject(

PythonVenv\Lib\site-packages\win32comext\shell\demos\ITransferAdviseSink.py:
   14:         return "TSF_NORMAL"
   22:     return flag_txt
   33:         return "TSF_NORMAL"
   41:     return flag_txt
  103:     return pythoncom.WrapObject(

PythonVenv\Lib\site-packages\win32comext\shell\demos\IUniformResourceLocator.py:
  27:             return getattr(self._base, name)

PythonVenv\Lib\site-packages\win32comext\shell\demos\walk_shell_folders.py:
  11:         return

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\column_provider.py:
  41:         return self._reg_clsid_
  69:             return col_info
  70:         return None  # Indicate no more columns.
  77:             return None
  85:             return st[stat.ST_SIZE]
  88:             return None

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\context_menu.py:
  75:         return idCmd - idCmdFirst  # Must return number of menu items we added.
  82:         # If GetCommandString returns the same string for all items then
  86:         return "Hello from Python (cmd=%d)!!" % (cmd,)

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\copy_hook.py:
  24:         # This function should return:
  29:         return win32gui.MessageBox(

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\empty_volume_cache.py:
   44:         # Must return a tuple of:
   68:         # volume, so will return 0 when we are on a different disk
   71:         return (
   83:             return []
   84:         return [
  129:         return total[0]
  133:         # we ignore amt_to_free - it is generally what we returned for
  149:         return 0

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\folder_view.py:
   34:     return _wrap(ob, iid, useDispatcher=(debug > 0))
   38:     return _NewEnum(seq, iid=iid, useDispatcher=(debug > 0))
   47:     return _sids[sid]
   58:     return _last_ids
  130:     return pickle.loads(pidl[-1])
  157:     return NewEnum(pidls, shell.IID_IEnumIDList)
  188:         return (
  248:         return NewEnum(items, shell.IID_IEnumExplorerCommand)
  260:         return LoadString(self.cmd.ids)
  263:         return LoadString(self.cmd.ids_tt)
  266:         # Return a string of the usual "dll,resource_id" format
  267:         # todo - just return any ".ico that comes with python" + ",0" :)
  271:         return shellcon.ECS_ENABLED
  274:         return self.cmd.flags
  277:         return self.cmd.guid
  280:         # If no function defined - just return S_OK
  288:             return None
  290:         return NewEnum(items, shell.IID_IEnumExplorerCommand)
  308:         return cat1 - cat2
  313:         return self.description
  319:         return 0, str(catid)  # ????
  330:         return ret
  349:         return ret
  352:         return 0, LoadString(catid)
  373:         return ret
  376:         return 0, LoadString(catid)
  390:         return ret
  393:         return 0, LoadString(catid)
  400:         return [
  413:         return pkey in [
  435:             return wrap(klass(self.shell_folder))
  442:         return NewEnum(seq, pythoncom.IID_IEnumGUID)
  459:             # property bag. When a return is made to this item,
  464:         return guid
  471:             return "Value"
  476:         return CAT_GUID_LEVEL, (pythoncom.IID_NULL, 0)
  525:         return 1
  552:         return self.site
  591:             return None
  592:         return make_item_enum(self.current_level + 1, flags)
  605:         return wrap(child, iid)
  608:         return self.BindToObject(pidl, bc, iid)
  611:         return 0  # XXX - todo - implement this!
  616:             return shell.SHCreateShellFolderView(com_folder)
  618:             return wrap(ViewCategoryProvider(self))
  622:             return shell.SHCreateDefaultContextMenu(dcm, iid)
  624:             return wrap(ExplorerCommandProvider())
  637:         return flags
  648:             return shell.SHCreateDefaultContextMenu(dcm, iid)
  656:             # just return the dxi - let Python QI for IID_IExtractIconW
  657:             return dxi
  660:             return shell.SHCreateDataObject(self.pidl, pidls, None, iid)
  669:             return shell.AssocCreateForClasses(elts, iid)
  678:                 return item["name"]
  685:                 return parent + "\\" + item["name"]
  687:             return item["name"]
  693:         return self._reg_clsid_
  706:         return 0, 0
  711:             return shellcon.SHCOLSTATE_ONBYDEFAULT | shellcon.SHCOLSTATE_TYPE_STR
  732:         return val
  741:             return "prop:Sample.AreaSize;Sample.NumberOfSides;Sample.DirectoryLevel"
  742:         return self._GetColumnDisplayName(pidl, pkey)
  762:         return fmt, cxChar, val
  775:         return data[iCol]
  782:         return self.pidl
  792:     return sc

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\icon_handler.py:
  43:         # note - returning a single int will set the HRESULT (eg, S_FALSE,
  45:         return random.choice(ico_files), 0, 0
  48:         return winerror.S_FALSE

PythonVenv\Lib\site-packages\win32comext\shell\demos\servers\shell_view.py:
   31: # and continuing the analogy, a "listdir" type function would return a list
   91:     return folder, pidl
   95: clbr_modules = {}  # Indexed by path, item is dict as returned from pyclbr
  106:     return objects
  131:         return 0
  135:         # return cchEaten, pidl, attr
  156:         return ret
  166:         return GetFolderAndPIDLForPath(name)
  171:             return -1
  173:             return 0
  174:         return 1
  185:         return inout, ret
  186:         # return object of IID
  192:         return ret
  210:         return ret_flags
  220:         return folder.CreateViewObject(hwnd, iid)
  238:         return NewEnum(pidls, iid=shell.IID_IEnumIDList, useDispatcher=(debug > 0))
  243:         return os.path.split(full_fname)[-1]
  246:         return (
  265:         return NewEnum(pidls, iid=shell.IID_IEnumIDList, useDispatcher=(debug > 0))
  283:         return ret_flags
  294:         return ret
  297:         return wrap(ScintillaShellView(hwnd, self.path), iid, useDispatcher=debug > 0)
  317:             return wrap(
  331:         return NewEnum(pidls, iid=shell.IID_IEnumIDList, useDispatcher=(debug > 0))
  343:         return ret
  355:         return ret_flags
  367:         return self._reg_clsid_
  377:         return wrap(FileSystemView(self, hwnd), iid, useDispatcher=debug > 0)
  381:         return NewEnum(items, iid=shell.IID_IEnumIDList, useDispatcher=(debug > 0))
  384:         ## return full path for sys.path dirs, since they don't appear under a parent folder
  387:         return display_name
  414:         return self.hwnd
  477:         return self.hwnd
  546:         return self.cur_foldersettings
  553:             return
  633:         return winerror.S_FALSE
  706:                     # Find the default item in the returned menu.
  730:                     print("ShellExecuteEx returned", rv)
  749:             return
  769:                 | win32con.TPM_RETURNCMD
  775:             print("TrackPopupMenu returned", sel)
  806:         return win32gui.SendMessage(self.hwnd, msg, wparam, lparam)
  903:         return self.hwnd
  914:         return winerror.S_FALSE

PythonVenv\Lib\site-packages\win32comext\shell\test\testSHFileOperation.py:
  46:     ## attemps to move a set of files to names that already exist, and generated filenames should be returned

PythonVenv\Lib\site-packages\win32ctypes\core\__init__.py:
  32:         return module
  50:             return importlib.machinery.ModuleSpec(module_name, loader)
  52:             return None

PythonVenv\Lib\site-packages\win32ctypes\core\compat.py:
   2:     return isinstance(b, bytes)
   6:     return isinstance(s, str)
  10:     return isinstance(i, int)

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_authentication.py:
   68:         return password
   71:         return password.decode(encoding=str(code_page), errors='strict')
   77:         return ffi.new("PCREDENTIAL")[0]
  111:         return c_creds
  118:     return ffi.new("PCREDENTIAL", ffi.NULL if value is None else value)
  122:     return ffi.new("PCREDENTIAL*", ffi.NULL if value is None else value)
  126:     return ffi.new("PCREDENTIAL**", ffi.NULL if value is None else value)
  144:     return credentials
  149:     return check_false(
  155:     return check_false(
  160:     return check_false(
  167:     return check_false(

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_common.py:
  17:     return buffer[:]
  21:     return ffi.new(ffi.getctype(ffi.typeof(x), '*'), x)
  25:     return x[0]
  29:     return ffi.new("DWORD *", value)

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_dll.py:
  24:     return HMODULE(result)

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_nl_support.py:
  18:     return dlls.kernel32.GetACP()

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_resource.py:
   43:         return callback(hModule, resource(lpszType), lParam)
   44:     return wrapped
   50:             return False
   51:         return callback(
   53:     return wrapped
   58:         return callback(
   61:     return wrapped
   89:     return check_null(
   96:     return check_zero(
  102:     return check_null(
  108:     return check_null(
  117:     return HMODULE(result)

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_system_information.py:
  26:     return ffi.unpack(buffer, directory)
  32:     return ffi.unpack(buffer, directory)

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_time.py:
  18:     return dlls.kernel32.GetTickCount()

PythonVenv\Lib\site-packages\win32ctypes\core\cffi\_util.py:
   18:     return int(ffi.cast("intptr_t", cdata))
   22:     return ffi.cast("void *", x)
   29:     return int(ffi.cast("uintptr_t", x)) >> 16 == 0
   40:     return resource
   50:     return resource
   64:             The return value that designates that an error has taken place.
   80:             return value
  102:         return library

PythonVenv\Lib\site-packages\win32ctypes\core\ctypes\_authentication.py:
  66:         return c_creds
  79:         return text
  82:         return text.decode(encoding=str(code_page), errors='strict')
  95:     return credential

PythonVenv\Lib\site-packages\win32ctypes\core\ctypes\_common.py:
  31:     return_type=py_object)
  35:     return x >> 16 == 0
  42:     return x.contents
  50:         return library

PythonVenv\Lib\site-packages\win32ctypes\core\ctypes\_resource.py:
  28:         return callback(handle, type_, param)
  30:     return _ENUMRESTYPEPROC(wrapped)
  40:             return False
  45:         return callback(handle, type_, name, param)
  47:     return _ENUMRESNAMEPROC(wrapped)
  60:         return callback(handle, type_, name, language, param)
  62:     return _ENUMRESLANGPROC(wrapped)
  86:     return _BaseFindResourceEx(

PythonVenv\Lib\site-packages\win32ctypes\core\ctypes\_system_information.py:
  17:     return ctypes.cast(buffer, LPCWSTR).value
  23:     return ctypes.cast(buffer, LPCWSTR).value

PythonVenv\Lib\site-packages\win32ctypes\core\ctypes\_util.py:
  15:         return_type=None, error_checking=None):
  18:     function.restype = return_type
  21:     return function
  33:     return exception
  40:         return result
  41:     return check_null
  51:         return result
  52:     return check_zero
  63:             return True
  64:     return check_false
  75:         return library

PythonVenv\Lib\site-packages\win32ctypes\pywin32\win32api.py:
   18:     """ Loads the specified DLL, and returns the handle.
   31:     Returns
   40:         return _dll._LoadLibraryEx(fileName, 0, flags)
   51:     Returns
   61:         return True
   66:     return resource_types
   79:     Returns
   90:         return True
   95:     return resource_names
  112:     Returns
  122:         return True
  127:     return resource_languages
  148:     Returns
  163:         return _common._PyBytes_FromStringAndSize(pointer, size)
  174:         The handle to the library as returned by the LoadLibrary function.
  178:         return _dll._FreeLibrary(hModule)
  184:     Returns
  189:     return _time._GetTickCount()
  202:     Returns
  209:         return _resource._BeginUpdateResource(filename, delete)
  218:         The handle of the resource as it is returned
  235:         The handle of the resource file as returned by
  272:     Returns
  279:         # Note: pywin32 returns str on py27, unicode (which is str) on py3
  280:         return str(_system_information._GetWindowsDirectory())
  286:     Returns
  293:         # Note: pywin32 returns str on py27, unicode (which is str) on py3
  294:         return str(_system_information._GetSystemDirectory())

PythonVenv\Lib\site-packages\win32ctypes\pywin32\win32cred.py:
   50:     Returns
   71:         return _authentication.credential2dict(_common.dereference(pcreds))
  108:     Returns
  111:         Returns a sequence of CREDENTIAL dictionaries.
  143:         return result

PythonVenv\Lib\site-packages\win32ctypes\tests\test_win32api.py:
  278:         # note: pywin32 returns str on py27, unicode (which is str) on py3
  291:         # note: pywin32 returns str on py27, unicode (which is str) on py3
  298:             return type_id
  300:             return u'#{0}'.format(type_id)

PythonVenv\Lib\site-packages\win32ctypes\tests\test_win32cred.py:
  42:         return {

PythonVenv\Lib\site-packages\wsproto\__init__.py:
  36:         :returns: Connection state
  40:             return self.handshake.state
  41:         return self.connection.state
  53:         an event and pass it to this method. This method will return the bytes
  57:         :returns bytes: The data to send to the peer
  65:         return data

PythonVenv\Lib\site-packages\wsproto\connection.py:
   87:         return self._state
  110:         return data
  130:             return
  141:         Return a generator that provides any events that have been generated
  144:         :returns: generator of :class:`Event <wsproto.events.Event>` subclasses

PythonVenv\Lib\site-packages\wsproto\events.py:
  186:         return CloseConnection(code=self.code, reason=self.reason)
  280:         return Pong(payload=self.payload)

PythonVenv\Lib\site-packages\wsproto\extensions.py:
   18:         return False
   36:         return RsvBits(False, False, False)
   41:         return data
   56:         return (rsv, data)
   94:         return self._client_max_window_bits
  104:         return self._server_max_window_bits
  113:         return opcode in (Opcode.TEXT, Opcode.BINARY, Opcode.CONTINUATION)
  116:         return self._enabled
  129:         return "; ".join(parameters)
  166:         return client_max_window_bits, server_max_window_bits
  185:             return None
  188:             return "; ".join(parameters)
  198:             return CloseReason.PROTOCOL_ERROR
  200:             return CloseReason.PROTOCOL_ERROR
  215:         return RsvBits(True, False, False)
  221:             return data
  225:             return self._decompressor.decompress(bytes(data))
  227:             return CloseReason.INVALID_FRAME_PAYLOAD_DATA
  233:             return None
  236:             return None
  239:             return None
  246:             return CloseReason.INVALID_FRAME_PAYLOAD_DATA
  258:         return data
  269:             return (rsv, data)
  298:         return (rsv, data)
  308:         return "<{} {}>".format(self.__class__.__name__, "; ".join(descr))

PythonVenv\Lib\site-packages\wsproto\frame_protocol.py:
   41:             return bytes(data_array)
   42:         return data
   47:         return data
   96:         return bool(self & 0x08)
  146:     #: is a generic status code that can be returned when there is no
  158:     #: more extension, but the server didn't return them in the response
  239:         return data
  250:     return data
  265:             return bytearray()
  269:         return data
  273:             return None
  275:         return self.consume_at_most(nbytes)
  286:         return len(self.buffer)
  324:         return frame
  348:                 return None
  355:             return None
  360:             return None
  393:         return frame
  399:             return False
  421:             return False
  433:                 return False
  446:         return True
  456:                 return None
  465:                 return None
  476:         return payload_len
  537:         return Frame(frame.opcode, data, frame.frame_finished, frame.message_finished)
  585:         return self._serialize_frame(Opcode.CLOSE, payload)
  588:         return self._serialize_frame(Opcode.PING, payload)
  591:         return self._serialize_frame(Opcode.PONG, payload)
  614:         return self._serialize_frame(opcode, payload, fin)
  621:         return fin_bits | rsv_bits | opcode_bits
  671:             return header + masking_key + masker.process(payload)
  673:         return header + payload

PythonVenv\Lib\site-packages\wsproto\handshake.py:
   58:         return self._state
   62:         """Return the established connection.
   64:         This will either return the connection or raise a
   70:         return self._connection
   94:         This will return the bytes to send based on the event or raise
   98:         :returns: Data to send to the WebSocket peer.
  114:         return data
  173:         """Return a generator that provides any events that have been generated
  176:         :returns: a generator that yields H11 events.
  252:         return self._initiating_request
  291:         return self._h11_connection.send(response) or b""
  308:         return data
  320:         return data
  365:         return self._h11_connection.send(upgrade) or b""
  428:         return AcceptConnection(
  433:         return "{}(client={}, state={})".format(
  441:     """Agree on the extensions to use returning an appropriate header value.
  443:     This returns None if there are no agreed extensions
  469:         return b", ".join(extensions)
  471:     return None
  491:     return extensions

PythonVenv\Lib\site-packages\wsproto\utilities.py:
  67:     return name_to_normed_value
  76:     return [piece.decode("ascii").strip() for piece in value.split(b",")]
  82:     return base64.b64encode(os.urandom(16))
  88:     return base64.b64encode(accept_token)

PythonVenv\Lib\site-packages\wtforms\compat.py:
  14:         return o.items()
  17:         return o.values()
  25:         return o.iteritems()
  28:         return o.itervalues()
  32:     return meta("NewBase", (base,), {})

PythonVenv\Lib\site-packages\wtforms\form.py:
   56:         return iter(itervalues(self._fields))
   59:         """ Returns `True` if the named field is a member of this form. """
   60:         return (name in self._fields)
   64:         return self._fields[name]
   82:         Must return an object that provides gettext() and ngettext() methods.
   84:         return self.meta.get_translations(self)
  142:         Returns `True` if no errors occur.
  152:         return success
  156:         return dict((name, f.data) for name, f in iteritems(self._fields))
  160:         return {name: f.errors for name, f in self._fields.items() if f.errors}
  208:         return type.__call__(cls, *args, **kwargs)
  297:         Returns ``True`` if validation passes.
  318:         return super(Form, self).validate(extra)

PythonVenv\Lib\site-packages\wtforms\i18n.py:
  12:     return locale_path
  25:     return gettext.translation('wtforms', messages_path(), languages)
  35:         A single-argument callable which returns a low-level translations object.
  40:         return DefaultTranslations(translations)
  42:         # Python 3 has no ugettext/ungettext, so just return the translations object.
  43:         return translations
  55:         return self.translations.ugettext(string)
  58:         return self.translations.ungettext(singular, plural, n)
  63:     A translations object which simply returns unmodified strings.
  69:         return string
  73:             return singular
  75:         return plural

PythonVenv\Lib\site-packages\wtforms\meta.py:
   25:         :return: A bound field
   27:         return unbound_field.bind(form=form, **options)
   38:         :return: A form-input wrapper compatible with WTForms.
   42:                 return WebobInputWrapper(formdata)
   45:         return formdata
   56:         return field.widget(field, **render_kw)
   76:         :return: A CSRF implementation.
   79:             return self.csrf_class()
   82:         return SessionCSRF()
   96:         :return: An object that provides gettext() and ngettext() methods.
  100:             return None
  110:             return translations
  112:         return i18n.get_translations(locales)

PythonVenv\Lib\site-packages\wtforms\utils.py:
  12:         return '<unset value>'
  15:         return '<unset value>'
  18:         return False
  21:         return False
  45:         return iter(self._wrapped)
  48:         return len(self._wrapped)
  51:         return (name in self._wrapped)
  54:         return self._wrapped.getall(name)

PythonVenv\Lib\site-packages\wtforms\validators.py:
  295:         return match
  396:             return False
  399:             return False
  401:         return True
  408:             return False
  411:             return False
  413:         return True
  521:         return ', '.join(text_type(x) for x in values)
  553:         return ', '.join(text_type(x) for x in v)
  572:                 return True
  585:             return False
  591:                 return False
  593:                 return False
  597:                 return False
  599:         return True

PythonVenv\Lib\site-packages\wtforms\csrf\core.py:
  24:         We want to always return the current token on render, regardless of
  27:         return self.current_token
  59:         :return:
  69:         return [(field_name, unbound_field)]
  82:         :return:

PythonVenv\Lib\site-packages\wtforms\csrf\session.py:
  34:         return super(SessionCSRF, self).setup_form(form)
  56:         return '%s##%s' % (expires, hmac_csrf.hexdigest())
  80:         return datetime.now()
  84:         return getattr(self.form_meta, 'csrf_time_limit', timedelta(minutes=30))
  88:         return getattr(self.form_meta.csrf_context, 'session', self.form_meta.csrf_context)

PythonVenv\Lib\site-packages\wtforms\ext\appengine\db.py:
   63: The class returned by ``model_form()`` can be used as a base class for forms
   81: The class returned by ``model_form()`` can also extend an existing form
  101:     Returns a ``TextField``, applying the ``db.StringProperty`` length limit
  105:     return f.TextField(**kwargs)
  110:     Returns an ``IntegerField``, applying the ``db.IntegerProperty`` range
  115:     return f.IntegerField(**kwargs)
  119:     """Returns a form field for a ``db.StringProperty``."""
  122:         return f.TextAreaField(**kwargs)
  124:         return get_TextField(kwargs)
  128:     """Returns a form field for a ``db.ByteStringProperty``."""
  129:     return get_TextField(kwargs)
  133:     """Returns a form field for a ``db.BooleanProperty``."""
  134:     return f.BooleanField(**kwargs)
  138:     """Returns a form field for a ``db.IntegerProperty``."""
  139:     return get_IntegerField(kwargs)
  143:     """Returns a form field for a ``db.FloatProperty``."""
  144:     return f.FloatField(**kwargs)
  148:     """Returns a form field for a ``db.DateTimeProperty``."""
  150:         return None
  153:     return f.DateTimeField(**kwargs)
  157:     """Returns a form field for a ``db.DateProperty``."""
  159:         return None
  162:     return f.DateField(**kwargs)
  166:     """Returns a form field for a ``db.TimeProperty``."""
  168:         return None
  171:     return f.DateTimeField(**kwargs)
  175:     """Returns a form field for a ``db.ListProperty``."""
  176:     return None
  180:     """Returns a form field for a ``db.StringListProperty``."""
  181:     return StringListPropertyField(**kwargs)
  185:     """Returns a form field for a ``db.ReferenceProperty``."""
  188:     return ReferencePropertyField(**kwargs)
  192:     """Returns a form field for a ``db.SelfReferenceProperty``."""
  193:     return None
  197:     """Returns a form field for a ``db.UserProperty``."""
  198:     return None
  202:     """Returns a form field for a ``db.BlobProperty``."""
  203:     return f.FileField(**kwargs)
  207:     """Returns a form field for a ``db.TextProperty``."""
  208:     return f.TextAreaField(**kwargs)
  212:     """Returns a form field for a ``db.CategoryProperty``."""
  213:     return get_TextField(kwargs)
  217:     """Returns a form field for a ``db.LinkProperty``."""
  219:     return get_TextField(kwargs)
  223:     """Returns a form field for a ``db.EmailProperty``."""
  225:     return get_TextField(kwargs)
  229:     """Returns a form field for a ``db.GeoPtProperty``."""
  230:     return GeoPtPropertyField(**kwargs)
  234:     """Returns a form field for a ``db.IMProperty``."""
  235:     return None
  239:     """Returns a form field for a ``db.PhoneNumberProperty``."""
  240:     return get_TextField(kwargs)
  244:     """Returns a form field for a ``db.PostalAddressProperty``."""
  245:     return get_TextField(kwargs)
  249:     """Returns a form field for a ``db.RatingProperty``."""
  251:     return f.IntegerField(**kwargs)
  357:         Returns a form field for a single model property.
  382:             return f.SelectField(**kwargs)
  386:                 return converter(model, prop, kwargs)
  392:     Extracts and returns a dictionary of form fields for a given
  431:     return field_dict
  437:     Creates and returns a dynamic ``wtforms.Form`` class for a given
  462:     # Return a dynamically created form class, extending from base_class and
  464:     return type(model.kind() + 'Form', (base_class,), field_dict)

PythonVenv\Lib\site-packages\wtforms\ext\appengine\fields.py:
   22:         will be passed model instance and expected to return the label text.
   56:         return self._data
  101:         will be passed model instance and expected to return the label text.
  133:         return self._data
  176:             return self.raw_data[0]
  178:             return self.data and text_type("\n".join(self.data)) or ''
  195:             return self.raw_data[0]
  197:             return text_type('\n'.join(self.data)) if self.data else ''

PythonVenv\Lib\site-packages\wtforms\ext\appengine\ndb.py:
   63: The class returned by ``model_form()`` can be used as a base class for forms
   81: The class returned by ``model_form()`` can also extend an existing form
  101:     Returns a ``TextField``, applying the ``ndb.StringProperty`` length limit
  105:     return f.TextField(**kwargs)
  110:     Returns an ``IntegerField``, applying the ``ndb.IntegerProperty`` range
  115:     return f.IntegerField(**kwargs)
  136:         Returns a form field for a single model property.
  171:             return f.SelectField(**kwargs)
  176:             return f.SelectField(**kwargs)
  181:                 return converter(model, prop, kwargs)
  183:                 return self.fallback_converter(model, prop, kwargs)
  241:         """Returns a form field for a ``ndb.StringProperty``."""
  243:             return StringListPropertyField(**kwargs)
  245:         return get_TextField(kwargs)
  248:         """Returns a form field for a ``ndb.BooleanProperty``."""
  249:         return f.BooleanField(**kwargs)
  252:         """Returns a form field for a ``ndb.IntegerProperty``."""
  254:             return IntegerListPropertyField(**kwargs)
  255:         return get_IntegerField(kwargs)
  258:         """Returns a form field for a ``ndb.FloatProperty``."""
  259:         return f.FloatField(**kwargs)
  262:         """Returns a form field for a ``ndb.DateTimeProperty``."""
  264:             return None
  266:         return f.DateTimeField(format='%Y-%m-%d %H:%M:%S', **kwargs)
  269:         """Returns a form field for a ``ndb.DateProperty``."""
  271:             return None
  273:         return f.DateField(format='%Y-%m-%d', **kwargs)
  276:         """Returns a form field for a ``ndb.TimeProperty``."""
  278:             return None
  280:         return f.DateTimeField(format='%H:%M:%S', **kwargs)
  283:         """Returns a form field for a ``ndb.ListProperty``."""
  284:         return None
  287:         """Returns a form field for a ``ndb.UserProperty``."""
  288:         return None
  291:         """Returns a form field for a ``ndb.ListProperty``."""
  292:         return None
  295:         """Returns a form field for a ``ndb.ListProperty``."""
  296:         return None
  299:         """Returns a form field for a ``ndb.ListProperty``."""
  300:         return None
  303:         """Returns a form field for a ``ndb.ListProperty``."""
  304:         return None
  307:         """Returns a form field for a ``ndb.ListProperty``."""
  309:         return get_TextField(kwargs)
  312:         """Returns a form field for a ``ndb.BlobKeyProperty``."""
  313:         return f.FileField(**kwargs)
  316:         """Returns a form field for a ``ndb.TextProperty``."""
  317:         return f.TextAreaField(**kwargs)
  320:         """Returns a form field for a ``ndb.ComputedProperty``."""
  321:         return None
  324:         """Returns a form field for a ``ndb.GeoPtProperty``."""
  325:         return GeoPtPropertyField(**kwargs)
  328:         """Returns a form field for a ``ndb.KeyProperty``."""
  341:         return KeyPropertyField(**kwargs)
  347:     Extracts and returns a dictionary of form fields for a given
  385:     return field_dict
  391:     Creates and returns a dynamic ``wtforms.Form`` class for a given
  416:     # Return a dynamically created form class, extending from base_class and
  418:     return type(model._get_kind() + 'Form', (base_class,), field_dict)

PythonVenv\Lib\site-packages\wtforms\ext\csrf\fields.py:
   9:         We want to always return the current token on render, regardless of
  12:         return self.current_token

PythonVenv\Lib\site-packages\wtforms\ext\csrf\form.py:
  53:         return d

PythonVenv\Lib\site-packages\wtforms\ext\csrf\session.py:
  54:         return '%s##%s' % (expires, hmac_csrf.hexdigest())

PythonVenv\Lib\site-packages\wtforms\ext\dateutil\fields.py:
  54:             return ' '.join(self.raw_data)
  56:             return self.data and self.data.strftime(self.display_format) or ''

PythonVenv\Lib\site-packages\wtforms\ext\django\fields.py:
   35:     model instance and expected to return the label text. Otherwise, the model
   66:         return self._data
  133:         return super(DateTimeField, self)._value()

PythonVenv\Lib\site-packages\wtforms\ext\django\i18n.py:
  11:         return ugettext(string)
  14:         return ungettext(singular, plural, n)
  24:         return self._django_translations

PythonVenv\Lib\site-packages\wtforms\ext\django\orm.py:
   39:             return f.SelectField(**kwargs)
   41:             return self.converters[ftype](model, field, kwargs)
   45:                 return converter(model, field, kwargs)
   75:             return field_type(**kwargs)
   76:         return _converter
   79:         return ModelSelectField(model=field.rel.to, **kwargs)
   84:                 return obj.time()
   86:                 return obj
   88:         return f.DateTimeField(format='%H:%M:%S', **kwargs)
   92:         return f.TextField(**kwargs)
   96:         return f.TextField(**kwargs)
  100:         return f.TextField(**kwargs)
  108:                 return None
  110:                 return d[value]
  112:                 return bool(int(value))
  115:         return f.SelectField(choices=choices, coerce=coerce_nullbool, **kwargs)
  139:     return field_dict
  168:     return type(model._meta.object_name + 'Form', (base_class, ), field_dict)

PythonVenv\Lib\site-packages\wtforms\ext\django\templatetags\wtforms.py:
  30:             return settings.TEMPLATE_STRING_IF_INVALID
  39:         return field(**h_attrs)
  65:     return FormFieldNode(parts[1], html_attrs)

PythonVenv\Lib\site-packages\wtforms\ext\i18n\form.py:
  45:         return translations_cache[languages]

PythonVenv\Lib\site-packages\wtforms\ext\sqlalchemy\fields.py:
   36:     pass a one-argument callable to `get_pk` which can return a unique
   47:     model instance and expected to return the label text. Otherwise, the model
   88:         return self._data
  101:         return self._object_list
  163:         return self._data
  190:     return ':'.join(text_type(x) for x in key)

PythonVenv\Lib\site-packages\wtforms\ext\sqlalchemy\orm.py:
   21:         return func
   22:     return _inner
   47:             return
  129:         return converter(
  150:         return f.TextField(**field_args)
  155:         return f.TextAreaField(**field_args)
  159:         return f.BooleanField(**field_args)
  163:         return f.DateField(**field_args)
  167:         return f.DateTimeField(**field_args)
  173:         return f.SelectField(**field_args)
  180:         return f.IntegerField(**field_args)
  187:         return f.DecimalField(**field_args)
  192:         return f.TextField(**field_args)
  198:         return f.TextField(**field_args)
  204:         return f.TextField(**field_args)
  210:         return f.TextField(**field_args)
  214:         return QuerySelectField(**field_args)
  218:         return QuerySelectMultipleField(**field_args)
  258:     return field_dict
  294:         An optional string to set returned type name.
  304:     return type(type_name, (base_class, ), field_dict)

PythonVenv\Lib\site-packages\wtforms\fields\core.py:
    41:             return super(Field, cls).__new__(cls)
    43:             return UnboundField(cls, *args, **kwargs)
    89:         returned instead. Call its :func:`bind` method with a form instance and
   127:         Returns a HTML representation of the field. For more powerful rendering,
   130:         return self()
   134:         Returns a HTML representation of the field. For more powerful rendering,
   137:         return self()
   141:         Returns a HTML representation of the field. For more powerful rendering,
   144:         return self()
   160:         return self.meta.render_field(self, kwargs)
   181:         :return: A unicode string which is the translated output.
   183:         return self._translations.gettext(string)
   193:         return self._translations.ngettext(singular, plural, n)
   197:         Validates the field and returns True or False. `self.errors` will
   234:         return len(self.errors) == 0
   242:         :return: True if validation was stopped, False otherwise.
   250:                 return True
   254:         return False
   376:         return self.field_class(*self.args, **kw)
   379:         return '<UnboundField(%s, %r, %r)>' % (self.field_class.__name__, self.args, self.kwargs)
   386:     Accessing a non-existing attribute returns False for its value.
   390:             return super(Flags, self).__getattr__(name)
   391:         return False
   394:         return getattr(self, name)
   398:         return '<wtforms.fields.Flags: {%s}>' % ', '.join(flags)
   410:         return self()
   413:         return self()
   416:         return self()
   426:         return Markup('<label %s>%s</label>' % (attributes, text))
   429:         return 'Label(%r, %r)' % (self.field_id, self.text)
   449:         Provides data for choice widget rendering. Must return a sequence or
   466:             return text_type(self.data)
   574:         return text_type(self.data) if self.data is not None else ''
   599:         return self.babel_numbers.parse_decimal(value, self.locale)
   602:         return self.babel_numbers.format_decimal(value, self.number_format, self.locale)
   617:             return self.raw_data[0]
   619:             return text_type(self.data)
   621:             return ''
   674:             return self.raw_data[0]
   677:                 return text_type(self._format_decimal(self.data))
   685:                     return text_type(quantized)
   690:                     return format % self.data
   692:                 return text_type(self.data)
   694:             return ''
   720:             return self.raw_data[0]
   722:             return text_type(self.data)
   724:             return ''
   765:             return text_type(self.raw_data[0])
   767:             return 'y'
   782:             return ' '.join(self.raw_data)
   784:             return self.data and self.data.strftime(self.format) or ''
   871:         return self.form.validate()
   884:         return iter(self.form)
   887:         return self.form[name]
   890:         return getattr(self.form, name)
   894:         return self.form.data
   898:         return self.form.errors
   998:         return len(self.errors) == 0
  1030:         return field
  1039:         return self._add_entry(data=data)
  1042:         """ Removes the last entry from the list and returns it. """
  1045:         return entry
  1048:         return iter(self.entries)
  1051:         return len(self.entries)
  1054:         return self.entries[index]
  1058:         return [f.data for f in self.entries]

PythonVenv\Lib\site-packages\wtforms\fields\simple.py:
  58:         return False

PythonVenv\Lib\site-packages\wtforms\widgets\core.py:
   23:     return Markup(*args, **kwargs)
   33:     return escape(*args, **kwargs)
   74:     return ' '.join(params)
  103:         return Markup(''.join(html))
  136:         return Markup(''.join(html))
  161:         return Markup('<input %s>' % self.html_params(name=field.name, **kwargs))
  187:         return super(PasswordInput, self).__call__(field, **kwargs)
  209:         return super(CheckboxInput, self).__call__(field, **kwargs)
  224:         return super(RadioInput, self).__call__(field, **kwargs)
  246:         return super(FileInput, self).__call__(field, **kwargs)
  260:         return super(SubmitInput, self).__call__(field, **kwargs)
  273:         return Markup('<textarea %s>\r\n%s</textarea>' % (
  303:         return Markup(''.join(html))
  314:         return Markup('<option %s>%s</option>' % (html_params(**options), escape(label)))
  325:         return Select.render_option(field._value(), field.label.text, field.checked, **kwargs)

PythonVenv\Lib\site-packages\wtforms\widgets\html5.py:
  102:         return super(NumberInput, self).__call__(field, **kwargs)
  117:         return super(RangeInput, self).__call__(field, **kwargs)

PythonVenv\Lib\site-packages\xxhash-3.4.1.dist-info\METADATA:
  117:     | digest() -- return the current digest value
  118:     | hexdigest() -- return the current digest as a string of hexadecimal digits
  119:     | intdigest() -- return the current digest as an integer
  120:     | copy() -- return a copy of the current xxhash object
  123: md5 digest returns bytes, but the original xxh32 and xxh64 C APIs return integers.
  194: ``digest()`` returns bytes of the **big-endian** representation of the integer
  287: As of python-xxhash 0.3.0, ``digest()`` returns bytes of the
  493: - Improve: Check XXHnn_init() return value.

PythonVenv\Lib\site-packages\xyzservices\lib.py:
   44:             return self.__getitem__(key)
   49:         return self.keys()
   87:         return html
   90:         """Return the nested :class:`Bunch` collapsed into the one level dictionary.
   95:         Returns
  123:         return flat
  132:         """Return a subset of the :class:`Bunch` matching the filter conditions
  141:             Condition returns ``True`` if ``keyword`` string is present in any string
  145:             Condition returns ``True`` if ``name`` string is present in
  149:             Condition returns ``True`` if :meth:`TileProvider.requires_token` returns
  152:             Custom function taking :class:`TileProvider` as an argument and returns
  155:         Returns
  180:         You can also pass custom function that takes :class:`TileProvider` and returns
  186:         ...        return True
  187:         ...    return False
  214:             return all(cond)
  243:             return new
  245:         return _filter_bunch(
  254:         """Return :class:`TileProvider` based on the name query
  256:         Returns a matching :class:`TileProvider` from the :class:`Bunch` if the ``name``
  266:         Returns
  274:         All these queries return the same ``CartoDB.Positron`` TileProvider:
  290:             return xyz_flat_lower[name_clean]
  375:         return new
  379:         return new
  393:         Can return URL with placeholders or the final tile URL.
  411:         Returns
  466:         return url.format(x=x, y=y, z=z, s=s, r=r, **provider)
  470:         Returns ``True`` if the TileProvider requires access token to fetch tiles.
  479:         Returns
  497:         Calling the object will return a copy:
  506:                 return True
  507:         return False
  512:             return self["html_attribution"]
  513:         return self["attribution"]
  539:         return html
  552:         Returns
  578:         return cls(
  603:     return providers

PythonVenv\Lib\site-packages\xyzservices\tests\test_lib.py:
   11:     return TileProvider(
   20:     return TileProvider(
   30:     return TileProvider(
   39:     return TileProvider(
   49:     return TileProvider(
   59:     return TileProvider(
   76:     return Bunch(
  240:             return True
  242:             return True
  243:         return False

PythonVenv\Lib\site-packages\xyzservices\tests\test_providers.py:
  29:     return (z, x, y)
  41:     return r.status_code

PythonVenv\Lib\site-packages\yaml\__init__.py:
   26:         return {}
   58:         return loader.get_single_node()
   81:         return loader.get_single_data()
  105:     return load(stream, FullLoader)
  115:     return load_all(stream, FullLoader)
  125:     return load(stream, SafeLoader)
  135:     return load_all(stream, SafeLoader)
  145:     return load(stream, UnsafeLoader)
  155:     return load_all(stream, UnsafeLoader)
  162:     If stream is None, return the produced string instead.
  176:         return getvalue()
  185:     If stream is None, return the produced string instead.
  206:         return getvalue()
  211:     If stream is None, return the produced string instead.
  213:     return serialize_all([node], stream, Dumper=Dumper, **kwds)
  223:     If stream is None, return the produced string instead.
  246:         return getvalue()
  251:     If stream is None, return the produced string instead.
  253:     return dump_all([data], stream, Dumper=Dumper, **kwds)
  259:     If stream is None, return the produced string instead.
  261:     return dump_all(documents, stream, Dumper=SafeDumper, **kwds)
  267:     If stream is None, return the produced string instead.
  269:     return dump_all([data], stream, Dumper=SafeDumper, **kwds)
  381:         return loader.construct_yaml_object(node, cls)
  388:         return dumper.represent_yaml_object(cls.yaml_tag, data, cls,

PythonVenv\Lib\site-packages\yaml\composer.py:
   22:         return not self.check_event(StreamEndEvent)
   27:             return self.compose_document()
   48:         return document
   61:         return node
   70:             return self.anchors[anchor]
   86:         return node
   97:         return node
  115:         return node
  138:         return node

PythonVenv\Lib\site-packages\yaml\constructor.py:
   32:         return self.check_node()
   43:         # Construct and return the next document.
   45:             return self.construct_document(self.get_node())
   51:             return self.construct_document(node)
   52:         return None
   65:         return data
   69:             return self.constructed_objects[node]
  115:         return data
  122:         return node.value
  129:         return [self.construct_object(child, deep=deep)
  145:         return mapping
  157:         return pairs
  177:                     return self.construct_scalar(value_node)
  178:         return super().construct_scalar(node)
  218:         return super().construct_mapping(node, deep=deep)
  222:         return None
  235:         return self.bool_values[value.lower()]
  246:             return 0
  248:             return sign*int(value[2:], 2)
  250:             return sign*int(value[2:], 16)
  252:             return sign*int(value, 8)
  261:             return sign*value
  263:             return sign*int(value)
  279:             return sign*self.inf_value
  281:             return self.nan_value
  290:             return sign*value
  292:             return sign*float(value)
  303:                 return base64.decodebytes(value)
  305:                 return base64.decodestring(value)
  330:             return datetime.date(year, month, day)
  350:         return datetime.datetime(year, month, day, hour, minute, second, fraction,
  403:         return self.construct_scalar(node)
  487:         return ['^extend$', '^__.*__$']
  492:         return self.state_keys_blacklist_regexp
  495:         return self.construct_scalar(node)
  498:         return self.construct_scalar(node)
  509:                 return base64.decodebytes(value)
  511:                 return base64.decodestring(value)
  517:         return self.construct_yaml_int(node)
  520:        return complex(self.construct_scalar(node))
  523:         return tuple(self.construct_sequence(node))
  538:         return sys.modules[name]
  563:         return getattr(module, object_name)
  570:         return self.find_python_name(suffix, node.start_mark)
  577:         return self.find_python_module(suffix, node.start_mark)
  591:             return cls.__new__(cls, *args, **kwds)
  593:             return cls(*args, **kwds)
  656:         return instance
  659:         return self.construct_python_object_apply(suffix, node, newobj=True)
  716:         return super(UnsafeConstructor, self).find_python_module(name, mark, unsafe=True)
  719:         return super(UnsafeConstructor, self).find_python_name(name, mark, unsafe=True)
  722:         return super(UnsafeConstructor, self).make_python_instance(
  726:         return super(UnsafeConstructor, self).set_python_instance_state(

PythonVenv\Lib\site-packages\yaml\emitter.py:
   122:             return True
   125:             return self.need_events(1)
   127:             return self.need_events(2)
   129:             return self.need_events(3)
   131:             return False
   143:                 return False
   144:         return (len(self.events) < count+1)
   176:         return self.expect_document_start(first=True)
   374:         return self.expect_block_sequence_item(first=True)
   393:         return self.expect_block_mapping_key(first=True)
   423:         return (isinstance(self.event, SequenceStartEvent) and self.events
   427:         return (isinstance(self.event, MappingStartEvent) and self.events
   432:             return False
   434:         return (isinstance(event, ScalarEvent) and event.anchor is None
   452:         return (length < 128 and (isinstance(self.event, AliasEvent)
   462:             return
   478:                 return
   485:                 return
   498:             return '"'
   504:                 return ''
   508:                 return self.event.style
   512:                 return '\''
   513:         return '"'
   543:         return '%d.%d' % (major, minor)
   555:         return handle
   578:         return ''.join(chunks)
   584:             return tag
   612:             return '%s%s' % (handle, suffix_text)
   614:             return '!<%s>' % suffix_text
   624:         return anchor
   630:             return ScalarAnalysis(scalar=scalar, empty=True, multiline=False,
   778:         return ScalarAnalysis(scalar=scalar,
   989:         return hints
  1084:             return

PythonVenv\Lib\site-packages\yaml\error.py:
  16:             return None
  34:         return ' '*indent + head + snippet + tail + '\n'  \
  43:         return where
  74:         return '\n'.join(lines)

PythonVenv\Lib\site-packages\yaml\events.py:
  13:         return '%s(%s)' % (self.__class__.__name__, arguments)

PythonVenv\Lib\site-packages\yaml\nodes.py:
  23:         return '%s(tag=%r, value=%s)' % (self.__class__.__name__, self.tag, value)

PythonVenv\Lib\site-packages\yaml\parser.py:
  101:                 return True
  104:                     return True
  105:         return False
  112:         return self.current_event
  121:         return value
  137:         return event
  154:             return event
  157:             return self.parse_document_start()
  188:         return event
  206:         return event
  213:             return event
  215:             return self.parse_block_node()
  246:         return value
  265:         return self.parse_node(block=True)
  268:         return self.parse_node()
  271:         return self.parse_node(block=True, indentless_sequence=True)
  372:         return event
  379:         return self.parse_block_sequence_entry()
  386:                 return self.parse_block_node()
  389:                 return self.process_empty_scalar(token.end_mark)
  398:         return event
  408:                 return self.parse_block_node()
  411:                 return self.process_empty_scalar(token.end_mark)
  415:         return event
  425:         return self.parse_block_mapping_key()
  432:                 return self.parse_block_node_or_indentless_sequence()
  435:                 return self.process_empty_scalar(token.end_mark)
  444:         return event
  451:                 return self.parse_block_node_or_indentless_sequence()
  454:                 return self.process_empty_scalar(token.end_mark)
  458:             return self.process_empty_scalar(token.start_mark)
  474:         return self.parse_flow_sequence_entry(first=True)
  492:                 return event
  495:                 return self.parse_flow_node()
  500:         return event
  507:             return self.parse_flow_node()
  510:             return self.process_empty_scalar(token.end_mark)
  517:                 return self.parse_flow_node()
  520:                 return self.process_empty_scalar(token.end_mark)
  524:             return self.process_empty_scalar(token.start_mark)
  529:         return MappingEndEvent(token.start_mark, token.start_mark)
  540:         return self.parse_flow_mapping_key(first=True)
  556:                     return self.parse_flow_node()
  559:                     return self.process_empty_scalar(token.end_mark)
  562:                 return self.parse_flow_node()
  567:         return event
  574:                 return self.parse_flow_node()
  577:                 return self.process_empty_scalar(token.end_mark)
  581:             return self.process_empty_scalar(token.start_mark)
  585:         return self.process_empty_scalar(self.peek_token().start_mark)
  588:         return ScalarEvent(None, None, (True, False), '', mark, mark)

PythonVenv\Lib\site-packages\yaml\reader.py:
   13: #   reader.peek(length=1) - return the next `length` characters
   35:             return "'%s' codec can't decode byte #x%02x: %s\n"  \
   40:             return "unacceptable character #x%04x: %s\n"    \
   54:     #  - a file-like object with its `read` method returning `str`,
   55:     #  - a file-like object with its `read` method returning `unicode`.
   89:             return self.buffer[self.pointer+index]
   92:             return self.buffer[self.pointer+index]
   97:         return self.buffer[self.pointer:self.pointer+length]
  116:             return Mark(self.name, self.index, self.line, self.column,
  119:             return Mark(self.name, self.index, self.line, self.column,
  148:             return

PythonVenv\Lib\site-packages\yaml\representer.py:
   43:                 return node
   63:         return node
   83:         return node
  101:         return node
  129:         return node
  132:         return False
  138:             return True
  140:             return True
  142:             return True
  145:         return self.represent_scalar('tag:yaml.org,2002:null', 'null')
  148:         return self.represent_scalar('tag:yaml.org,2002:str', data)
  155:         return self.represent_scalar('tag:yaml.org,2002:binary', data, style='|')
  162:         return self.represent_scalar('tag:yaml.org,2002:bool', value)
  165:         return self.represent_scalar('tag:yaml.org,2002:int', str(data))
  189:         return self.represent_scalar('tag:yaml.org,2002:float', value)
  199:             return self.represent_sequence('tag:yaml.org,2002:seq', data)
  204:         #return SequenceNode(u'tag:yaml.org,2002:pairs', value)
  207:         return self.represent_mapping('tag:yaml.org,2002:map', data)
  213:         return self.represent_mapping('tag:yaml.org,2002:set', value)
  217:         return self.represent_scalar('tag:yaml.org,2002:timestamp', value)
  221:         return self.represent_scalar('tag:yaml.org,2002:timestamp', value)
  228:         return self.represent_mapping(tag, state, flow_style=flow_style)
  283:         return self.represent_scalar('tag:yaml.org,2002:python/complex', data)
  286:         return self.represent_sequence('tag:yaml.org,2002:python/tuple', data)
  290:         return self.represent_scalar('tag:yaml.org,2002:python/name:'+name, '')
  293:         return self.represent_scalar(
  297:         # We use __reduce__ API to save the data. data.__reduce__ returns
  307:         # Another special case is when __reduce__ returns a string - we don't
  342:             return self.represent_mapping(
  346:             return self.represent_sequence(tag+function_name, args)
  356:         return self.represent_mapping(tag+function_name, value)
  364:         return self.represent_sequence(tag, [items])

PythonVenv\Lib\site-packages\yaml\resolver.py:
   93:             return
  116:             return
  125:                 return
  128:                 return
  130:             return
  133:             return
  137:                 return
  140:                 return
  141:         return True
  152:                     return tag
  157:                 return exact_paths[kind]
  159:                 return exact_paths[None]
  161:             return self.DEFAULT_SCALAR_TAG
  163:             return self.DEFAULT_SEQUENCE_TAG
  165:             return self.DEFAULT_MAPPING_TAG

PythonVenv\Lib\site-packages\yaml\scanner.py:
   119:                 return True
   122:                     return True
   123:         return False
   126:         # Return the next token, but do not delete if from the queue.
   127:         # Return None if no more tokens.
   131:             return self.tokens[0]
   133:             return None
   136:         # Return the next token.
   141:             return self.tokens.pop(0)
   147:             return False
   149:             return True
   154:             return True
   173:             return self.fetch_stream_end()
   177:             return self.fetch_directive()
   181:             return self.fetch_document_start()
   185:             return self.fetch_document_end()
   189:         #    return self.fetch_bom()    <-- issue BOMToken
   195:             return self.fetch_flow_sequence_start()
   199:             return self.fetch_flow_mapping_start()
   203:             return self.fetch_flow_sequence_end()
   207:             return self.fetch_flow_mapping_end()
   211:             return self.fetch_flow_entry()
   215:             return self.fetch_block_entry()
   219:             return self.fetch_key()
   223:             return self.fetch_value()
   227:             return self.fetch_alias()
   231:             return self.fetch_anchor()
   235:             return self.fetch_tag()
   239:             return self.fetch_literal()
   243:             return self.fetch_folded()
   247:             return self.fetch_single()
   251:             return self.fetch_double()
   255:             return self.fetch_plain()
   265:         # Return the number of the nearest possible simple key. Actually we
   269:         #       return None
   270:         #   return self.possible_simple_keys[
   277:         return min_token_number
   341:             return
   354:             return True
   355:         return False
   688:             return True
   696:                 return True
   704:                 return True
   709:         return self.peek(1) in '\0 \t\r\n\x85\u2028\u2029'
   715:             return True
   719:             return self.peek(1) in '\0 \t\r\n\x85\u2028\u2029'
   725:             return True
   729:             return self.peek(1) in '\0 \t\r\n\x85\u2028\u2029'
   746:         return ch not in '\0 \t\r\n\x85\u2028\u2029-?:,[]{}#&*!|>\'\"%@`'  \
   804:         return DirectiveToken(name, value, start_mark, end_mark)
   825:         return value
   842:         return (major, minor)
   855:         return value
   865:         return (handle, prefix)
   874:         return value
   883:         return value
   933:         return TokenClass(value, start_mark, end_mark)
   974:         return TagToken(value, start_mark, end_mark)
  1049:         return ScalarToken(''.join(chunks), False, start_mark, end_mark,
  1090:         return chomping, increment
  1119:         return chunks, max_indent, end_mark
  1132:         return chunks, end_mark
  1155:         return ScalarToken(''.join(chunks), False, start_mark, end_mark,
  1226:                 return chunks
  1250:         return chunks
  1268:                 return chunks
  1309:         return ScalarToken(''.join(chunks), True, start_mark, end_mark)
  1328:                 return
  1338:                         return
  1346:         return chunks
  1370:         return value
  1395:         return ''.join(chunks)
  1414:         return value
  1431:             return '\n'
  1434:             return ch
  1435:         return ''

PythonVenv\Lib\site-packages\yaml\serializer.py:
  76:         return self.ANCHOR_TEMPLATE % self.last_anchor_id

PythonVenv\Lib\site-packages\yaml\tokens.py:
  12:         return '%s(%s)' % (self.__class__.__name__, arguments)

PythonVenv\Lib\site-packages\yarl\_quoting_c.pyx:
   25:         return <Py_UCS4>(v+0x30)  # ord('0') == 0x30
   27:         return <Py_UCS4>(v+0x41-10)  # ord('A') == 0x41
   32:         return <int>(v) - 0x30  # ord('0') == 0x30
   34:         return <int>(v) - 0x41 + 10  # ord('A') == 0x41
   36:         return <int>(v) - 0x61 + 10  # ord('a') == 0x61
   38:         return -1
   42:     return 'a' <= v <= 'f'
   48:         return <Py_UCS4>-1
   51:         return <Py_UCS4>-1
   52:     return <Py_UCS4>(digit1 << 4 | digit2)
   60:     return array[ch >> 3] & (1 << (ch & 7))
  109:                 return -1
  115:                 return -1
  121:     return 0
  126:         return -1
  128:         return -1
  129:     return _write_char(writer, _to_hex(<uint8_t>ch & 0x0f), changed)
  136:         return _write_pct(writer, <uint8_t>utf, True)
  139:             return -1
  140:         return _write_pct(writer,  <uint8_t>(0x80 | (utf & 0x3f)), True)
  143:         return 0
  146:             return -1
  149:             return -1
  150:         return _write_pct(writer, <uint8_t>(0x80 | (utf & 0x3f)), True)
  153:         return 0
  156:             return -1
  159:             return -1
  162:             return -1
  163:         return _write_pct(writer, <uint8_t>(0x80 | (utf & 0x3f)), True)
  207:             return None
  216:             return self._do_quote(<str>val, &writer)
  256:             return val
  258:             return PyUnicode_DecodeASCII(writer.buf, writer.pos, "strict")
  263:                 return _write_char(writer, '+', True)
  266:             return _write_char(writer, ch, False)
  268:         return _write_utf8(writer, ch)
  285:             return None
  292:         return self._do_unquote(<str>val)
  296:             return val
  371:         return ''.join(ret)

PythonVenv\Lib\site-packages\yarl\_quoting_py.py:
   38:             return None
   42:             return ""
  114:             return val
  115:         return ret2
  127:             return None
  131:             return ""
  196:             return val
  197:         return ret2

PythonVenv\Lib\site-packages\yarl\_url.py:
    21:     return obj
    43:             return self
    46:             return val
    49:         return val
    76:     return resolved_path
   170:             return val
   212:         return self
   230:         """Creates and returns a new URL"""
   283:             return url.with_query(query)
   285:             return url
   294:         return urlunsplit(val)
   297:         return f"{self.__class__.__name__}('{str(self)}')"
   300:         return str(self).encode("ascii")
   304:             return NotImplemented
   314:         return val1 == val2
   323:         return ret
   327:             return NotImplemented
   328:         return self._val <= other._val
   332:             return NotImplemented
   333:         return self._val < other._val
   337:             return NotImplemented
   338:         return self._val >= other._val
   342:             return NotImplemented
   343:         return self._val > other._val
   347:             return NotImplemented
   348:         return self._make_child((str(name),))
   351:         return self.update_query(query)
   354:         return bool(
   359:         return (self._val,)
   372:         Return True for absolute ones (having scheme or starting
   376:         return self.raw_host is not None
   381:         Return True if port is default for specified scheme,
   387:             return False
   390:             return False
   391:         return self.port == default
   394:         """Return an URL with scheme, host and port parts only.
   407:         return URL(val, encoded=True)
   410:         """Return a relative part of the URL.
   418:         return URL(val, encoded=True)
   427:         return self._val.scheme
   436:         return self._val.netloc
   445:         return self._make_netloc(
   459:             return None
   460:         return ret
   469:         return self._UNQUOTER(self.raw_user)
   478:         return self._val.password
   487:         return self._UNQUOTER(self.raw_password)
   498:         return self._val.hostname
   509:             return None
   514:             return raw
   515:         return _idna_decode(raw)
   525:         return self._val.port or DEFAULT_PORTS.get(self._val.scheme)
   534:         return self._val.port
   546:         return ret
   555:         return self._PATH_UNQUOTER(self.raw_path)
   566:         return MultiDictProxy(ret)
   575:         return self._val.query
   584:         return self._QS_UNQUOTER(self.raw_query_string)
   590:             return self.path
   591:         return f"{self.path}?{self.query_string}"
   597:             return self.raw_path
   598:         return f"{self.raw_path}?{self.raw_query_string}"
   607:         return self._val.fragment
   616:         return self._UNQUOTER(self.raw_fragment)
   636:         return tuple(parts)
   645:         return tuple(self._UNQUOTER(part) for part in self.raw_parts)
   656:                 return URL(self._val._replace(query="", fragment=""), encoded=True)
   657:             return self
   660:         return URL(val, encoded=True)
   669:                 return ""
   671:                 return parts[-1]
   673:             return parts[-1]
   678:         return self._UNQUOTER(self.raw_name)
   685:             return name[i:]
   687:             return ""
   691:         return self._UNQUOTER(self.raw_suffix)
   697:             return ()
   699:         return tuple("." + suffix for suffix in name.split(".")[1:])
   703:         return tuple(self._UNQUOTER(suffix) for suffix in self.raw_suffixes)
   745:         return URL(
   761:         return prefix + "/".join(_normalize_path_segments(segments))
   775:                 return host
   783:         return host
   809:         return ret
   812:         """Return a new URL with scheme replaced."""
   818:         return URL(self._val._replace(scheme=scheme.lower()), encoded=True)
   821:         """Return a new URL with user replaced.
   839:         return URL(
   847:         """Return a new URL with password replaced.
   864:         return URL(
   872:         """Return a new URL with host replaced.
   888:         return URL(
   896:         """Return a new URL with port replaced.
   910:         return URL(
   918:         """Return a new URL with path replaced."""
   925:         return URL(self._val._replace(path=path, query="", fragment=""), encoded=True)
   940:             return v
   946:             return str(float(v))
   948:             return str(int(v))
   993:         return query
   996:         """Return a new URL with query part replaced.
  1011:         return URL(
  1016:         """Return a new URL with query part updated."""
  1024:         return URL(
  1029:         """Return a new URL with fragment replaced.
  1044:             return self
  1045:         return URL(self._val._replace(fragment=raw_fragment), encoded=True)
  1048:         """Return a new URL with name (last part of path) replaced.
  1074:         return URL(
  1080:         """Return a new URL with suffix (file extension of name) replaced.
  1098:         return self.with_name(name)
  1115:         return URL(urljoin(str(self), str(url)), encoded=True)
  1118:         """Return a new URL with the elements in other appended to the path."""
  1119:         return self._make_child(other, encoded=encoded)
  1122:         """Return decoded human readable string for URL representation."""
  1134:         return urlunsplit(
  1153:         return s
  1158:         return s
  1159:     return "".join(c if c.isprintable() else quote(c) for c in s)
  1168:         return idna.decode(raw.encode("ascii"))
  1170:         return raw.encode("ascii").decode("idna")
  1176:         return idna.encode(host, uts46=True).decode("ascii")
  1178:         return host.encode("idna").decode("ascii")
  1189:     return {

PythonVenv\Lib\site-packages\yarl-1.9.4.dist-info\METADATA:
  433: - Made ``URL.__truediv__()`` return ``NotImplemented`` if called with an
  731: * ``bool(URL())`` now returns ``False`` (#272)

PythonVenv\Lib\site-packages\yattag\doc.py:
   49:         return ''.join(lst)
   69:             return value == default
   71:             return value in default
   72:         return False
   79:             return False
   83:             return False
   84:         return self.__class__.match(default, value)    
  105:         return ''.join(lst)
  118:             return value == default
  119:         return False
  136:             return input_instance
  138:     return InputGroup
  168:         return ''.join(lst)
  204:         return ''.join(lst)
  246:     return required_attrs + [attrs]
  427:             return
  449:         return self.__class__.TextareaTag(self, name, attrs)
  456:         return self.__class__.SelectTag(self, name, attrs)
  463:             return self.__class__.OptionTag(self, self.current_select, value, attrs)
  480:             return doc.getvalue()
  482:             return ''
  488:         returns the whole document as a string
  494:         return ''.join(self.result)

PythonVenv\Lib\site-packages\yattag\indentation.py:
   26:         return kls
   31:         return cls._token_classes[name]
   55:         return self._isblank
  119:         return kls
  182:         return result
  202:                 return open_tag
  204:                 return None
  240:             return self.name_matchers[tag_name]
  243:             return name_matcher
  247:         return i in self.name_matchers[self.token_list[i].tag_name].matched
  251:         return i in self.direct_text_parents
  258:     takes a string representing a html or xml document and returns
  382:     return ''.join(result)

PythonVenv\Lib\site-packages\yattag\simpledoc.py:
  137:         return self.__class__.Tag(self, tag_name, _attributes(args, kwargs))
  375:         returns the whole document as a single string
  377:         return ''.join(self.result)
  382:         return a triplet composed of::
  397:         return self, self.tag, self.text
  402:         returns a quadruplet composed of::
  419:         return self, self.tag, self.text, self.line
  470:             return set()
  472:             return set(current_classes.split())
  487:         return str(s)
  489:         return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
  500:         return str(s)
  502:         return s.replace("&", "&amp;").replace("<", "&lt;").replace('"', "&quot;")
  514:     return ' '.join(
  538:     return result

PythonVenv\Lib\site-packages\zmq\__init__.py:
  36:         return
  48:         return
  75:     """Return a list of directories to include for linking against pyzmq with cython."""
  83:     return includes
  87:     """Return a list of directories used to link against pyzmq's bundled libzmq."""
  92:     return [join(parent, base)]

PythonVenv\Lib\site-packages\zmq\_future.py:
    1: """Future-returning APIs for coroutines."""
   51:             return self._current_loop
   57:         return current_loop
   67:     """Poller that returns a Future on poll, instead of blocking."""
   83:         """Return a Future for a poll event"""
   92:             return future
  137:                 return
  144:                 return
  182:         return future
  236:         return cls(_from_socket=socket, io_loop=io_loop)
  259:         return result
  289:         Returns a Future whose result will be a multipart message.
  291:         return self._add_recv_event(
  313:         Returns a Future, whose result will be the received frame.
  317:         return self._add_recv_event('recv', dict(flags=flags, copy=copy, track=track))
  324:         Returns a Future that resolves when sending is complete.
  329:         return self._add_send_event('send_multipart', msg=msg_parts, kwargs=kwargs)
  341:         Returns a Future that resolves when sending is complete.
  349:         return self._add_send_event('send', msg=data, kwargs=kwargs)
  368:                 return
  385:                 return
  391:         return f
  396:         returns a Future for the poll results.
  410:                 return
  417:                 return
  441:         return future
  445:         return super().recv_string(*args, **kwargs)  # type: ignore
  450:         return super().send_string(s, flags=flags, encoding=encoding)  # type: ignore
  458:                 return
  463:         return self._call_later(timeout, future_timeout)
  473:         return self._get_loop().call_later(delay, callback)
  484:             return
  491:             return
  494:         """Add a recv event, returning the corresponding Future"""
  505:             return f
  533:         return f
  536:         """Add a send event, returning the corresponding Future"""
  566:                 # short-circuit resolved, return finished Future
  570:                 return f
  592:         return f
  598:             return
  612:             return
  619:             return
  638:             return
  652:             return
  659:             return
  679:             return
  698:             return

PythonVenv\Lib\site-packages\zmq\_typing.py:
  16:                 return Any

PythonVenv\Lib\site-packages\zmq\asyncio.py:
   35:     Returns an object with ``add_reader`` family of methods,
   43:         return _selectors[asyncio_loop]
   85:         return selector_loop
   87:         return asyncio_loop
   92:     return loop
  108:             return asyncio.get_running_loop()
  116:         return asyncio.get_event_loop()
  120:     """Poller returning asyncio.Future for poll results."""
  139:     """Socket returning asyncio Futures for send/recv/poll methods."""
  146:         return _get_selector(io_loop)
  184:         return super().__init__(selector)
  192:         return

PythonVenv\Lib\site-packages\zmq\constants.py:
  147:         return obj
  308:         return f"NOTIFY_{name}"
  323:         return f"NORM_{name}"
  333:     """Security mechanisms (as returned by ``socket.get(zmq.MECHANISM)``)
  352:         return f"RECONNECT_STOP_{name}"
  368:             return name
  371:             return "EVENT_" + name

PythonVenv\Lib\site-packages\zmq\decorators.py:
   78:                     return func(*args, **kwargs)
   80:             return wrapper
   82:         return decorator
   85:         """Return the target function
   89:         return self._target
  105:         return kw_name, args, kwargs
  125:         return kw_name, args, kwargs
  130:         return context.socket
  144:         :return: a ``zmq.Context`` instance
  150:                 return ctx
  154:                 return arg
  156:         return zmq.Context.instance()
  172:     return _ContextDecorator()(*args, **kwargs)
  190:     return _SocketDecorator()(*args, **kwargs)

PythonVenv\Lib\site-packages\zmq\error.py:
   61:         return self.strerror
   64:         return f"{self.__class__.__name__}('{str(self)}')"
  125:         return s + ": This call should have been retried. Please report this to pyzmq."
  129:     """internal utility for checking zmq return condition
  139:             return
  175:         return "ZMQVersionError('%s')" % str(self)
  178:         return f"{self.msg} requires libzmq >= {self.min_version}, have {self.version}"

PythonVenv\Lib\site-packages\zmq\auth\base.py:
  179:                         return True
  182:                         return False
  195:         """Return the User-Id corresponding to a CURVE client's public key
  208:         Returns
  213:         return z85.encode(client_public_key).decode('ascii')
  231:             return
  242:             return
  291:                     return
  302:                     return
  312:                     return
  359:         return allowed, reason
  421:         return allowed, reason
  426:         return True, b'OK'

PythonVenv\Lib\site-packages\zmq\auth\certs.py:
   68:     Returns the file paths to the public and secret certificate files.
   86:     return public_key_file, secret_key_file
   94:     Returns (public_key, secret_key)
  121:     return public_key, secret_key
  137:     return certs

PythonVenv\Lib\site-packages\zmq\auth\thread.py:
   66:                     return
   76:             return True
   82:         return False
  133:         return bool(self.thread and self.thread.is_alive())

PythonVenv\Lib\site-packages\zmq\backend\select.py:
  41:     return ns

PythonVenv\Lib\site-packages\zmq\backend\cffi\__init__.py:
  20:     return (int(major[0]), int(minor[0]), int(patch[0]))

PythonVenv\Lib\site-packages\zmq\backend\cffi\_cffi_src.c:
  49:   return zmq_msg_init_data(msg, data, size, free_python_msg, hint);

PythonVenv\Lib\site-packages\zmq\backend\cffi\_poll.py:
  26:     return zmq_pollitem[0]
  35:     return zmq_pollitem[0]
  89:     return result

PythonVenv\Lib\site-packages\zmq\backend\cffi\context.py:
  38:         return int(ffi.cast('size_t', self._zmq_ctx))
  42:         return self._closed
  59:         return rc
  63:             return

PythonVenv\Lib\site-packages\zmq\backend\cffi\devices.py:
  13:     return proxy(frontend, backend)

PythonVenv\Lib\site-packages\zmq\backend\cffi\error.py:
  15:     return s

PythonVenv\Lib\site-packages\zmq\backend\cffi\message.py:
   25:     """Return content of obj as bytes"""
   27:         return obj
   30:     return obj.tobytes()
   44:     return 0
   77:             return
  100:             return
  145:             return
  169:         return self._buffer
  175:         return self._bytes
  178:         return self.buffer.nbytes
  181:         return self.bytes == _content(other)
  185:         return self.tracker.done()
  188:         return self.buffer
  198:         return self.fast_copy()
  217:         return new_msg

PythonVenv\Lib\site-packages\zmq\backend\cffi\socket.py:
   21:     return ffi.new('uint64_t*'), nsp(ffi.sizeof('uint64_t'))
   25:     return ffi.new('int64_t*'), nsp(ffi.sizeof('int64_t'))
   29:     return ffi.new('int*'), nsp(ffi.sizeof('int'))
   33:     return ffi.new('char[%d]' % length), nsp(ffi.sizeof('char') * length)
   37:     return ffi.new('uint64_t*', val), ffi.sizeof('uint64_t')
   41:     return ffi.new('int64_t*', val), ffi.sizeof('int64_t')
   45:     return ffi.new('int*', val), ffi.sizeof('int')
   49:     return ffi.new('char[%d]' % (length + 1), val), ffi.sizeof('char') * length
   61:         return new_int64_pointer()
   63:         return new_binary_data(length)
   66:         return new_int_pointer()
   81:         return ffi.buffer(opt_pointer, length)[:]
   83:         return int(opt_pointer[0])
   89:         return value_int64_pointer(value)
   91:         return value_binary_data(value, length)
   93:         return value_int_pointer(value)
  124:         return int(ffi.cast('size_t', self._zmq_socket))
  132:         returns True if closed, False otherwise
  135:             return True
  141:                 return True
  146:         return False
  150:         return self._check_closed_deep()
  261:         return v
  287:         return tracker
  294:             return self._send_copy(data, flags)
  307:                         return zmq._FINISHED_TRACKER
  314:             return tracker
  332:             return frame
  338:         return _bytes

PythonVenv\Lib\site-packages\zmq\backend\cffi\utils.py:
  21:     return bool(C.zmq_has(capability))
  29:     Returns
  39:     return ffi.buffer(public)[:40], ffi.buffer(private)[:40]
  52:     Returns
  63:     return ffi.buffer(public)[:40]

PythonVenv\Lib\site-packages\zmq\backend\cython\_zmq.py:
   136:     """internal utility for checking zmq return condition
   143:         return 0
   161:     return 0
   215:         return 0
   226:     return PyBytes_FromStringAndSize(data_c, data_len_c)
   268:             return
   285:             return
   326:             return
   333:         return self.fast_copy()
   353:         return new_msg
   373:         """Return the length of the message in bytes."""
   375:         return sz
   382:             return _buffer
   385:         return _buffer
   393:         returned.
   397:         return self._bytes
   425:             return rc
   431:             return routing_id
   436:             return buf.decode('utf8')
   451:         return result.decode('utf8')
   472:             return
   478:             return
   524:         return cast(size_t, self.handle)
   534:         return rc
   604:         Returns
   616:         return rc
   678:         return cast(size_t, self.handle)
   683:         return _check_closed_deep(self)
   792:         Returns
   850:         return result
  1031:             # but return a nicer error message if it fails
  1096:         Returns
  1121:             return _send_copy(self.handle, data, flags)
  1133:                         return zmq._FINISHED_TRACKER
  1135:             return _send_frame(self.handle, msg, flags)
  1151:             If False a Frame object is returned, if True a string copy of
  1152:             message is returned.
  1157:         Returns
  1172:             return _recv_copy(self.handle, flags)
  1176:             return frame
  1201:     returns True if closed, False otherwise
  1209:         return True
  1218:                 return True
  1221:                 return False
  1224:     return False
  1230:     """Receive a message in a non-copying manner and return a Frame."""
  1244:     return msg
  1250:     """Receive a message and return a copy"""
  1270:     return msg_bytes
  1294:     return msg.tracker
  1372:     """Return the integer errno of the most recent zmq error."""
  1373:     return _zmq_errno()
  1378:     Return the error string given the error number.
  1381:     return str_e.decode("utf8", "replace")
  1385:     """Return the version of ZeroMQ itself as a 3-tuple of ints."""
  1390:     return (major, minor, patch)
  1404:     return bool(zmq_has(ccap))
  1415:     Returns
  1430:     return public_key, secret_key
  1444:     Returns
  1462:     return public_key[:40]
  1488:         return []
  1516:                 raise ValueError('fileno() must return a valid integer fd')
  1563:         # - only return sockets with non-zero status
  1564:         # - return the fd for plain sockets
  1573:     return results
  1597:         return proxy(frontend, backend)
  1609:     return rc
  1643:     return rc
  1690:     return rc
  1717:             return rc
  1721:             return rc
  1727:             return rc
  1730:             return rc
  1733:             return rc
  1737:             return rc
  1740:             return rc
  1743:             return rc
  1747:             return rc
  1751:             return rc
  1758:             return rc
  1762:                 return rc
  1766:                 return rc
  1770:                 return rc
  1773:                 return rc
  1775:     return rc
  1798:         return rc
  1802:         return rc
  1816:             return rc
  1821:                 return rc
  1824:                 return rc
  1830:                 return rc
  1835:                 return rc
  1838:                 return rc
  1844:                 return rc
  1845:     return rc
  1921:     return rc

PythonVenv\Lib\site-packages\zmq\devices\basedevice.py:
   68:     """Callable that returns a context. Typically either Context.instance or Context,
  129:         return port
  164:         return port
  197:         return port
  228:         return ins, outs
  260:         return self.run()
  282:         return self.launcher.start()
  285:         return self.launcher.join(timeout=timeout)
  305:     """Callable that returns a context. Typically either Context.instance or Context,

PythonVenv\Lib\site-packages\zmq\devices\proxydevice.py:
  39:         return port
  71:         return ins, outs, mons

PythonVenv\Lib\site-packages\zmq\devices\proxysteerabledevice.py:
  37:         return port
  68:         return ins, outs, mons, ctrls

PythonVenv\Lib\site-packages\zmq\eventloop\_deprecated.py:
   61:             return
   89:         return z_events
  101:         return events
  104:         return self._poller.register(fd, self._map_events(events))
  107:         return self._poller.modify(fd, self._map_events(events))
  110:         return self._poller.unregister(fd)
  118:         return [(fd, self._remap_events(evt)) for (fd, evt) in z_events]
  127:     Minor modifications, so that .current/.instance return self
  138:         """Returns a global `IOLoop` instance.
  155:         return loop
  159:         """Returns the current thread‚Äôs IOLoop."""
  171:         return loop
  178:                 # quietly return on ETERM
  192:     IOLoop.instance() will return the same object.

PythonVenv\Lib\site-packages\zmq\eventloop\future.py:
   1: """Future-returning APIs for tornado coroutines.
  33:             return False
  35:         return True
  38:         return self.done() and isinstance(self.exception(), CancelledError)
  59:         return IOLoop.current()
  64:         return _CancellableTornadoTimeout(io_loop, timeout)
  93:         return Socket(self, socket_type)

PythonVenv\Lib\site-packages\zmq\eventloop\zmqstream.py:
   91:         Now, the callback functions reliably get the return value of the base `zmq.Socket` send/recv_multipart methods
  154:         return self.on_recv(None)
  158:         return self.on_send(None)
  215:             list, as returned by socket.recv_multipart()
  222:         Returns : None
  285:                 return callback(self, msg)
  299:         * `status` will be the return result of socket.send_multipart(msg) -
  302:         Non-copying sends return a MessageTracker object whose
  321:             and the return result of socket.send_multipart(msg) -
  352:         return self.send_multipart(
  391:         return self.send(u.encode(encoding), flags=flags, callback=callback, **kwargs)
  406:         return self.send(msg, flags=flags, callback=callback, **kwargs)
  421:         return self.send(msg, flags, callback=callback, **kwargs)
  435:         flush will return the first time ANY of these conditions are met:
  455:         Returns
  471:             return flag & zmq.POLLIN | (self.sending() and flag & zmq.POLLOUT)
  476:             return 0
  511:         return count
  540:         """Returns True if we are currently receiving from the stream."""
  541:         return self._recv_callback is not None
  544:         """Returns True if we are currently sending to the stream."""
  545:         return not self._send_queue.empty()
  549:             return True
  554:             return True
  555:         return False
  589:             return
  596:             return
  607:             return
  613:                     return
  617:                     return
  628:             return
  645:             return
  648:             return
  667:             return
  690:             return

PythonVenv\Lib\site-packages\zmq\green\core.py:
  117:             return
  149:             # gevent bug: get can raise timeout even on clean return
  187:             # gevent bug: get can raise timeout even on clean return
  218:             return msg
  234:                 return msg
  250:             return msg
  264:                 return msg
  275:         return msg
  285:         return msg
  296:         return optval
  304:         return super().set(opt, val)

PythonVenv\Lib\site-packages\zmq\green\poll.py:
  20:         """Returns three elements tuple with socket descriptors ready
  37:                     raise ValueError('fileno() must return an valid integer fd')
  51:         return (rlist, wlist, xlist)
  81:                     return events
  98:             return []

PythonVenv\Lib\site-packages\zmq\log\handlers.py:
  118:         return self._root_topic
  155:         return self.formatters[record.levelno].format(record)
  174:             return

PythonVenv\Lib\site-packages\zmq\ssh\forward.py:
  53:             return
  59:             return

PythonVenv\Lib\site-packages\zmq\ssh\tunnel.py:
   46:     """Select and return n random ports that are available."""
   56:     return ports
   78:     return f(server, keyfile)
  109:             return True
  111:             return False
  142:         return False
  145:         return True
  168:     return tunnel
  176:     Returns
  203:     return 'tcp://127.0.0.1:%i' % lport, tunnel
  268:             return pid
  302:                 return tunnel.pid
  328:     return username, server, port
  387:     return p

PythonVenv\Lib\site-packages\zmq\sugar\attrsettr.py:
  22:             return
  27:                 return
  56:                 return self._get_attr_opt(upper_key, opt)
  68:         return self.get(opt)

PythonVenv\Lib\site-packages\zmq\sugar\context.py:
  160:         return f"<{_repr_cls}({sockets}) at {hex(id(self))}{closed}>"
  163:         return self
  172:         return self.__class__.shadow(self.underlying)
  189:         return cls(shadow=address)
  205:         return cls(shadow=address)
  210:         """Returns a global Context instance.
  243:         return cls._instance
  275:         return keys
  307:             return
  367:         return s
  381:         return self.sockopts[opt]
  386:             return self.set(opt, value)
  395:             return self.get(opt)
  400:                 return self.sockopts[opt]
  406:             return

PythonVenv\Lib\site-packages\zmq\sugar\frame.py:
   70:         return self.get(key)
   73:         """Return the str form of the message."""
   97:         return f"<{_module}.{self.__class__.__name__}({msg_bytes!r}{msg_suffix})>"
  108:         return self.get('group')
  124:         return self.get('routing_id')

PythonVenv\Lib\site-packages\zmq\sugar\poll.py:
   29:         return socket in self._map
   42:             method that returns a valid file descriptor.
   83:         If there are currently events ready to be processed, this function will return immediately.
   84:         Otherwise, this function will return as soon the first event is available or after timeout
   93:         Returns
  106:         return zmq_poll(self.sockets, timeout=timeout)
  114:     Return the result of poll as a lists of sockets ready for r/w/exception.
  130:     Returns
  156:     return_sockets = zmq_poll(sockets, timeout)
  158:     for s, flags in return_sockets:
  165:     return rlist, wlist, xlist

PythonVenv\Lib\site-packages\zmq\sugar\socket.py:
    52:         return f"<SocketContext({self.kind}={self.addr!r})>"
    63:         return self.socket
    67:             return
    74: SocketReturnType = TypeVar("SocketReturnType")
    77: class Socket(SocketBase, AttributeSetter, Generic[SocketReturnType]):
   198:         return f"<{_repr_cls}(zmq.{self._type_name}) at {hex(id(self))}{closed}>"
   206:         return self
   217:         return self.__class__.shadow(self.underlying)
   234:         return cls(shadow=address)
   266:         return _SocketContext(self, 'connect', addr)
   280:         return _SocketContext(self, 'bind', addr)
   291:         Returns a context manager which will call unbind on exit.
   315:         return self._bind_cm(addr)
   322:         Returns a context manager which will call disconnect on exit.
   341:         return self._connect_cm(addr)
   350:         return cast(int, self.type)
   359:         return keys
   371:             return
   380:             return
   384:         """Return edge-triggered file descriptor for this socket.
   392:         return self.FD
   435:         return self.set(option, optval.encode(encoding))
   449:         Returns
   455:             raise TypeError(f"option {option} will not return a string to be decoded")
   456:         return cast(bytes, self.get(option)).decode(encoding)
   482:         Returns
   502:             return int(port_s)
   517:                 return port
   527:             # return sndhwm, fallback on rcvhwm
   529:                 return cast(int, self.get(zmq.SNDHWM))
   533:             return cast(int, self.get(zmq.RCVHWM))
   535:             return cast(int, self.get(zmq.HWM))
   660:         Returns
   701:         return super().send(data, flags=flags, copy=copy, track=track)
   731:         Returns
   758:         return self.send(msg_parts[-1], flags, copy=copy, track=track)
   789:             If False a Frame object is returned for each part, if True a copy of
   795:         Returns
   812:         # how do we get mypy to recognize that return type is invariant on `copy`?
   813:         return cast(Union[List[zmq.Frame], List[bytes]], parts)
   824:         The default implementation expects bytes and returns the deserialized message immediately.
   832:             The object returned by self.recv
   835:         return load(recvd)
   847:             serialize(msg) should return an iterable of sendable message frames
   856:         return self.send_multipart(frames, flags=flags, copy=copy, **kwargs)
   868:             returned by recv_multipart() and can return any object.
   874:         Returns
   877:             The object returned by the deserialization function.
   885:         return self._deserialize(frames, deserialize)
   911:         return self.send(u.encode(encoding), flags=flags, copy=copy, **kwargs)
   925:         Returns
   936:         return self._deserialize(msg, lambda buf: buf.decode(encoding))
   956:         return self.send(msg, flags=flags, **kwargs)
   966:         Returns
   977:         return self._deserialize(msg, pickle.loads)
   996:         return self.send(msg, flags=flags, **send_kwargs)
  1008:         Returns
  1019:         return self._deserialize(msg, lambda buf: jsonapi.loads(buf, **kwargs))
  1037:         Returns
  1050:         # return 0 if no events, otherwise return event bitfield
  1051:         return evts.get(self, 0)
  1056:         """Return a connected PAIR socket ready to receive the event notifications.
  1069:         Returns
  1080:         # if already monitoring, return existing socket
  1085:                 return self._monitor_socket
  1098:         return self._monitor_socket

PythonVenv\Lib\site-packages\zmq\sugar\stopwatch.py:
  34:         """Return time since start in microseconds"""
  36:         return int(1e6 * (stop - self._start))

PythonVenv\Lib\site-packages\zmq\sugar\tracker.py:
  64:                 return False
  67:                 return False
  68:         return True
  79:         Returns

PythonVenv\Lib\site-packages\zmq\sugar\version.py:
  40:     """return the version of pyzmq as a string"""
  42:         return '+'.join([__version__, __revision__[:6]])
  44:         return __version__
  48:     """return the pyzmq version as a tuple of at least three numbers
  52:     return version_info
  56:     """return the version of libzmq as a string"""
  57:     return "%i.%i.%i" % zmq_version_info()

PythonVenv\Lib\site-packages\zmq\tests\__init__.py:
   38:     return x
   71:         return self.__class__.__module__.split(".", 1)[0] == __name__.split(".", 1)[0]
   75:         return (
   84:             return gzmq.Context
   86:             return zmq.Context
   91:         return s
  146:         return s1, s2
  153:         return msg3
  162:         return o3
  169:         return o3
  187:             # zmq 3.1 has a bug, where poll can return false positives,
  197:         return recv(**kwargs)
  201:         return self._select_recv(False, socket, **kwargs)
  205:         return self._select_recv(True, socket, **kwargs)
  263:             return f(self, *args, **kwargs)
  265:     return skipping_test

PythonVenv\Lib\site-packages\zmq\tests\conftest.py:
   56:     return io_loop
   90:         return
  105:     return zmq.Context
  130:     return ctx
  153:         return s
  155:     return new_socket
  172:         # zmq 3.1 has a bug, where poll can return false positives,
  182:     return recv(flags=flags, **kwargs)
  198:         return s1, s2
  200:     return create_bound_pair
  205:     return create_bound_pair()
  210:     return create_bound_pair(zmq.PUSH, zmq.PULL)
  215:     return create_bound_pair(zmq.DEALER, zmq.ROUTER)

PythonVenv\Lib\site-packages\zmq\tests\cython_ext.pyx:
   8:     return recvd
  23:     return recvd_bytes

PythonVenv\Lib\site-packages\zmq\tests\test_asyncio.py:
   22:     return zaio.Context
  160:         return frames
  165:         return {

PythonVenv\Lib\site-packages\zmq\tests\test_auth.py:
   27:     return zmq.asyncio.Context
   64:     return (public_keys_dir, secret_keys_dir)
   68:     """Return server and client certificate keys"""
   75:     return server_public, server_secret, client_public, client_secret
   81:     return public_keys_dir
   87:     return secret_keys_dir
   92:     return load_certs(secret_keys_dir)
  159:                 return False
  161:             return False
  171:         return result
  322:                     return True
  324:                     return False
  329:                     return True
  331:                     return False
  398:         return ThreadAuthenticator(self.context)
  411:         return AsyncioAuthenticator(self.context)

PythonVenv\Lib\site-packages\zmq\tests\test_context.py:
  299:                 return

PythonVenv\Lib\site-packages\zmq\tests\test_decorators.py:
  327: def test_func_return():
  331:         return 'something'

PythonVenv\Lib\site-packages\zmq\tests\test_device.py:
  104:             return

PythonVenv\Lib\site-packages\zmq\tests\test_future.py:
  209:             return frames
  214:             return {

PythonVenv\Lib\site-packages\zmq\tests\test_log.py:
   22:         return logger
   34:         return logger, handler, sub
  185:                 return self.msg

PythonVenv\Lib\site-packages\zmq\tests\test_message.py:
  45:             return

PythonVenv\Lib\site-packages\zmq\tests\test_monitor.py:
  16:         return zmq.asyncio.Context
  18:         return zmq.Context

PythonVenv\Lib\site-packages\zmq\tests\test_monqueue.py:
  43:         return alice, bob, mon

PythonVenv\Lib\site-packages\zmq\tests\test_mypy.py:
  30:     return resolved_path
  48:     assert p.returncode == 0, out

PythonVenv\Lib\site-packages\zmq\tests\test_socket.py:
  273:                         f"getsockopt({opt!r}) returned a ridiculous value."
  645:             return frames
  650:             return {

PythonVenv\Lib\site-packages\zmq\tests\test_win32_shim.py:
  15:             return f(*args, **kwds)
  20:     return _

PythonVenv\Lib\site-packages\zmq\tests\test_zmqstream.py:
  31:     return (push, pull)
  37:     return push
  43:     return pull

PythonVenv\Lib\site-packages\zmq\utils\buffers.pxd:
   82:     Returns
   87:         return 3
   88:     return 0
  113:     Returns
  150:         return bfmt.decode('ascii')
  151:     return bfmt
  157:     return ob
  163:     return ob
  182:     Returns
  193:     return PyMemoryView_FromBuffer(&pybuf)
  198:     return frombuffer(ptr, s, 1)
  203:     return frombuffer(ptr, s, 0)
  220:     Returns
  224:     return PyMemoryView_FromObject(obj)
  229:     return viewfromobject(obj, 1)
  234:     return viewfromobject(obj, 0)

PythonVenv\Lib\site-packages\zmq\utils\garbage.py:
   34:             return
   45:                 return
  100:         return self._context
  123:             return
  156:         return self._push
  185:             return False
  186:         return True
  192:                 return 0
  202:         return theid
  206:             return

PythonVenv\Lib\site-packages\zmq\utils\interop.py:
  18:         return n
  27:             return int(ffi.cast("size_t", n))

PythonVenv\Lib\site-packages\zmq\utils\ipcmaxlen.h:
  21:     return sizeof(dummy->sun_path) - 1;
  25:     return 0;

PythonVenv\Lib\site-packages\zmq\utils\jsonapi.py:
  25:     return json.dumps(o, **kwargs).encode("utf8")
  35:     return json.loads(s, **kwargs)

PythonVenv\Lib\site-packages\zmq\utils\monitor.py:
   39:     Returns
   52:     return event
   60:     Given awaitable message, return awaitable for the parsed monitor message.
   65:     return parse_monitor_message(msg)
   86:     """Receive and decode the given raw message from the monitoring socket and return a dict.
   90:     The returned dict will have the following entries:
  101:         returns an awaitable for the monitor message.
  110:     Returns
  117:     # will always return a list
  121:     # returns a Future instead of a dict
  123:         return _parse_monitor_msg_async(msg)
  126:     return parse_monitor_message(msg)

PythonVenv\Lib\site-packages\zmq\utils\mutex.h:
  53:     return mutex;
  59:         return;
  68:     return 0;
  70:     return pthread_mutex_lock(&mutex->mutex);
  78:     return 0;
  80:     return pthread_mutex_unlock(&mutex->mutex);

PythonVenv\Lib\site-packages\zmq\utils\strtypes.py:
  26:         return s
  28:         return s.encode(encoding, errors)
  41:         return s.decode(encoding, errors)
  43:         return s

PythonVenv\Lib\site-packages\zmq\utils\win32.py:
   40:     and control returns to the Python interpreter (this may never happen if
   67:         ``action`` is a callable that takes no arguments and returns no
   68:         value (returned value is ignored).  It must *NEVER* raise an
   74:             return
   94:                 return None
  102:                 # Typical C implementations would return 1 to indicate that
  108:             return 0
  115:             return
  125:             return

PythonVenv\Lib\site-packages\zmq\utils\z85.py:
  38:     return bytes(encoded)
  59:     return struct.pack('>%dI' % nvalues, *values)

PythonVenv\Lib\site-packages\zope\interface\_compat.py:
   29:         return name
   37:     Return a true value if the C optimizations are required.
   43:     return require_c
   48:     Return the C optimization module, if available, otherwise
   59:         return c_opt
   61:         return False
   69:     return pure_env is not None and pure_env != "0"
   74:     Return a true value if we should attempt to use the C optimizations.
   82:         return True
   84:         return False
   85:     return not _c_optimizations_ignored()
   97:     and return the Python version. If the C implementation cannot be
   98:     imported, return the Python version. If ``PURE_PYTHON`` is set to
  120:             return py_impl
  124:             return py_impl
  127:         return getattr(c_opt, name)
  135:     return c_impl

PythonVenv\Lib\site-packages\zope\interface\_flatten.py:
  32:         return r
  36:     return r

PythonVenv\Lib\site-packages\zope\interface\_zope_interface_coptimizations.c:
    61:     return -1;
    66:     return -1;
    70:     return -1;
    74:     return -1;
    80:     return -1;
    86:       return -1;
    94:   return 0;
   104:     return NULL;
   106:   return PyObject_CallFunctionObjArgs(fallback, cls, NULL);
   121:       return implementedByFallback(cls);
   137:       return implementedByFallback(cls);
   145:         return NULL;
   148:         return spec;
   152:       return implementedByFallback(cls);
   159:     return NULL;
   165:       return spec;
   169:   return implementedByFallback(cls);
   183:           return NULL;
   194:           return NULL;
   198:           return result;
   209:           return NULL;
   213:           return NULL;
   216:       return empty;
   221:   return result;
   237:           return NULL;
   243:       return implementedBy(NULL, ob);
   252:           return NULL;
   256:       return getObjectSpecification(NULL, ob);
   268:     return result;
   280:     return NULL;
   289:       return result;
   298:       return result;
   314:   return result;
   352:     return 0;
   364:     return 0;
   387:     return NULL;
   391:     Py_RETURN_TRUE;
   392:   Py_RETURN_FALSE;
   409:     return NULL;
   410:   return Spec_extends(self, spec);
   420:     return NULL;
   431:   return item;
   447:     return NULL;
   455:   return item;
   521:     return getObjectSpecification(NULL, cls);
   524:   /* Return __provides__ if we got it, or return NULL and propagate non-AttributeError. */
   526:     return provides;
   529:   return implementedBy(NULL, cls);
   583:     return NULL;
   590:           return OBJECT(self);
   595:       return implements;
   599:   return NULL;
   607:     return Spec_traverse((Spec*)self, visit, arg);
   616:     return 0;
   683:             return obj
   688:                 return adapter
   700:     return NULL;
   710:           return NULL;
   725:         return NULL;
   733:       return obj;
   739:     return NULL;
   750:           return adapter;
   758:   return Py_None;
   784:                 return adapter
   789:             return adapter
   791:             return alternate
   805:     return NULL;
   813:           return NULL;
   827:           return adapter;
   854:       return adapter;
   861:       return alternate;
   870:   return NULL;
   879:     return Spec_traverse((Spec*)self, visit, arg);
   887:     return Spec_clear((Spec*)self);
   913:         return -1;
   917:         return -1;
   921:         return self->_v_cached_hash;
   926:         return -1;
   930:     return self->_v_cached_hash;
   952:             Py_RETURN_TRUE;
   955:             Py_RETURN_FALSE;
   964:             Py_RETURN_TRUE;
   966:             Py_RETURN_FALSE;
  1021:     return oresult;
  1034:         return -1;
  1041:     return 0;
  1116:       return vret;
  1122:       return vret;
  1128:       return vret;
  1131:   return 0;
  1140:   return 0;
  1162:   return Py_None;
  1166:                                         if (N == NULL) return NULL; \
  1181:         return cache
  1195:         return NULL;
  1199:         return NULL;
  1202:   return subcache;
  1212:     return NULL;
  1217:   return cache;
  1237:             return default
  1239:         return result
  1253:     return NULL;
  1261:     return NULL;
  1266:     return NULL;
  1283:           return NULL;
  1290:           return NULL;
  1303:       return default_;
  1306:   return result;
  1316:     return NULL;
  1318:   return _lookup(self, required, provided, name, default_);
  1327:             return self.lookup((required, ), provided, name, default)
  1330:             return default
  1332:         return result
  1345:     return NULL;
  1350:     return NULL;
  1359:         return NULL;
  1374:   return result;
  1384:     return NULL;
  1386:   return _lookup1(self, required, provided, name, default_);
  1402:                 return result
  1404:         return default
  1417:     return NULL;
  1422:     return NULL;
  1427:     return NULL;
  1436:               return NULL;
  1445:         return result;
  1451:     return result;   /* Return None.  result is owned None */
  1456:   return default_;
  1466:     return NULL;
  1468:   return _adapter_hook(self, provided, object, name, default_);
  1479:     return NULL;
  1481:   return _adapter_hook(self, provided, object, name, default_);
  1497:         return result
  1507:     return NULL;
  1512:     return NULL;
  1524:           return NULL;
  1531:           return NULL;
  1540:   return result;
  1550:     return NULL;
  1552:   return _lookupAll(self, required, provided);
  1568:         return result
  1578:     return NULL;
  1583:     return NULL;
  1596:           return NULL;
  1603:           return NULL;
  1612:   return result;
  1622:     return NULL;
  1624:   return _subscriptions(self, required, provided);
  1679:     return vret;
  1684:       return vret;
  1689:       return vret;
  1692:   return 0;
  1701:   return 0;
  1735:           return NULL;
  1740:   return generations;
  1751:     return NULL;
  1755:     return NULL;
  1760:     return NULL;
  1765:     return NULL;
  1771:       return NULL;
  1777:   return Py_None;
  1798:         return -1;
  1804:         return -1;
  1807:         return 0;
  1813:     return -1;
  1816:   return 0;
  1827:     return NULL;
  1830:     return NULL;
  1832:   return _lookup((lookup *)self, required, provided, name, default_);
  1843:     return NULL;
  1846:     return NULL;
  1848:   return _lookup1((lookup *)self, required, provided, name, default_);
  1859:     return NULL;
  1862:     return NULL;
  1864:   return _adapter_hook((lookup *)self, provided, object, name, default_);
  1875:     return NULL;
  1878:     return NULL;
  1880:   return _adapter_hook((lookup *)self, provided, object, name, default_);
  1891:     return NULL;
  1894:     return NULL;
  1896:   return _lookupAll((lookup *)self, required, provided);
  1907:     return NULL;
  1910:     return NULL;
  1912:   return _subscriptions((lookup *)self, required, provided);
  2000:   if(! (str ## S = PyUnicode_FromString(# S))) return NULL
  2025:     return NULL;
  2030:     return NULL;
  2033:     return NULL;
  2036:     return NULL;
  2040:     return NULL;
  2044:     return NULL;
  2048:     return NULL;
  2052:     return NULL;
  2056:     return NULL;
  2059:     return NULL;
  2061:     return NULL;
  2063:     return NULL;
  2065:     return NULL;
  2067:     return NULL;
  2069:     return NULL;
  2070:   return m;
  2076:   return init();

PythonVenv\Lib\site-packages\zope\interface\adapter.py:
  220:         :return:
  221:            This method returns the new value to be stored. It may mutate the
  223:            it must also return it.
  228:             return (new_item,)
  229:         return existing_leaf_sequence + (new_item,)
  234:         *existing_leaf_sequence* and return the mutated sequence.
  242:         return a new tuple constructed by iterating across
  248:         :return:
  250:            *to_remove* removed. Must not return `None`. However,
  251:            returning an empty
  257:         return tuple([v for v in existing_leaf_sequence if v != to_remove])
  268:             return
  287:             return
  303:         # If no such leaf value exists, returns ``None``
  307:             return None
  315:                 return None
  318:         return components.get(name)
  321:         return self._find_leaf(
  374:             return False
  383:                 return
  389:             return
  391:             return
  451:         return subscriber if subscriber in subscribers else None
  473:             return
  482:                 return
  489:             return  # pragma: no cover
  506:             return
  566:                 return iter(())
  568:             return itertools.chain((first,), it)
  595:         return XXXTwistedFakeOut
  624:         return cache
  644:             return default
  646:         return result
  654:             return self.lookup((required, ), provided, name, default)
  657:             return default
  659:         return result
  662:         return self.adapter_hook(provided, object, name, default)
  678:                 return result
  680:         return default
  694:         return result
  709:         return result
  731:         return LookupBaseFallback._getcache(self, provided, name)
  735:         return LookupBaseFallback.lookupAll(self, required, provided)
  739:         return LookupBaseFallback.subscriptions(self, required, provided)
  834:         return result
  839:             return default
  843:             return default
  845:         return result
  863:         return tuple(result.items())
  866:         return [c[0] for c in self.lookupAll(required, provided)]
  889:         return result
  903:         return result
  962:         return Interface
  964:         return x
  978:                     return r
  985:                     return r
  987:     return None

PythonVenv\Lib\site-packages\zope\interface\advice.py:
   42:     """Return (kind,module,locals,globals) for a frame
   74:     return kind, module, f_locals, f_globals
   79:     return isinstance(ob,FunctionType) and hasattr(ob,'previousMetaclass')
   94:         return meta[0]
  102:     # Just one, return it
  103:     return candidates[0]
  120:     return candidates

PythonVenv\Lib\site-packages\zope\interface\declarations.py:
    55:     # When ``ob`` is an instance of ``super``, return
    62:     return next_class
    71:         return ob
    86:         return self.extends(interface) and interface in self.interfaces()
    89:         """Return an iterator for the interfaces in the specification
    91:         return self.interfaces()
    94:         """Return an iterator of all included and extended interfaces
    96:         return iter(self.__iro__)
   101:         return Declaration(*[
   135:         return Declaration(*(before + result))
   153:         return interfaces + (implemented_by_cls,)
   190:         return ', '.join(ordered_names)
   195:     # return empty answers for things like ``implementedBy``.
   207:         return _ImmutableDeclaration.__instance
   210:         return "_empty"
   214:         return ()
   233:         return {}
   239:         return iter(())
   242:         return interface is self._ROOT
   245:         return default
   248:         # We're a singleton, we never go away. So there's no need to return
   250:         # be called. Instead, we only need to return a callable that
   251:         # returns ourself. The easiest one is to return _ImmutableDeclaration
   253:         # returns _empty. (Remember, one goal is to avoid allocating any
   255:         return _ImmutableDeclaration
   263:         return {}
   324:         return inst
   331:         return super().changed(originally_changed)
   341:         return 'classImplements({}{})'.format(name, declared_names)
   344:         return implementedBy, (self.inherit, )
   348:     # Return the __name__ attribute to be used by its __implemented__
   356:     return (getattr(ob, '__module__', '?') or '?') + \
   366:     # search order (e.g., just return
   379:         return cache[key]
   404:     return new
   408: def implementedBy(cls): # pylint:disable=too-many-return-statements,too-many-branches
   409:     """Return the interfaces implemented for a class' instances
   411:       The value returned is an `~zope.interface.interfaces.IDeclaration`.
   417:             return _implementedBy_super(cls)
   437:                 return spec
   438:             return _empty
   442:             # Return it.
   443:             return spec
   448:         return Declaration(*_normalizeargs((spec, )))
   451:         return spec
   456:             return spec
   494:     return spec
   623:     return cls
   668:             return ob
   676:         return ob
   715:         return ob
   763:         return "{}({})".format(
   771:         return Provides, self.__args
   780:             # provides spec. Just return this object, but only if we are
   782:             return self
   807:     return spec
   882:                 # provides spec. Just return this object as is:
   883:                 return self
   885:             return self._implements
   921:         return "directlyProvides({})".format(ordered_names)
   924:         return self.__class__, self.__args
   931:     """Return the interfaces directly provided by the given object
   933:     The value returned is an `~zope.interface.interfaces.IDeclaration`.
   943:         return _empty
   946:     return Declaration(provides.__bases__[:-1])
   985:         return ob
  1053:     return Provides(cls, direct) # pragma: no cover fossil
  1064:             return provides
  1070:         return _empty
  1071:     return implementedBy(cls)
  1077:     Return the interfaces provided by *ob*.
  1090:             return implementedBy(ob)
  1095:         return getObjectSpecification(ob)
  1114:             return implementedBy(ob.__class__)
  1125:             return r
  1130:             return implementedBy(ob.__class__)
  1132:     return r
  1140:     an object. If an object has an ``__provides__`` attribute, that is returned.
  1141:     Otherwise, `implementedBy` the *cls* is returned.
  1157:             return getObjectSpecification(cls)
  1160:             return inst.__provides__
  1162:             return implementedBy(cls)
  1185:     return output

PythonVenv\Lib\site-packages\zope\interface\document.py:
   79:     return "\n\n".join(r) + "\n\n"
   85:     return asStructuredText(I, munge=munge, rst=True)
  100:     return '\n'.join(nlines)
  121:         return '\n'.join(lines)
  124:         return indent + \

PythonVenv\Lib\site-packages\zope\interface\exceptions.py:
   58:             return self.args[ix] # pylint:disable=unsubscriptable-object
   60:             return default
   64:         return self._get_arg_or_default(self._IX_INTERFACE)
   68:         return self._get_arg_or_default(self._IX_TARGET, self._NOT_GIVEN)
   94:             return "An object"
   95:         return "The object {!r}".format(target)
   99:         return "has failed to implement interface %s" % (
  108:         return "{} {}{}{}{}".format(
  149:         return self.args[1] # pylint:disable=unsubscriptable-object
  153:         return "The %s attribute was not provided" % (
  184:         return self.args[0] # pylint:disable=unsubscriptable-object
  188:         return self.args[1] # pylint:disable=unsubscriptable-object
  210:             return repr(impl)
  217:         return name + formatsig(sig)
  227:         return 'The contract of {} is violated because {}'.format(
  251:         return self.args[2] # pylint:disable=unsubscriptable-object
  257:         return '\n    ' + '\n    '.join(

PythonVenv\Lib\site-packages\zope\interface\interface.py:
    46: _decorator_non_return = object()
    56:     return _decorator_non_return
    64:     return _decorator_non_return
    89:         """ Returns the name of the object. """
    90:         return self.__name__
    93:         """ Returns the documentation for the object. """
    94:         return self.__doc__
   104:         """ Returns the value associated with 'tag'. """
   107:         return self.__tagged_values[tag]
   110:         """ Returns the value associated with 'tag'. """
   111:         return self.__tagged_values.get(tag, default) if self.__tagged_values else default
   114:         """ Returns a collection of all tags. """
   115:         return self.__tagged_values.keys() if self.__tagged_values else ()
   160:         return self in spec._implied
   168:         return self in spec._implied
   173:         return interface in self._implied # pylint:disable=no-member
   196:         Return 0 if they are equal, return 1 if *self* is
   197:         greater than *other*, and return -1 if *self* is less than
   201:         return ``NotImplemented``.
   217:             return 0
   220:             return -1
   226:             return NotImplemented
   229:         return (n1 > n2) - (n1 < n2)
   234:             return c
   235:         return c < 0
   240:             return c
   241:         return c <= 0
   246:             return c
   247:         return c > 0
   252:             return c
   253:         return c >= 0
   277:         return self.__ibmodule__
   290:                 return adapter
   295:             return adapter
   297:             return alternate
   304:             return obj
   309:                 return adapter
   311:         return None
   316:             return self._v_cached_hash
   319:         return self._v_cached_hash
   324:             return c
   325:         return c == 0
   329:             return False
   333:             return c
   334:         return c != 0
   383:         return self._dependents
   426:         Calculate and return the resolution order for this object, using its ``__bases__``.
   479:         return sro
   514:         """Return an iterator for the interfaces in the specification.
   529:         return ((interface in self._implied)
   535:         return weakref.ref(self, callback)
   551:         return default if attr is None else attr
   574:     # ``__module__`` and return the C storage.
   587:     # it on the class returns a ``property`` object, not the desired string.
   592:     # with the ``instance`` argument to ``__get__`` is None (returns
   597:     # returned.)
   645:         return kind
   649:         return cls.__module
   652:         return "<class '{}.{}'>".format(
   681:     return _decorator_non_return
   725:         return _InterfaceClassBase.__new__(cls)
   790:             return aval
   792:         return {
   809:             and aval is not _decorator_non_return
   813:         """Return an iterator for the interfaces in the specification.
   818:         return self.__bases__
   822:         return self == other or other.extends(self)
   825:         """Return the attribute names defined by the interface."""
   827:             return self.__attrs.keys()
   834:         return r.keys()
   837:         return iter(self.names(all=True))
   840:         """Return attribute names and descriptions defined by interface."""
   842:             return self.__attrs.items()
   850:         return r.items()
   853:         """Return the attribute description for the given name."""
   856:             return r
   863:         return self.get(name) is not None
   866:         return self.__attrs.get(name)
   869:         return self.get(name, default)
   889:         Queries for the value associated with *tag*, returning it from the nearest
   892:         If not found, returns *default*.
   897:                 return value
   898:         return default
   901:         """ Returns the value associated with 'tag'. """
   905:         return value
   908:         """ Returns a list of all tags. """
   912:         return keys
   916:             return self._v_repr
   921:             return r
   928:         return name
   932:             return conform(self)
   947:         return None # pragma: no cover
   950:         return self.__name__
   954:         return Union[self, other]
   958:         return Union[other, self]
   986:         """Return extra data to put at the end of __str__."""
   987:         return ""
   994:         return of + (self.__name__ or '<unknown>') + self._get_str_info()
   997:         return "<{}.{} object at 0x{:x} {}>".format(
  1021:             return {}
  1022:         return self._optional
  1033:         return {'positional': self.positional,
  1051:         return "(%s)" % ", ".join(sig)
  1105:     return method
  1113:     return fromFunction(func, interface, imlevel=1, name=name)

PythonVenv\Lib\site-packages\zope\interface\interfaces.py:
    89:         """Returns the value associated with *tag*.
    94:         through the inheritance hierarchy and returns the nearest result.
   103:         As for `getTaggedValue`, but instead of raising a `KeyError`, returns *default*.
   112:         Returns a collection of all tags in no particular order.
   162:         """Returns the signature information.
   164:         This method returns a dictionary with the following string keys:
   179:         """Return a signature string suitable for inclusion in documentation.
   181:         This method returns the function signature string. For example, if you
   192:         Return true of the object asserts that it implements the
   200:         Return true of the class asserts that its instances implement the
   219:         """Return a weakref to the specification
   257:         returned.
   352:         Return a collection of the names of the attributes, including
   363:         Return a collection of the names and descriptions of the
   381:         If the interface doesn't define the name, returns None.
   396:         """Return an iterator over the names defined by the interface
   415:         Return true if the given interface is one of the interfaces in
   420:         """Return an iterator for the interfaces in the specification
   424:         """Return an iterator of all included and extended interfaces
   426:         An iterator is returned for all interfaces either included in
   461:         """Return a true value of the interface specification is non-empty
   548:                          # Return the builtin ``range`` as-is
   549:                          return obj
   550:                      return super(type(IRange), self).__adapt__(obj)
   567:         Return the interfaces provided by an object.
   572:         The value returned is an `IDeclaration`.
   579:         Return the interfaces implemented for a class's instances.
   581:         The value returned is an `IDeclaration`.
   630:         A callable is returned that makes an implements declaration on
   664:         A callable is returned that makes an implements declaration on
   672:         Return the interfaces directly provided by the given object.
   674:         The value returned is an `IDeclaration`.
   801:         interfaces is returned.
   826:         """Return the component registered for the given interfaces and name
   835:         interfaces and name, then None is returned.
   872:         An iterable object is returned that provides name-value two-tuples.
   876:         """Return the names for which there are registered objects
   901:         return that object. (This does not guarantee whether the *subscriber*
   902:         itself is returned, or an object equal to it.)
   904:         If it has not, return ``None``.
   918:         interface are returned. This takes into account subscribers
   932:         This is like :meth:`subscriptions`, but calls the returned
   933:         subscribers with *objects* (and optionally returns the results
   934:         of those calls), instead of returning the subscribers directly.
   940:             If an interface is given, the results of calling each returned
   941:             subscriber with the the *objects* are collected and returned
   945:         :return: A sequence of the results of calling the subscribers
   996:         If a matching adapter cannot be found, returns the default.
  1009:         If a matching adapter cannot be found, returns the default.
  1022:         Return an iterable of name-adapter pairs for adapters that
  1029:         Subscribers are returned that provide the provided interface
  1043:         If one is not found, returns default.
  1049:         Returns an iterable of name-utility pairs.
  1053:         """Return all registered utilities for an interface
  1057:         An iterable of utility instances is returned.  No names are
  1058:         returned.
  1130:         return "{} event:\n{!r}".format(self.__class__.__name__, self.object)
  1186:         :returns:
  1187:             A boolean is returned indicating whether the registry was
  1190:             None and is not registered, then the function returns
  1191:             False, otherwise it returns True.
  1216:         """Return an iterable of `IUtilityRegistration` instances.
  1261:         :returns:
  1262:             A boolean is returned indicating whether the registry was
  1265:             None and is not registered, then the function returns
  1266:             False, otherwise it returns True.
  1300:         """Return an iterable of `IAdapterRegistration` instances.
  1348:         :returns:
  1349:             A boolean is returned indicating whether the registry was
  1352:             None and is not registered, then the function returns
  1353:             False, otherwise it returns True.
  1391:         """Return an iterable of `ISubscriptionAdapterRegistration` instances.
  1438:         :returns: A boolean is returned indicating whether the registry was
  1469:         """Return an iterable of `IHandlerRegistration` instances.

PythonVenv\Lib\site-packages\zope\interface\registry.py:
   58:                 return count
   59:         return 0
   65:                 return
   72:                 return
   76:     return defaultdict(int)
  115:         return count > 0
  119:             return self._cache[provided][component] > 0
  122:             return False
  161:         return "<{} {}>".format(self.__class__.__name__, self.__name__)
  176:         return tuple(reduction)
  201:         return cache
  205:         return self.__dict__.get('__bases__', ())
  237:                 return
  265:             return False
  278:         return True
  286:         return self.utilities.lookup((), provided, name, default)
  292:         return utility
  298:         return self.utilities.subscriptions((), interface)
  333:             return False
  343:         return True
  352:         return self.adapters.queryAdapter(object, interface, name, default)
  358:         return adapter
  362:         return self.adapters.queryMultiAdapter(
  369:         return adapter
  432:             return False
  443:         return True
  446:         return self.adapters.subscribers(objects, provided)
  492:             return False
  501:         return True
  522:         :return: A dictionary that's meant as diagnostic data. The keys
  566:         return {
  575:         return component.__component_name__
  577:         return ''
  582:         return provided[0]
  590:         return provided[0]
  620:     return tuple(result)
  632:         return '{}({!r}, {}, {!r}, {}, {!r}, {!r})'.format(
  641:         return id(self)
  644:         return repr(self) == repr(other)
  647:         return repr(self) != repr(other)
  650:         return repr(self) < repr(other)
  653:         return repr(self) <= repr(other)
  656:         return repr(self) > repr(other)
  659:         return repr(self) >= repr(other)
  670:         return '{}({!r}, {}, {}, {!r}, {}, {!r})'.format(
  679:         return id(self)
  682:         return repr(self) == repr(other)
  685:         return repr(self) != repr(other)
  688:         return repr(self) < repr(other)
  691:         return repr(self) <= repr(other)
  694:         return repr(self) > repr(other)
  697:         return repr(self) >= repr(other)
  713:         return self.handler
  718:         return '{}({!r}, {}, {!r}, {}, {!r})'.format(

PythonVenv\Lib\site-packages\zope\interface\ro.py:
   78: returned when adapting one or more objects to an interface. To debug
   98:     return __logger
  127:     return result
  140:     return result
  143:     return _legacy_mergeOrderings([_legacy_flatten(ob)])
  180:         return "{}: For object {!r}.\nBase ROs:\n{}\nConflict Location:\n{}".format(
  193:         return inst
  220:         return val
  234:         return list(self.__mro)
  255:         return factory(C, memo)
  288:         return self.direct_inconsistency or self.bases_had_inconsistency
  294:         return list(self.__legacy_ro)
  308:             return
  331:                     return False
  332:         return True
  336:         return list(filter(None, [
  344:         Return the next base.
  346:         The return value will either fit the C3 constraints or be our best
  351:             return base
  352:         return self._guess_next_base(base_tree_remaining)
  356:         Return the next base that fits the constraints, or ``None`` if there isn't one.
  361:                 return base
  362:         return None
  416:         # Returns a merged *list*.
  428:                 return result
  433:                 return self.legacy_ro
  440:         return list(self.__mro)
  465:         return C3._guess_next_base(self, base_tree_remaining)
  480:             return "{}{}".format(
  508:             return iter(lines)
  561:         return self._c3_report, self._legacy_report
  570:         return '+'.join(inconsistent) if inconsistent else 'no'
  602:         return '\n'.join(lines)
  615:     :return: A fresh `list` object.
  657:             return legacy_ro
  659:     return mro
  667:     return not C3.resolver(C, False, None).had_inconsistency

PythonVenv\Lib\site-packages\zope\interface\verify.py:
   61:     :return bool: Returns a true value if everything that could be
   93:     return True
  103:             return
  109:         return
  123:         return
  143:         return
  151:         return
  165:     return _verify(iface, candidate, tentative, vtype='c')
  168:     return _verify(iface, candidate, tentative, vtype='o')
  178:     #    return 'imlementation has different argument names'
  180:         return _MSG_TOO_MANY
  183:         return "implementation doesn't allow enough arguments"
  185:         return "implementation doesn't support keyword arguments"
  187:         return "implementation doesn't support variable arguments"

PythonVenv\Lib\site-packages\zope\interface\common\__init__.py:
   19: from zope.interface.interface import _decorator_non_return
   98:         ...     def __len__(self): return 1
  133:             return
  160:             attrs[k] = _decorator_non_return
  163:             return ''
  168:         return docs
  176:                 return "`%s`" % name
  179:             return "`{}.{}`".format(mod, name)
  197:         return doc
  203:             return False
  204:         return name.startswith('_')
  212:         return name.startswith('__r') and name.endswith('__')
  219:         return method
  233:         Return the ABC this interface represents.
  235:         return self.__abc
  239:         Return an iterable of the classes that are known to conform to
  260:         return set(itertools.chain(registered, self.__extra_classes))
  271:     return instance

PythonVenv\Lib\site-packages\zope\interface\common\builtins.py:
   47:         Sort the list in place and return None.
  115:     depending on the arguments, the :func:`open` builtin can return

PythonVenv\Lib\site-packages\zope\interface\common\collections.py:
  55:         return getattr(abc, name)
  68:     return missing

PythonVenv\Lib\site-packages\zope\interface\common\idatetime.py:
   56:     returning a `.timedelta`, and addition or subtraction of a `.datetime`
   84:         """Return the current local time.
   89:         """Return the local date from a POSIX timestamp (like time.time())
   99:         """Return the date corresponding to the proleptic Gregorian ordinal.
  128:         """Return a date with the same value.
  136:         """Return a 9-element tuple of the form returned by `time.localtime`.
  145:         """Return the proleptic Gregorian ordinal of the date
  152:         """Return the day of the week as an integer.
  161:         """Return the day of the week as an integer.
  170:         """Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
  189:         """Return a string representing the date in ISO 8601 format.
  199:         """Return a string representing the date.
  209:         """Return a string representing the date.
  231:         """Return the current local datetime, with tzinfo None.
  239:         """Return the current local date and time.
  254:         """Return the current UTC date and time, with tzinfo None.
  256:         This is like `now`, but returns the current UTC date and time, as a
  263:         """Return the local date and time corresponding to the POSIX timestamp.
  265:         Same as is returned by time.time(). If optional argument tz is None or
  267:         and time, and the returned datetime object is naive.
  286:         """Return the UTC datetime from the POSIX timestamp with tzinfo None.
  296:         """Return the datetime from the proleptic Gregorian ordinal.
  305:         """Return a new datetime object.
  340:          """Return date object with same year, month and day."""
  343:         """Return time object with same hour, minute, second, microsecond.
  351:         """Return time object with same hour, minute, second, microsecond,
  358:         """Return a datetime with the same members, except for those members
  366:         """Return a datetime object with new tzinfo member tz, adjusting the
  371:         dst() methods must not return None. self must be aware (self.tzinfo
  372:         must not be None, and self.utcoffset() must not return None).
  392:         tzinfo subclass to effect the result returned by `astimezone`.
  396:         """Return the timezone offset in minutes east of UTC (negative west of
  400:         """Return 0 if DST is not in effect, or the DST offset (in minutes
  405:         """Return the timezone name."""
  408:         """Return a 9-element tuple of the form returned by `time.localtime`."""
  411:         """Return UTC time tuple compatilble with `time.gmtime`."""
  414:         """Return the proleptic Gregorian ordinal of the date.
  420:         """Return the day of the week as an integer.
  427:         """Return the day of the week as an integer.
  435:         """Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
  441:         """Return a string representing the date and time in ISO 8601 format.
  445:         If `utcoffset` does not return None, a 6-character string is appended,
  460:         """Return a string representing the date and time.
  470:         """Return a string representing the date and time.
  516:         """Return a time with the same value.
  525:         """Return a string representing the time in ISO 8601 format.
  528:         If utcoffset() does not return None, a 6-character string is appended,
  537:         """Return a string representing the time.
  543:         """Return the timezone offset in minutes east of UTC (negative west of
  546:         If tzinfo is None, returns None, else returns
  548:         doesn't return None or a timedelta object representing a whole number
  553:         """Return 0 if DST is not in effect, or the DST offset (in minutes
  556:         If tzinfo is None, returns None, else returns self.tzinfo.dst(None),
  557:         and raises an exception if the latter doesn't return None, or a
  563:         """Return the timezone name.
  565:         If tzinfo is None, returns None, else returns self.tzinfo.tzname(None),
  566:         or raises an exception if the latter doesn't return None or a string
  576:         """Return offset of local time from UTC, in minutes east of UTC.
  581:         adjustments, utcoffset() should return their sum. If the UTC offset
  582:         isn't known, return None. Else the value returned must be a timedelta
  589:         """Return the daylight saving time (DST) adjustment, in minutes east
  594:         """Return the time zone name corresponding to the datetime object as
  599:         """Return an equivalent datetime in self's local time."""

PythonVenv\Lib\site-packages\zope\interface\common\mapping.py:
   57:         The default is returned if there is no value for the key.
   84:         """Return the keys of the mapping object.
   88:         """Return an iterator for the keys of the mapping object.
   92:         """Return the values of the mapping object.
   96:         """Return the items of the mapping object.
  116:         "return copy of dict"
  146:         Remove specified key and return the corresponding value.
  148:         If key is not found, *default* is returned if given, otherwise
  154:         """remove and return some (key, value) pair as a

PythonVenv\Lib\site-packages\zope\interface\common\sequence.py:
   47:     - an `__iter__()` method that returns an iterator as defined in
  115:         """Return number of occurrences of value"""
  120:         Return first index of *value*
  150:         """Remove and return item at index (default last)"""

PythonVenv\Lib\site-packages\zope\interface\common\tests\__init__.py:
   48:         return iface.__module__ == module
  108:         return x
  111:         return self.verifier(iface,
  139:         return result

PythonVenv\Lib\site-packages\zope\interface\common\tests\basemapping.py:
   33:     # Return the keys of the mapping object
   39:     # Return the keys of the mapping object
   45:     # Return the values of the mapping object
   51:     # Return the items of the mapping object
   57:     # Return the number of items
   78:         # Return the keys of the mapping object
   84:         # Return the values of the mapping object
   90:         # Return the items of the mapping object
   96:         # Return the number of items
  102:         return self._IEnumerableMapping__stateDict()
  105:         return self._IEnumerableMapping__sample()
  108:         return self._IEnumerableMapping__absentKeys()

PythonVenv\Lib\site-packages\zope\interface\tests\__init__.py:
  12:         Define this to return the implementation in use,
  19:         Define this to return the fallback Python implementation.
  54:             return d[name]

PythonVenv\Lib\site-packages\zope\interface\tests\odd.py:
   69:             return cls
   71:         return type.__getattribute__(cls, name)
   84:         return OddInstance(self)
   90:                 return v
   94:         return "<odd class {} at {}>".format(self.__name__, hex(id(self)))
  110:             return dict
  113:             return v
  114:         return getattr(dict['__class__'], name)
  123:         return "<odd {} instance at {}>".format(

PythonVenv\Lib\site-packages\zope\interface\tests\test_adapter.py:
    48:     return IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1
    57:         return self._data[name]
    66:         return len(self._data)
    69:         return name in self._data
    73:             return True
    76:             return False
    77:         return other._data == self._data
    80:         return repr(self._data)
   111:         return BaseAdapterRegistry
   129:         return _CUT
   132:         return self._getTargetClass()()
   135:         return dict
   138:         return dict
   141:         return list
   144:         return tuple
   237:             return L([
   309:             return existing
   730:             return L([
   773:             return P({
   812:             return existing
   835:         return CustomMapping
   838:         return CustomProvided
   841:         return CustomSequence
   844:         return CustomLeafSequence
   858:                 return existing_leaf_sequence
   867:                 return existing_leaf_sequence
   869:         return CustomAdapterRegistry
   879:         return LookupBaseFallback
   899:         return Derived()
   935:             return _results.pop(0)
   948:             return _results.pop(0)
   962:             return _results.pop(0)
   975:             return _results.pop(0)
   989:             return _results.pop(0)
  1047:             return _results.pop(0)
  1060:             return _results.pop(0)
  1074:             return _results.pop(0)
  1102:     def test_adapter_hook_hit_factory_returns_None(self):
  1108:             return _factory
  1115:     def test_adapter_hook_hit_factory_returns_adapter(self):
  1120:             return _adapter
  1122:             return _factory
  1133:             return context
  1135:             return _factory
  1148:             return _adapter
  1150:             return _factory
  1162:             return tuple(_results)
  1173:             return tuple(_results)
  1185:             return tuple(_results)
  1196:             return tuple(_results)
  1209:         return LookupBase
  1216:         return VerifyingBaseFallback
  1241:         return derived
  1249:         return Registry(depth)
  1257:             return _results.pop(0)
  1278:             return _results.pop(0)
  1296:             return a
  1298:             return b
  1303:             return _factories.pop(0)
  1318:             return a
  1320:             return b
  1325:             return _factories.pop(0)
  1342:             return tuple(_results.pop(0))
  1358:             return tuple(_results.pop(0))
  1375:         return VerifyingBase
  1382:         return AdapterLookupBase
  1385:         return self._getTargetClass()(registry)
  1392:         return Subregistry()
  1399:         return Registry(provided)
  1443:                 return self if self._here else None
  1652:             return alb.queryMultiAdapter(
  1703:             return _expected
  1720:             return factory
  1722:             return args
  1910:                 return True
  1967:             return _exp1
  1970:             return _exp2
  2000:         return VerifyingAdapterRegistry
  2003:         return self._getTargetClass()(*args, **kw)
  2016:         return AdapterRegistry

PythonVenv\Lib\site-packages\zope\interface\tests\test_advice.py:
   85:         return isClassAdvisor(*args, **kw)
  106:         return determineMetaclass(*args, **kw)
  162:         return minimalBases(klasses)

PythonVenv\Lib\site-packages\zope\interface\tests\test_declarations.py:
    40:                 return False
    44:             return None
    84:         return Declaration()
   140:         return Declaration
   143:         return self._getTargetClass()(*args, **kw)
   343:         return _ImmutableDeclaration
   347:         return _empty
   375:         # Doesn't change the return.
   411:         return Implements
   414:         return self._getTargetClass()(*args, **kw)
   421:         return implementedBy(A)
   469:                 return self._wrapped == other
   472:                 return self._wrapped != other
   526:         return implementedByFallback
   531:         return self._getTargetClass()(*args, **kw)
   850:         return implementedBy
   857:         # Declare that *cls* implements *iface*; return *cls*
   868:         returned = self._callFUT(Foo, IFoo)
   870:         self.assertIs(returned, Foo)
   885:         return Foo, IFoo
   898:         return cls
   944:         result = classImplements(cls, iface) # pylint:disable=assignment-from-no-return
   946:         return cls
   956:         returned = self._callFUT(Child, IBase)
   957:         self.assertIn('__implemented__', returned.__dict__)
   958:         self.assertNotIn('__providedBy__', returned.__dict__)
   959:         self.assertIn('__provides__', returned.__dict__)
   992:         return (applied_first, applied_second)
  1046:         result = classImplementsFirst(cls, iface) # pylint:disable=assignment-from-no-return
  1048:         return cls
  1051:         return (applied_second, applied_first)
  1058:         return _implements_advice(*args, **kw)
  1077:         return implementer
  1080:         return self._getTargetClass()(*args, **kw)
  1084:         return decorator(cls)
  1099:         returned = decorator(foo)
  1100:         self.assertTrue(returned is foo)
  1142:         return implementer_only
  1145:         return self._getTargetClass()(*args, **kw)
  1149:         return decorator(cls)
  1176:         return ProvidesClass
  1179:         return self._getTargetClass()(*args, **kw)
  1218:             return foo.__provides__
  1229:                 return ProvidesClass._do_calculate_ro(self, base_mros=base_mros, strict=True)
  1230:         return StrictProvides
  1260:         return ProvidesClass
  1263:         return self._getTargetClass()(*args, **kw)
  1401:                 return '<Object>'
  1451:         return Provides(*args, **kw)
  1482:         return directlyProvides(*args, **kw)
  1514:                     return None
  1528:         return alsoProvides(*args, **kw)
  1560:         return noLongerProvides(*args, **kw)
  1610:         return ClassProvidesBaseFallback
  1619:         return Derived(klass, implements)
  1657:         return ClassProvidesBase
  1662:         return ClassProvidesBaseFallback
  1669:         return ClassProvides
  1672:         return self._getTargetClass()(*args, **kw)
  1706:                 return ClassProvides._do_calculate_ro(self, base_mros=base_mros, strict=True)
  1707:         return StrictClassProvides
  1744:         return ClassProvides
  1747:         return self._getTargetClass()(*args, **kw)
  1802:                 return self
  1823:         return directlyProvidedBy(*args, **kw)
  1869:         return provider
  1872:         return self._getTargetClass()(*args, **kw)
  1950:         return getObjectSpecificationFallback
  1955:         return self._getTargetClass()(*args, **kw)
  1965:                     return the_dict[name]
  2055:         return getObjectSpecification
  2063:         return providedByFallback
  2068:         return self._getTargetClass()(*args, **kw)
  2308:         return providedBy
  2317:         return ObjectSpecificationDescriptorFallback
  2322:         return self._getTargetClass()(*args, **kw)
  2409:                 return None
  2423:         return ObjectSpecificationDescriptor
  2438:         return self
  2455:         return self.target

PythonVenv\Lib\site-packages\zope\interface\tests\test_document.py:
   24:         return asStructuredText(iface)
  252:         return asReStructuredText(iface)
  480:         return _justify_and_indent(text, level, **kw)

PythonVenv\Lib\site-packages\zope\interface\tests\test_exceptions.py:
   23:     return IDummy
   29:         return DoesNotImplement
   33:         return self._getTargetClass()(iface, *args)
   58:         return BrokenImplementation
   62:         return self._getTargetClass()(iface, 'missing', *args)
   94:         return BrokenMethodImplementation
   99:         return self._getTargetClass()('aMethod', self.message, *args)
  149:         return MultipleInvalid
  153:         return self._getTargetClass()(iface, 'target', excs)

PythonVenv\Lib\site-packages\zope\interface\tests\test_interface.py:
   109:         return Element
   114:         return self._getTargetClass()(name)
   179:         return SpecificationBasePy
   184:         return self._getTargetClass()()
   191:             return _empty
   200:             return _empty
   211:         return SpecificationBase
   244:             return _Decl()
   254:             return _Decl()
   262:         return self._makeOne('a', 'b')
   274:         # is missing from the other object, then we return
   280:                     return object.__getattribute__(self, name)
   306:         # If the other object has a comparison function, returning
   311:                 return True
   373:         return InterfaceBasePy
   378:                 return conform(self)
   380:                 return object_should_provide
   381:         return IB(name, module)
   383:     def test___call___w___conform___returning_value(self):
   388:                 return conformed
   415:         return InterfaceBase
   427:                 return None
   444:             return obj
   453:         return Specification
   457:             return self._getTargetClass()()
   458:         return self._getTargetClass()(bases)
   610:         return InterfaceClass
   614:         return self._getTargetClass()(name, bases, attrs, __doc__, __module__)
   661:     def test_ctor_attrs_w__decorator_non_return(self):
   662:         from zope.interface.interface import _decorator_non_return
   663:         ATTRS = {'dropme': _decorator_non_return}
   869:             return one['nonesuch']
   937:             return True
   949:             return True
   981:             return True
  1001:             return True
  1022:             return True
  1125:                 return args
  2018:         return A
  2094:                 return 0
  2144:             return self
  2170:                 return 42
  2183:         # *if* it returns non-None
  2191:                 return 42
  2199:                 return 24
  2204:                 return None
  2229:                     return 42
  2230:                 return super().__adapt__(obj)
  2247:                 return 42
  2265:                 return 42
  2281:                 return 24
  2308:                 return 42
  2312:                 return 42
  2324:         return Attribute
  2357:         return Method
  2445:         return fromFunction(*args, **kw)
  2555:         return fromMethod(*args, **kw)
  2636:         return self

PythonVenv\Lib\site-packages\zope\interface\tests\test_interfaces.py:
    9:         return self._getTargetClass()(target)
   39:         return ObjectEvent
   52:         return RegistrationEvent
   67:         return Registered
   85:         return Unregistered
  102:         return InterfaceClass
  106:         return IInterface
  110:         return Interface

PythonVenv\Lib\site-packages\zope\interface\tests\test_registry.py:
    26:         return Components
    29:         return self._getTargetClass()(name, *args, **kw)
    37:         return _monkey, _events
   151:             return _to_reg
   470:             return _to_reg
  1622:     def test_getAdapters_factory_returns_None(self):
  1642:             return None
  2071:             return x.__class__.__name__
  2166:             return x.factory.__code__.co_name
  2447:         return Components
  2457:         return UtilityRegistration
  2468:                 return '_REGISTRY'
  2473:         return (klass(registry, ifoo, name, component, doc, factory),
  2501:                 return 'TEST'
  2512:                 return 'TEST'
  2643:         return AdapterRegistration
  2654:                 return '_REGISTRY'
  2659:         return (klass(registry, (ibar,), ifoo, name, component, doc),
  2687:                 return 'TEST'
  2698:                 return 'TEST'
  2852:         return SubscriptionRegistration
  2863:                 return '_REGISTRY'
  2868:         return (klass(registry, (ibar,), ifoo, name, component, doc),
  2889:         return HandlerRegistration
  2899:                 return '_REGISTRY'
  2904:         return (klass(registry, (ifoo,), name, component, doc),
  2939:                 return 'TEST'
  2953:         return state
  2984:         return PersistentComponents('test')
  3027:         return PersistentDictComponents
  3032:         return comp
  3041:         return PersistentComponentsDict
  3052:         return self

PythonVenv\Lib\site-packages\zope\interface\tests\test_ro.py:
   24:         return _legacy_mergeOrderings(orderings)
   48:         return _legacy_flatten(ob)
   86:         return _legacy_ro(ob, **kwargs)
  126:                 return self.__name__
  137:         return IOErr, [IOErr, IIOErr, IOSErr, IEnvErr, IStdErr, IEx]
  204:         return ro(ob, **kwargs)
  225:         return A
  290:                 return self.__name__
  390:         return C3.resolver(C, strict, base_mros)
  416:         return _ROComparison(c3 or self.MockC3(), c3_ro, legacy_ro)

PythonVenv\Lib\site-packages\zope\interface\tests\test_sorting.py:
  59:         return I1

PythonVenv\Lib\site-packages\zope\interface\tests\test_verify.py:
   31:         return verifyClass
   36:         return self.verifier(iface,
  518:             return property(lambda self: func.__get__(self))
  593:         return verifyObject
  598:         return target

PythonVenv\Lib\site-packages\zope.interface-6.4.post2.dist-info\METADATA:
   363: - Make the internal singleton object returned by APIs like
   398: - Make an internal singleton object returned by APIs like
   536:   ``providedBy(super(Derived, derived))`` will return ``[IBase]``.
   537:   Previously it would have returned ``[IDerived]`` (in general, it
   538:   would previously have returned whatever would have been returned
   738: - Add the ability to sort the objects returned by ``implementedBy``.
   927:   returns a fixed constant hash in such cases, and issues a ``UserWarning``.
   956: - LP # 675064:  Specify return value type for C optimizations module init
  1118:   be returned.

PythonVenv\Lib\site-packages\zstandard\__init__.py:
  102:     The object returned from this function will be a
  127:        ``bool`` whether to close the file when the returned object is closed.
  129:         opened file is always closed when the returned object is closed.
  170:         return io.TextIOWrapper(
  174:         return fh
  192:     return cctx.compress(data)
  210:     return dctx.decompress(data, max_output_size=max_output_size)

PythonVenv\Lib\site-packages\zstandard\__init__.pyi:
  301:         write_return_read: bool = ...,
  420:         write_return_read: bool = ...,

PythonVenv\Lib\site-packages\zstandard\backend_cffi.py:
   163:         return os.cpu_count() or 0
   169:         return os.sysconf("SC_NPROCESSORS_ONLN")
   174:     return 0
   243:         The returned object references memory within this buffer.
   247:         :return:
   255:         :return:
   295:     return ffi.string(lib.ZSTD_getErrorName(zresult)).decode("utf-8")
   332:     return res
   382:         :return:
   401:         return ZstdCompressionParameters(**kwargs)
   495:         return _get_compression_parameter(self._params, lib.ZSTD_c_format)
   499:         return _get_compression_parameter(
   505:         return _get_compression_parameter(self._params, lib.ZSTD_c_windowLog)
   509:         return _get_compression_parameter(self._params, lib.ZSTD_c_hashLog)
   513:         return _get_compression_parameter(self._params, lib.ZSTD_c_chainLog)
   517:         return _get_compression_parameter(self._params, lib.ZSTD_c_searchLog)
   521:         return _get_compression_parameter(self._params, lib.ZSTD_c_minMatch)
   525:         return _get_compression_parameter(self._params, lib.ZSTD_c_targetLength)
   529:         return _get_compression_parameter(self._params, lib.ZSTD_c_strategy)
   533:         return _get_compression_parameter(
   539:         return _get_compression_parameter(self._params, lib.ZSTD_c_checksumFlag)
   543:         return _get_compression_parameter(self._params, lib.ZSTD_c_dictIDFlag)
   547:         return _get_compression_parameter(self._params, lib.ZSTD_c_jobSize)
   551:         return _get_compression_parameter(self._params, lib.ZSTD_c_overlapLog)
   555:         return _get_compression_parameter(
   561:         return _get_compression_parameter(
   567:         return _get_compression_parameter(self._params, lib.ZSTD_c_ldmHashLog)
   571:         return _get_compression_parameter(self._params, lib.ZSTD_c_ldmMinMatch)
   575:         return _get_compression_parameter(
   581:         return _get_compression_parameter(
   587:         return _get_compression_parameter(self._params, lib.ZSTD_c_nbWorkers)
   591:         return lib.ZSTD_estimateCCtxSize_usingCCtxParams(self._params)
   597:     :return:
   600:     return lib.ZSTD_estimateDCtxSize()
   622:     return result[0]
   641:     Both ``write()`` and ``flush()`` return the number of bytes written to the
   643:     data to cause a write and ``write()`` will return ``0``.
   720:     ``stream_writer()`` accepts a ``write_return_read`` boolean argument to
   721:     control the return value of ``write()``. When ``False`` (the default),
   722:     ``write()`` returns the number of bytes that were ``write()``'en to the
   723:     underlying object. When ``True``, ``write()`` returns the number of bytes
   736:         write_return_read,
   742:         self._write_return_read = bool(write_return_read)
   769:         return self
   776:         return False
   785:         return lib.ZSTD_sizeof_CCtx(self._compressor._cctx)
   790:             return f()
   796:             return
   812:         return self._closed
   815:         return False
   818:         return False
   830:         return False
   836:         return True
   887:         if self._write_return_read:
   888:             return in_buffer.pos
   890:             return total_write
   910:         :return:
   958:         return total_write
   961:         return self._bytes_compressed
   977:        returning a single buffer holding compressed data. When compressing
  1025:         This method receives bytes to feed to the compressor and returns
  1028:         The zstd compressor accumulates bytes and the returned bytes may be
  1030:         any given call. The returned value may be the empty byte string
  1035:         :return:
  1062:         return b"".join(chunks)
  1084:         :return:
  1129:         return b"".join(chunks)
  1138:     ``compress()``, ``flush()``, and ``finish()`` all return an iterator of
  1140:     Callers MUST iterate through all elements of the returned iterator before
  1148:     ``flush()`` and ``finish()`` may return a final chunk smaller than
  1204:         :return:
  1219:             return
  1247:         :return:
  1273:                 return
  1282:         :return:
  1309:                 return
  1324:     because they don't make sense for compressed data. ``tell()`` returns the
  1402:         return self
  1410:         return False
  1413:         return True
  1416:         return False
  1419:         return False
  1434:         return False
  1437:         return None
  1441:             return
  1451:         return self._closed
  1454:         return self._bytes_compressed
  1466:         return b"".join(chunks)
  1478:             return
  1485:                 return
  1499:             return
  1524:         return out_buffer.pos and out_buffer.pos == out_buffer.size
  1534:             return self.readall()
  1537:             return b""
  1547:             return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1553:                 return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1572:         return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1582:             return b""
  1584:         # -1 returns arbitrary number of bytes.
  1604:             return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1609:             # If we've filled the output buffer, return immediately.
  1611:                 return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1614:             # also return, as we've satisfied the read1() limits.
  1616:                 return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1638:         return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  1645:             return 0
  1656:             return out_buffer.pos
  1661:                 return out_buffer.pos
  1679:         return out_buffer.pos
  1686:             return 0
  1699:             return out_buffer.pos
  1705:                 return out_buffer.pos
  1708:                 return out_buffer.pos
  1727:         return out_buffer.pos
  1923:         return lib.ZSTD_sizeof_CCtx(self._cctx)
  1939:         :return:
  1978:         return ffi.buffer(out, out_buffer.pos)[:]
  1988:         :return:
  2013:         return cobj
  2026:         :return:
  2040:         return ZstdCompressionChunker(self, chunk_size=chunk_size)
  2073:         The stream copier returns a 2-tuple of bytes read and written:
  2089:         :return:
  2162:         return total_read, total_write
  2191:            Whether to close the source stream when the returned stream is
  2193:         :return:
  2212:         return ZstdCompressionReader(self, source, read_size, closefd=closefd)
  2219:         write_return_read=True,
  2241:         :param write_return_read:
  2242:            Whether ``write()`` should return the number of bytes that were
  2246:         :return:
  2257:         return ZstdCompressionWriter(
  2258:             self, writer, size, write_size, write_return_read, closefd=closefd
  2269:         Read uncompressed data from a reader and return an iterator
  2271:         Returns an iterator of compressed data produced from reading from
  2288:         until it raises or returns an empty bytes (``b""``). It is perfectly
  2293:         compressor by how it consumes the returned iterator. The compressor
  2327:         :return:
  2448:         The function returns a ``BufferWithSegmentsCollection``. This type
  2466:           facilitating a variation of the API to return a list without the
  2474:         :return:
  2481:         Return information on how much work the compressor has done.
  2483:         Returns a 3-tuple of (ingested, consumed, produced).
  2490:         return progression.ingested, progression.consumed, progression.produced
  2526:     The returned value is usually accurate. But strictly speaking it should
  2529:     :return:
  2539:         return -1
  2541:         return size
  2547:     :return:
  2558:     return zresult
  2572:     :return:
  2589:     return FrameParameters(params[0])
  2693:         return len(self._data)
  2697:         return int(lib.ZDICT_getDictID(self._data, len(self._data)))
  2701:         return self._data
  2762:         return ddict
  2782:     iterable of ``samples``. The raw dictionary bytes will be returned.
  2789:     *segment size* and *dmer size*, respectively. The returned dictionary
  2900:     return ZstdCompressionDict(
  2917:     uncompressed output (or an empty bytes) is returned. Output from
  2932:     before being returned to the caller. It is possible to define the size of
  2957:         :return:
  2969:             return b""
  3027:         return b"".join(chunks)
  3036:         :return:
  3039:         return b""
  3049:         return self._unused_input
  3054:         return b""
  3059:         return self._finished
  3109:     ``tell()`` returns the number of decompressed bytes read so far.
  3155:         return self
  3163:         return False
  3166:         return True
  3169:         return False
  3172:         return False
  3187:         return False
  3190:         return None
  3194:             return None
  3204:         return self._closed
  3207:         return self._bytes_decompressed
  3219:         return b"".join(chunks)
  3232:             return
  3236:             return
  3244:                 return
  3259:         Returns True if data in output buffer should be emitted.
  3280:         return out_buffer.pos and (
  3295:             return self.readall()
  3298:             return b""
  3311:             return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  3317:                 return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  3320:         return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  3327:             return 0
  3340:             return out_buffer.pos
  3346:                 return out_buffer.pos
  3349:         return out_buffer.pos
  3359:             return b""
  3361:         # -1 returns arbitrary number of bytes.
  3383:         return ffi.buffer(out_buffer.dst, out_buffer.pos)[:]
  3390:             return 0
  3409:         return out_buffer.pos
  3450:         return self._bytes_decompressed
  3495:     ``stream_writer()`` accepts a ``write_return_read`` boolean argument to control
  3496:     the return value of ``write()``. When ``True`` (the default)``, ``write()``
  3497:     returns the number of bytes that were read from the input. When ``False``,
  3498:     ``write()`` returns the number of bytes that were ``write()`` to the inner
  3507:         write_return_read,
  3515:         self._write_return_read = bool(write_return_read)
  3530:         return self
  3536:         return False
  3545:         return lib.ZSTD_sizeof_DCtx(self._decompressor._dctx)
  3549:             return
  3564:         return self._closed
  3569:             return f()
  3579:             return f()
  3582:         return False
  3585:         return False
  3597:         return False
  3606:         return True
  3655:         if self._write_return_read:
  3656:             return in_buffer.pos
  3658:             return total_write
  3729:         return lib.ZSTD_sizeof_DCtx(self._dctx)
  3742:         return the decompressed data.
  3810:         :return:
  3830:             return b""
  3874:         return ffi.buffer(result_buffer, out_buffer.pos)[:]
  3905:         :return:
  3909:         return ZstdDecompressionReader(
  3928:         :return:
  3935:         return ZstdDecompressionObj(
  3956:         will return compressed bytes or an object conforming to the buffer
  3959:         ``read_to_iter()`` returns an iterator whose elements are chunks of the
  4003:         :return:
  4080:                     return
  4091:         write_return_read=True,
  4109:         :param write_return_read:
  4110:            Whether ``write()`` should return the number of bytes of input
  4111:            consumed. If False, ``write()`` returns the number of bytes sent
  4115:         :return:
  4121:         return ZstdDecompressionWriter(
  4125:             write_return_read,
  4171:         :return:
  4222:         return total_read, total_write
  4260:         ...    return frames
  4262:         ``decompress_content_dict_chain()`` returns the uncompressed data of the last
  4275:         :return:
  4326:             return ffi.buffer(last_buffer, len(last_buffer))[:]
  4371:         return ffi.buffer(last_buffer, len(last_buffer))[:]
  4390:         Returns a ``BufferWithSegmentsCollection`` containing the decompressed
  4421:         :py:meth:`ZstdCompressor.decompress` on each input frame and returning the
  4446:         :return:

PythonVenv\man\man1\nosetests.1:
  541: Set timeout for return of results from each test runner process. Default is 10. [NOSE_PROCESS_TIMEOUT]

PythonVenv\Scripts\activate-global-python-argcomplete:
   35:         return subprocess.check_output(["brew", "--prefix"]).decode().strip()
   37:         return "/usr/local"
   41:     return f"{get_local_dir()}/share/zsh/site-functions"
   46:         return os.environ["BASH_COMPLETION_COMPAT_DIR"]
   48:         return f"{get_local_dir()}/etc/bash_completion.d"  # created by homebrew
   50:         return "/etc/bash_completion.d"  # created by bash-completion
   54:     return os.path.join(os.path.abspath(os.path.dirname(argcomplete.__file__)), "bash_completion.d")
   58:     return os.path.join(get_activator_dir(), "_python-argcomplete")
   66:         return
   85:         return True
   91:             return True
   93:             return False
  101:                 return
  107:             return

PythonVenv\Scripts\Activate.ps1:
  118: given folder, and returns them in a map.
  140:     # An empty map will be returned if no config file is found.
  163:     return $pyvenvConfig

PythonVenv\Scripts\dumppdf.py:
   30:     return ESC_PAT.sub(lambda m: "&#%d;" % ord(m.group(0)), us)
   36:         return
   46:         return
   54:         return
   58:         return
   75:         return
   79:         return
   84:         return
   89:         return
   93:         return
  114:     return
  141:     return
  171:         return dest
  202:     return
  233:         return
  249:     return
  286:     return
  404:     return parser

PythonVenv\Scripts\google:
  48:         return '%s\n%s' % (self.banner, msg)

PythonVenv\Scripts\pdf2txt.py:
   20:         return None
   22:         return float(x)
   63:     return outfp
  202:         "instead return text based on the position of the bottom left "
  275:     return parser
  306:     return parsed_args
  313:     return 0

PythonVenv\Scripts\prichunkpng:
  120:     return png.write_chunks(out, edit_chunks(input.chunks(), delete, replace, add))
  162:     return s.encode("ascii")
  171:     return tuple(int(v) for v in s.split(","))
  191:         return (int(s, 16),)
  195:         return tuple(int(s[i : i + w], 16) for i in range(0, len(s), w))
  262:     return process(png.binary_stdout(), args)

PythonVenv\Scripts\pricolpng:
  78:     return join_col(png.binary_stdout(), args.input)

PythonVenv\Scripts\priditherpng:
  142:     return table
  250:     return dither(png.binary_stdout(), **vars(ns))

PythonVenv\Scripts\priforgepng:
   18:     return x
   23:     return 1 - x
   28:     return y
   33:     return 1.0 - y
   38:     return max(1 - (float(x) ** 2 + float(y) ** 2) ** 0.5, 0.0)
   43:     return gen_rtl(float(x) - 0.5, float(y) - 0.5)
   48:     return gen_rtl(1.0 - float(x), y)
   53:     return gen_rtl(x, 1.0 - float(y))
   58:     return gen_rtl(1.0 - float(x), 1.0 - float(y))
   62:     return int(x * n) & 1
   67:     return stripe(x, 2)
   72:     return stripe(x, 4)
   77:     return stripe(x, 10)
   82:     return stripe(float(y), 2)
   87:     return stripe(float(y), 4)
   92:     return stripe(float(y), 10)
   97:     return stripe(x + y, 10)
  102:     return stripe(1 + x - y, 10)
  106:     return stripe(x, n) ^ stripe(y, n)
  111:     return checker(x, y, 8)
  116:     return checker(x, y, 15)
  121:     return 0
  126:     return 1
  163:         return
  172:     return
  197:     return fun.__code__.co_argcount
  202:     return the function for that pattern.
  211:             return fun
  238:     return list(map(int, tupl))
  267:         return
  271:     return generate(args)

PythonVenv\Scripts\prigreypng:
  27:         return w.write(out, rows)
  57:     return w.write(out, iterasgrey())
  66:     return as_grey(png.binary_stdout(), args.input)

PythonVenv\Scripts\pripalpng:
  31:     return palette
  64:         return palette_map.get(p, last)
  80:     Return (width, height, rows, info) converting to RGB,
  85:         return reader.asRGBA8()
  87:         return reader.asRGB8()

PythonVenv\Scripts\pripamtopng:
   21:     Returns are as for `read_pnm_header`.
   55:     return (b"P7",) + tuple(result)
   60:     Read a PNM header, returning (format,width,height,depth,maxval).
   78:         return read_pam_header(infile)
  104:         return c
  128:             return None, lexInit
  132:             return None, lexInit
  135:         return None, lexNumber
  149:         return token, lexInit
  165:     return header[0], header[1], header[2], depth, header[3]
  222:                 return
  258:             return array.array("H", struct.unpack(fmt, infile.read(bpr)))
  263:             return array.array("B", infile.read(bpr))
  294:     return args

PythonVenv\Scripts\priplan9topng:
   55:     return zip(*[iter(s)] * n)
   74:     return png.Image(rows, infodict)
   79:     file object), and return (`info`, `blocks`) pair.
   93:     return info, blocks
   97:     """Return (info, stream) pair, given `r` the initial portion of
  102:     return (meta(r), f)
  107:     Returns a 5-tuple (*chan*,*minx*,*miny*,*limx*,*limy*).
  121:     return r
  125:     """Return the bitdepth for a Plan9 pixel format string."""
  131:     return maxd
  135:     """Return the netpbm MAXVAL for a Plan9 pixel format string."""
  138:     return (2 ** bitdepth) - 1
  145:     *info* is the image info (metadata) returned in a dictionary,
  174:     return (
  190:     `f` should be an iterator that returns blocks of input such that
  192:     The return value is an iterator that yields each pixel as an n-tuple.
  198:         return (1 << w) - 1
  281:     The return result is (`info`, `blocks`);
  288:     return r, decomprest(f, r[4])
  354:     return row, bytes(o)
  452:     """Return a fresh png.Image instance."""
  458:     return png.Image(rows, info)

PythonVenv\Scripts\pripnglsch:
  29:     return list_chunks(sys.stdout, args.input)

PythonVenv\Scripts\prirowpng:
  68:     return join_row(png.binary_stdout(), args.input)

PythonVenv\Scripts\priweavepng:
  181:     Type and return a list of integers.
  184:     return [int(c) for c in re.findall(r"\d+", s)]
  211:     return weave(png.binary_stdout(), args)

PythonVenv\Scripts\pwiz.py:
   52:     return Introspector.from_database(db, schema=schema)
  189:     return parser
  196:     return kwargs

PythonVenv\Scripts\pywin32_postinstall.py:
   91:             return winreg.HKEY_LOCAL_MACHINE
   95:             return winreg.HKEY_CURRENT_USER
  139:                 return shell.SHGetSpecialFolderPath(0, csidl, False)
  150:             return
  169:                 return
  265:             return chm_file
  270:     return None
  355:     return os.path.join(fldr, install_group)
  370:                 return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)
  371:             return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)
  373:             return win32api.GetSystemDirectory()
  375:         return win32api.GetSystemDirectory()
  696:     return location

PythonVenv\Scripts\pywin32_testall.py:
  18: # If we get an returncode != 0, we know that there was an error, but we don't
  27:     print("*** Test script '%s' exited with %s" % (script, result.returncode))
  29:     if result.returncode:

PythonVenv\Scripts\translate:
  27:         return

SchwebelDB\schwebeldb.py:
  33:             return self.data[key]

Sociavel\app.py:
  14:         return redirect(url_for('dashboard'))
  15:     return render_template('index.html')
  21:         return redirect(url_for('index'))
  23:     return render_template('dashboard.html', username=session['username'], user_posts=user_posts)
  34:                 return redirect(url_for('dashboard'))
  35:         return 'Credenciais inv√°lidas. Por favor, tente novamente.'
  36:     return render_template('login.html')
  46:                 return 'Nome de usu√°rio j√° em uso. Por favor, escolha outro.'
  50:         return redirect(url_for('dashboard'))
  51:     return render_template('register.html')
  57:     return redirect(url_for('index'))
  63:         return redirect(url_for('index'))
  73:         return redirect(url_for('dashboard'))
  74:     return render_template('new_post.html')

Sociavel\Blog\app.py:
  28:         return user
  32:     return render_template('index.html', posts=posts)
  37:     return render_template('post.html', post=post)
  51:         return redirect(url_for('index'))
  52:     return render_template('add_post.html')
  62:             return redirect(url_for('index'))
  63:     return render_template('login.html')
  69:     return redirect(url_for('index'))

Sudoku-Web-Game-flask-master\app.py:
   21:     return row
   26:     Returns a tuple of the number of stars and forks for this repo.
   30:     return stats['stargazers_count'], stats['forks_count']
   35: #     return render_template("index.html")
   40:     return render_template("googlee2dc31cef81dd8eb.html")
   50:         return jsonify(
  135:         return render_template("index.html", stars=stars, forks=forks)
  154:     # return ""
  155:     return jsonify(
  244:     return render_template("about.html")
  249:     return render_template("Privacy.html")

Sudoku-Web-Game-flask-master\GenerateSudoku.py:
   31:         """ Returns whether or not a cell has been solved"""
   32:         return self.solved
   35:         """ Returns the position of a cell within a sudoku puzzle. x = row; y = col; z = box number"""
   36:         return self.position
   38:     def returnPossible(self):
   39:         """ Returns a list of possible answers that a cell can still use"""
   40:         return self.possibleAnswers
   43:         """ Returns an integer of the length of the possible answers list"""
   44:         return len(self.possibleAnswers)
   46:     def returnSolved(self):
   47:         """ Returns whether or not a cell has been solved"""
   49:             return self.possibleAnswers[0]
   51:             return "0"
   93:     return ans
  108:             row1.append(sudoku[i].returnSolved())
  110:             row2.append(sudoku[i].returnSolved())
  112:             row3.append(sudoku[i].returnSolved())
  114:             row4.append(sudoku[i].returnSolved())
  116:             row5.append(sudoku[i].returnSolved())
  118:             row6.append(sudoku[i].returnSolved())
  120:             row7.append(sudoku[i].returnSolved())
  122:             row8.append(sudoku[i].returnSolved())
  124:             row9.append(sudoku[i].returnSolved())
  126:     return np.array([row1,row2,row3,row4,row5,row6,row7,row8,row9])
  148:             possibleValues = choiceElement.returnPossible()
  161:             finalValue = choiceElement.returnSolved()
  170:     return sudoku
  174:         of the rules of a sudoku puzzle. Returns True if the puzzle is correct. False if otherwise"""
  181:                     num1 = sudoku[i].returnSolved()
  182:                     num2 = sudoku[n].returnSolved()
  184:                         return False
  185:     return True
  193:     return s
  196:     """ Input an incomplete Sudoku puzzle and solver method will return the solution to the puzzle. First checks to see if any obvious answers can be set
  199:         all of the cells have been solved. Returns a printed solution to the puzzle and the number of guesses that it took to complete the puzzle. The number of guesses is
  202:         return False
  214:             finalValue = copy_s[n].returnSolved()
  239:             randGuess = random.choice(copy_s[randCell].returnPossible())
  252:         return copy_s, guesses, level
  254:         return solver(sudoku, f+1)
  257:     """ Uses the solver method to solve a puzzle. This method was built in order to avoid recursion depth errors. Returns True if the puzzle is solvable and
  262:             return s
  266:         return False
  279:             return printSudoku(sudoku)
  285:             return sudoku, f[1], f[2]
  290:         if s1[i].returnSolved() != s2[i].returnSolved():
  291:             return False
  292:     return True
  304:             return main(level)
  307:         return printSudoku(s[0])
  315:                 return main(level)
  317:             return main(level)
  320:         return printSudoku(s[0])
  328:                 return main(level)
  333:                 return main(level)
  335:             return main(level)
  338:         return printSudoku(s[0])
  346:                 return main(level)
  349:         return printSudoku(s[0])

Sudoku-Web-Game-flask-master\SolveSudoku.py:
   19: 	# return false
   22: 			return False
   26: 	# return false
   29: 			return False
   33: 	# we return false
   39: 				return False
   40: 	return True
   52: 	# returning true to avoid
   55: 		return True
   68: 		return solveSuduko(grid, row, col + 1)
   88: 				return True
   96: 	return False
  112:         return np.array(grid)
  114:         return False

Sudoku-Web-Game-flask-master\static\script\app.js:
   19:     setInputFilter(this, function(value) { return /^\d*$/.test(value) && (value === '' || parseInt(value) > 0 && parseInt(value) <= 9); });
  347:         return true;
  348:     } else { return false }
  356:         return true;
  358:     } else { return false }

Texteditor\pdfs.py:
  74:     return pdf.output()

Texteditor\TE1.py:
  115:                 return True
  117:                 return False
  118:         return True

Texteditor\TE2.py:
  146:                 return True
  148:                 return False
  149:         return True

Texteditor\TE3.py:
   97:         return
  107:         return
  147:         return export_to_pdf(file=self)
  181:                             return True
  182:                 return False
  184:                 return False
  249:                 return True
  251:                 return False
  252:         return True
  297:         return opening_tags + text + closing_tags
  359:      return html_content

webchat-main\LICENSE:
  619: copy of the Program in return for a fee.

webchat-main\newchat\chat2.py:
   8:     return dados['usuarios']
  15:         return dados['historico']
  17:         return []

webchat-main\Sender\main.py:
  19:         return dados['historico']
  21:         return []

WebLanguage\newFile.js:
  2:     return x;

WebLanguage\WL1.py:
    8:             return int(token)
   11:                 return float(token)
   13:                 return None
   19:             return "Invalid expression"
   25:                 return "Invalid expression"
   35:                     return "Division by zero"
   38:                 return "Invalid operator"
   40:         return str(result)
  187:         return self.output
